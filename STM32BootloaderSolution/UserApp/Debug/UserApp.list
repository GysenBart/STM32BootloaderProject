
UserApp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08020000  08020000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d6c  080201ac  080201ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08021f18  08021f18  00002f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08021f30  08021f30  0000300c  2**0
                  CONTENTS
  4 .ARM          00000008  08021f30  08021f30  00002f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08021f38  08021f38  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08021f38  08021f38  00002f38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08021f3c  08021f3c  00002f3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08021f40  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000300c  2**0
                  CONTENTS
 10 .bss          00000068  2000000c  2000000c  0000300c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000074  20000074  0000300c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008fd1  00000000  00000000  0000303c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001411  00000000  00000000  0000c00d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000650  00000000  00000000  0000d420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000004d5  00000000  00000000  0000da70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000235a4  00000000  00000000  0000df45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000080af  00000000  00000000  000314e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7a8e  00000000  00000000  00039598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00111026  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000018d0  00000000  00000000  0011106c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000099  00000000  00000000  0011293c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080201ac <__do_global_dtors_aux>:
 80201ac:	b510      	push	{r4, lr}
 80201ae:	4c05      	ldr	r4, [pc, #20]	@ (80201c4 <__do_global_dtors_aux+0x18>)
 80201b0:	7823      	ldrb	r3, [r4, #0]
 80201b2:	b933      	cbnz	r3, 80201c2 <__do_global_dtors_aux+0x16>
 80201b4:	4b04      	ldr	r3, [pc, #16]	@ (80201c8 <__do_global_dtors_aux+0x1c>)
 80201b6:	b113      	cbz	r3, 80201be <__do_global_dtors_aux+0x12>
 80201b8:	4804      	ldr	r0, [pc, #16]	@ (80201cc <__do_global_dtors_aux+0x20>)
 80201ba:	f3af 8000 	nop.w
 80201be:	2301      	movs	r3, #1
 80201c0:	7023      	strb	r3, [r4, #0]
 80201c2:	bd10      	pop	{r4, pc}
 80201c4:	2000000c 	.word	0x2000000c
 80201c8:	00000000 	.word	0x00000000
 80201cc:	08021f00 	.word	0x08021f00

080201d0 <frame_dummy>:
 80201d0:	b508      	push	{r3, lr}
 80201d2:	4b03      	ldr	r3, [pc, #12]	@ (80201e0 <frame_dummy+0x10>)
 80201d4:	b11b      	cbz	r3, 80201de <frame_dummy+0xe>
 80201d6:	4903      	ldr	r1, [pc, #12]	@ (80201e4 <frame_dummy+0x14>)
 80201d8:	4803      	ldr	r0, [pc, #12]	@ (80201e8 <frame_dummy+0x18>)
 80201da:	f3af 8000 	nop.w
 80201de:	bd08      	pop	{r3, pc}
 80201e0:	00000000 	.word	0x00000000
 80201e4:	20000010 	.word	0x20000010
 80201e8:	08021f00 	.word	0x08021f00

080201ec <__aeabi_uldivmod>:
 80201ec:	b953      	cbnz	r3, 8020204 <__aeabi_uldivmod+0x18>
 80201ee:	b94a      	cbnz	r2, 8020204 <__aeabi_uldivmod+0x18>
 80201f0:	2900      	cmp	r1, #0
 80201f2:	bf08      	it	eq
 80201f4:	2800      	cmpeq	r0, #0
 80201f6:	bf1c      	itt	ne
 80201f8:	f04f 31ff 	movne.w	r1, #4294967295
 80201fc:	f04f 30ff 	movne.w	r0, #4294967295
 8020200:	f000 b96a 	b.w	80204d8 <__aeabi_idiv0>
 8020204:	f1ad 0c08 	sub.w	ip, sp, #8
 8020208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 802020c:	f000 f806 	bl	802021c <__udivmoddi4>
 8020210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8020214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8020218:	b004      	add	sp, #16
 802021a:	4770      	bx	lr

0802021c <__udivmoddi4>:
 802021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020220:	9d08      	ldr	r5, [sp, #32]
 8020222:	460c      	mov	r4, r1
 8020224:	2b00      	cmp	r3, #0
 8020226:	d14e      	bne.n	80202c6 <__udivmoddi4+0xaa>
 8020228:	4694      	mov	ip, r2
 802022a:	458c      	cmp	ip, r1
 802022c:	4686      	mov	lr, r0
 802022e:	fab2 f282 	clz	r2, r2
 8020232:	d962      	bls.n	80202fa <__udivmoddi4+0xde>
 8020234:	b14a      	cbz	r2, 802024a <__udivmoddi4+0x2e>
 8020236:	f1c2 0320 	rsb	r3, r2, #32
 802023a:	4091      	lsls	r1, r2
 802023c:	fa20 f303 	lsr.w	r3, r0, r3
 8020240:	fa0c fc02 	lsl.w	ip, ip, r2
 8020244:	4319      	orrs	r1, r3
 8020246:	fa00 fe02 	lsl.w	lr, r0, r2
 802024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 802024e:	fa1f f68c 	uxth.w	r6, ip
 8020252:	fbb1 f4f7 	udiv	r4, r1, r7
 8020256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 802025a:	fb07 1114 	mls	r1, r7, r4, r1
 802025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8020262:	fb04 f106 	mul.w	r1, r4, r6
 8020266:	4299      	cmp	r1, r3
 8020268:	d90a      	bls.n	8020280 <__udivmoddi4+0x64>
 802026a:	eb1c 0303 	adds.w	r3, ip, r3
 802026e:	f104 30ff 	add.w	r0, r4, #4294967295
 8020272:	f080 8112 	bcs.w	802049a <__udivmoddi4+0x27e>
 8020276:	4299      	cmp	r1, r3
 8020278:	f240 810f 	bls.w	802049a <__udivmoddi4+0x27e>
 802027c:	3c02      	subs	r4, #2
 802027e:	4463      	add	r3, ip
 8020280:	1a59      	subs	r1, r3, r1
 8020282:	fa1f f38e 	uxth.w	r3, lr
 8020286:	fbb1 f0f7 	udiv	r0, r1, r7
 802028a:	fb07 1110 	mls	r1, r7, r0, r1
 802028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8020292:	fb00 f606 	mul.w	r6, r0, r6
 8020296:	429e      	cmp	r6, r3
 8020298:	d90a      	bls.n	80202b0 <__udivmoddi4+0x94>
 802029a:	eb1c 0303 	adds.w	r3, ip, r3
 802029e:	f100 31ff 	add.w	r1, r0, #4294967295
 80202a2:	f080 80fc 	bcs.w	802049e <__udivmoddi4+0x282>
 80202a6:	429e      	cmp	r6, r3
 80202a8:	f240 80f9 	bls.w	802049e <__udivmoddi4+0x282>
 80202ac:	4463      	add	r3, ip
 80202ae:	3802      	subs	r0, #2
 80202b0:	1b9b      	subs	r3, r3, r6
 80202b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80202b6:	2100      	movs	r1, #0
 80202b8:	b11d      	cbz	r5, 80202c2 <__udivmoddi4+0xa6>
 80202ba:	40d3      	lsrs	r3, r2
 80202bc:	2200      	movs	r2, #0
 80202be:	e9c5 3200 	strd	r3, r2, [r5]
 80202c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80202c6:	428b      	cmp	r3, r1
 80202c8:	d905      	bls.n	80202d6 <__udivmoddi4+0xba>
 80202ca:	b10d      	cbz	r5, 80202d0 <__udivmoddi4+0xb4>
 80202cc:	e9c5 0100 	strd	r0, r1, [r5]
 80202d0:	2100      	movs	r1, #0
 80202d2:	4608      	mov	r0, r1
 80202d4:	e7f5      	b.n	80202c2 <__udivmoddi4+0xa6>
 80202d6:	fab3 f183 	clz	r1, r3
 80202da:	2900      	cmp	r1, #0
 80202dc:	d146      	bne.n	802036c <__udivmoddi4+0x150>
 80202de:	42a3      	cmp	r3, r4
 80202e0:	d302      	bcc.n	80202e8 <__udivmoddi4+0xcc>
 80202e2:	4290      	cmp	r0, r2
 80202e4:	f0c0 80f0 	bcc.w	80204c8 <__udivmoddi4+0x2ac>
 80202e8:	1a86      	subs	r6, r0, r2
 80202ea:	eb64 0303 	sbc.w	r3, r4, r3
 80202ee:	2001      	movs	r0, #1
 80202f0:	2d00      	cmp	r5, #0
 80202f2:	d0e6      	beq.n	80202c2 <__udivmoddi4+0xa6>
 80202f4:	e9c5 6300 	strd	r6, r3, [r5]
 80202f8:	e7e3      	b.n	80202c2 <__udivmoddi4+0xa6>
 80202fa:	2a00      	cmp	r2, #0
 80202fc:	f040 8090 	bne.w	8020420 <__udivmoddi4+0x204>
 8020300:	eba1 040c 	sub.w	r4, r1, ip
 8020304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8020308:	fa1f f78c 	uxth.w	r7, ip
 802030c:	2101      	movs	r1, #1
 802030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8020312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8020316:	fb08 4416 	mls	r4, r8, r6, r4
 802031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 802031e:	fb07 f006 	mul.w	r0, r7, r6
 8020322:	4298      	cmp	r0, r3
 8020324:	d908      	bls.n	8020338 <__udivmoddi4+0x11c>
 8020326:	eb1c 0303 	adds.w	r3, ip, r3
 802032a:	f106 34ff 	add.w	r4, r6, #4294967295
 802032e:	d202      	bcs.n	8020336 <__udivmoddi4+0x11a>
 8020330:	4298      	cmp	r0, r3
 8020332:	f200 80cd 	bhi.w	80204d0 <__udivmoddi4+0x2b4>
 8020336:	4626      	mov	r6, r4
 8020338:	1a1c      	subs	r4, r3, r0
 802033a:	fa1f f38e 	uxth.w	r3, lr
 802033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8020342:	fb08 4410 	mls	r4, r8, r0, r4
 8020346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 802034a:	fb00 f707 	mul.w	r7, r0, r7
 802034e:	429f      	cmp	r7, r3
 8020350:	d908      	bls.n	8020364 <__udivmoddi4+0x148>
 8020352:	eb1c 0303 	adds.w	r3, ip, r3
 8020356:	f100 34ff 	add.w	r4, r0, #4294967295
 802035a:	d202      	bcs.n	8020362 <__udivmoddi4+0x146>
 802035c:	429f      	cmp	r7, r3
 802035e:	f200 80b0 	bhi.w	80204c2 <__udivmoddi4+0x2a6>
 8020362:	4620      	mov	r0, r4
 8020364:	1bdb      	subs	r3, r3, r7
 8020366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 802036a:	e7a5      	b.n	80202b8 <__udivmoddi4+0x9c>
 802036c:	f1c1 0620 	rsb	r6, r1, #32
 8020370:	408b      	lsls	r3, r1
 8020372:	fa22 f706 	lsr.w	r7, r2, r6
 8020376:	431f      	orrs	r7, r3
 8020378:	fa20 fc06 	lsr.w	ip, r0, r6
 802037c:	fa04 f301 	lsl.w	r3, r4, r1
 8020380:	ea43 030c 	orr.w	r3, r3, ip
 8020384:	40f4      	lsrs	r4, r6
 8020386:	fa00 f801 	lsl.w	r8, r0, r1
 802038a:	0c38      	lsrs	r0, r7, #16
 802038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8020390:	fbb4 fef0 	udiv	lr, r4, r0
 8020394:	fa1f fc87 	uxth.w	ip, r7
 8020398:	fb00 441e 	mls	r4, r0, lr, r4
 802039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80203a0:	fb0e f90c 	mul.w	r9, lr, ip
 80203a4:	45a1      	cmp	r9, r4
 80203a6:	fa02 f201 	lsl.w	r2, r2, r1
 80203aa:	d90a      	bls.n	80203c2 <__udivmoddi4+0x1a6>
 80203ac:	193c      	adds	r4, r7, r4
 80203ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80203b2:	f080 8084 	bcs.w	80204be <__udivmoddi4+0x2a2>
 80203b6:	45a1      	cmp	r9, r4
 80203b8:	f240 8081 	bls.w	80204be <__udivmoddi4+0x2a2>
 80203bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80203c0:	443c      	add	r4, r7
 80203c2:	eba4 0409 	sub.w	r4, r4, r9
 80203c6:	fa1f f983 	uxth.w	r9, r3
 80203ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80203ce:	fb00 4413 	mls	r4, r0, r3, r4
 80203d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80203d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80203da:	45a4      	cmp	ip, r4
 80203dc:	d907      	bls.n	80203ee <__udivmoddi4+0x1d2>
 80203de:	193c      	adds	r4, r7, r4
 80203e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80203e4:	d267      	bcs.n	80204b6 <__udivmoddi4+0x29a>
 80203e6:	45a4      	cmp	ip, r4
 80203e8:	d965      	bls.n	80204b6 <__udivmoddi4+0x29a>
 80203ea:	3b02      	subs	r3, #2
 80203ec:	443c      	add	r4, r7
 80203ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80203f2:	fba0 9302 	umull	r9, r3, r0, r2
 80203f6:	eba4 040c 	sub.w	r4, r4, ip
 80203fa:	429c      	cmp	r4, r3
 80203fc:	46ce      	mov	lr, r9
 80203fe:	469c      	mov	ip, r3
 8020400:	d351      	bcc.n	80204a6 <__udivmoddi4+0x28a>
 8020402:	d04e      	beq.n	80204a2 <__udivmoddi4+0x286>
 8020404:	b155      	cbz	r5, 802041c <__udivmoddi4+0x200>
 8020406:	ebb8 030e 	subs.w	r3, r8, lr
 802040a:	eb64 040c 	sbc.w	r4, r4, ip
 802040e:	fa04 f606 	lsl.w	r6, r4, r6
 8020412:	40cb      	lsrs	r3, r1
 8020414:	431e      	orrs	r6, r3
 8020416:	40cc      	lsrs	r4, r1
 8020418:	e9c5 6400 	strd	r6, r4, [r5]
 802041c:	2100      	movs	r1, #0
 802041e:	e750      	b.n	80202c2 <__udivmoddi4+0xa6>
 8020420:	f1c2 0320 	rsb	r3, r2, #32
 8020424:	fa20 f103 	lsr.w	r1, r0, r3
 8020428:	fa0c fc02 	lsl.w	ip, ip, r2
 802042c:	fa24 f303 	lsr.w	r3, r4, r3
 8020430:	4094      	lsls	r4, r2
 8020432:	430c      	orrs	r4, r1
 8020434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8020438:	fa00 fe02 	lsl.w	lr, r0, r2
 802043c:	fa1f f78c 	uxth.w	r7, ip
 8020440:	fbb3 f0f8 	udiv	r0, r3, r8
 8020444:	fb08 3110 	mls	r1, r8, r0, r3
 8020448:	0c23      	lsrs	r3, r4, #16
 802044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 802044e:	fb00 f107 	mul.w	r1, r0, r7
 8020452:	4299      	cmp	r1, r3
 8020454:	d908      	bls.n	8020468 <__udivmoddi4+0x24c>
 8020456:	eb1c 0303 	adds.w	r3, ip, r3
 802045a:	f100 36ff 	add.w	r6, r0, #4294967295
 802045e:	d22c      	bcs.n	80204ba <__udivmoddi4+0x29e>
 8020460:	4299      	cmp	r1, r3
 8020462:	d92a      	bls.n	80204ba <__udivmoddi4+0x29e>
 8020464:	3802      	subs	r0, #2
 8020466:	4463      	add	r3, ip
 8020468:	1a5b      	subs	r3, r3, r1
 802046a:	b2a4      	uxth	r4, r4
 802046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8020470:	fb08 3311 	mls	r3, r8, r1, r3
 8020474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8020478:	fb01 f307 	mul.w	r3, r1, r7
 802047c:	42a3      	cmp	r3, r4
 802047e:	d908      	bls.n	8020492 <__udivmoddi4+0x276>
 8020480:	eb1c 0404 	adds.w	r4, ip, r4
 8020484:	f101 36ff 	add.w	r6, r1, #4294967295
 8020488:	d213      	bcs.n	80204b2 <__udivmoddi4+0x296>
 802048a:	42a3      	cmp	r3, r4
 802048c:	d911      	bls.n	80204b2 <__udivmoddi4+0x296>
 802048e:	3902      	subs	r1, #2
 8020490:	4464      	add	r4, ip
 8020492:	1ae4      	subs	r4, r4, r3
 8020494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8020498:	e739      	b.n	802030e <__udivmoddi4+0xf2>
 802049a:	4604      	mov	r4, r0
 802049c:	e6f0      	b.n	8020280 <__udivmoddi4+0x64>
 802049e:	4608      	mov	r0, r1
 80204a0:	e706      	b.n	80202b0 <__udivmoddi4+0x94>
 80204a2:	45c8      	cmp	r8, r9
 80204a4:	d2ae      	bcs.n	8020404 <__udivmoddi4+0x1e8>
 80204a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80204aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80204ae:	3801      	subs	r0, #1
 80204b0:	e7a8      	b.n	8020404 <__udivmoddi4+0x1e8>
 80204b2:	4631      	mov	r1, r6
 80204b4:	e7ed      	b.n	8020492 <__udivmoddi4+0x276>
 80204b6:	4603      	mov	r3, r0
 80204b8:	e799      	b.n	80203ee <__udivmoddi4+0x1d2>
 80204ba:	4630      	mov	r0, r6
 80204bc:	e7d4      	b.n	8020468 <__udivmoddi4+0x24c>
 80204be:	46d6      	mov	lr, sl
 80204c0:	e77f      	b.n	80203c2 <__udivmoddi4+0x1a6>
 80204c2:	4463      	add	r3, ip
 80204c4:	3802      	subs	r0, #2
 80204c6:	e74d      	b.n	8020364 <__udivmoddi4+0x148>
 80204c8:	4606      	mov	r6, r0
 80204ca:	4623      	mov	r3, r4
 80204cc:	4608      	mov	r0, r1
 80204ce:	e70f      	b.n	80202f0 <__udivmoddi4+0xd4>
 80204d0:	3e02      	subs	r6, #2
 80204d2:	4463      	add	r3, ip
 80204d4:	e730      	b.n	8020338 <__udivmoddi4+0x11c>
 80204d6:	bf00      	nop

080204d8 <__aeabi_idiv0>:
 80204d8:	4770      	bx	lr
 80204da:	bf00      	nop

080204dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80204dc:	b580      	push	{r7, lr}
 80204de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80204e0:	f000 fa64 	bl	80209ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80204e4:	f000 f820 	bl	8020528 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80204e8:	f000 f8b2 	bl	8020650 <MX_GPIO_Init>
//  MX_ETH_Init();
  MX_USART3_UART_Init();
 80204ec:	f000 f886 	bl	80205fc <MX_USART3_UART_Init>
//  MX_USB_OTG_FS_PCD_Init();
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, SET);
 80204f0:	2201      	movs	r2, #1
 80204f2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80204f6:	480a      	ldr	r0, [pc, #40]	@ (8020520 <main+0x44>)
 80204f8:	f000 fd48 	bl	8020f8c <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if(TickTim > 500)
 80204fc:	4b09      	ldr	r3, [pc, #36]	@ (8020524 <main+0x48>)
 80204fe:	681b      	ldr	r3, [r3, #0]
 8020500:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8020504:	d9fa      	bls.n	80204fc <main+0x20>
	  {
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8020506:	2180      	movs	r1, #128	@ 0x80
 8020508:	4805      	ldr	r0, [pc, #20]	@ (8020520 <main+0x44>)
 802050a:	f000 fd58 	bl	8020fbe <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 802050e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8020512:	4803      	ldr	r0, [pc, #12]	@ (8020520 <main+0x44>)
 8020514:	f000 fd53 	bl	8020fbe <HAL_GPIO_TogglePin>
		  TickTim = 0;
 8020518:	4b02      	ldr	r3, [pc, #8]	@ (8020524 <main+0x48>)
 802051a:	2200      	movs	r2, #0
 802051c:	601a      	str	r2, [r3, #0]
	  if(TickTim > 500)
 802051e:	e7ed      	b.n	80204fc <main+0x20>
 8020520:	40020400 	.word	0x40020400
 8020524:	2000006c 	.word	0x2000006c

08020528 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8020528:	b580      	push	{r7, lr}
 802052a:	b094      	sub	sp, #80	@ 0x50
 802052c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 802052e:	f107 0320 	add.w	r3, r7, #32
 8020532:	2230      	movs	r2, #48	@ 0x30
 8020534:	2100      	movs	r1, #0
 8020536:	4618      	mov	r0, r3
 8020538:	f001 fcb6 	bl	8021ea8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 802053c:	f107 030c 	add.w	r3, r7, #12
 8020540:	2200      	movs	r2, #0
 8020542:	601a      	str	r2, [r3, #0]
 8020544:	605a      	str	r2, [r3, #4]
 8020546:	609a      	str	r2, [r3, #8]
 8020548:	60da      	str	r2, [r3, #12]
 802054a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 802054c:	2300      	movs	r3, #0
 802054e:	60bb      	str	r3, [r7, #8]
 8020550:	4b28      	ldr	r3, [pc, #160]	@ (80205f4 <SystemClock_Config+0xcc>)
 8020552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8020554:	4a27      	ldr	r2, [pc, #156]	@ (80205f4 <SystemClock_Config+0xcc>)
 8020556:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 802055a:	6413      	str	r3, [r2, #64]	@ 0x40
 802055c:	4b25      	ldr	r3, [pc, #148]	@ (80205f4 <SystemClock_Config+0xcc>)
 802055e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8020560:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8020564:	60bb      	str	r3, [r7, #8]
 8020566:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8020568:	2300      	movs	r3, #0
 802056a:	607b      	str	r3, [r7, #4]
 802056c:	4b22      	ldr	r3, [pc, #136]	@ (80205f8 <SystemClock_Config+0xd0>)
 802056e:	681b      	ldr	r3, [r3, #0]
 8020570:	4a21      	ldr	r2, [pc, #132]	@ (80205f8 <SystemClock_Config+0xd0>)
 8020572:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8020576:	6013      	str	r3, [r2, #0]
 8020578:	4b1f      	ldr	r3, [pc, #124]	@ (80205f8 <SystemClock_Config+0xd0>)
 802057a:	681b      	ldr	r3, [r3, #0]
 802057c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8020580:	607b      	str	r3, [r7, #4]
 8020582:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8020584:	2301      	movs	r3, #1
 8020586:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8020588:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 802058c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 802058e:	2302      	movs	r3, #2
 8020590:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8020592:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8020596:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8020598:	2304      	movs	r3, #4
 802059a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 802059c:	23a8      	movs	r3, #168	@ 0xa8
 802059e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80205a0:	2302      	movs	r3, #2
 80205a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80205a4:	2307      	movs	r3, #7
 80205a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80205a8:	f107 0320 	add.w	r3, r7, #32
 80205ac:	4618      	mov	r0, r3
 80205ae:	f000 fd21 	bl	8020ff4 <HAL_RCC_OscConfig>
 80205b2:	4603      	mov	r3, r0
 80205b4:	2b00      	cmp	r3, #0
 80205b6:	d001      	beq.n	80205bc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80205b8:	f000 f912 	bl	80207e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80205bc:	230f      	movs	r3, #15
 80205be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80205c0:	2302      	movs	r3, #2
 80205c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80205c4:	2300      	movs	r3, #0
 80205c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80205c8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80205cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80205ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80205d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80205d4:	f107 030c 	add.w	r3, r7, #12
 80205d8:	2105      	movs	r1, #5
 80205da:	4618      	mov	r0, r3
 80205dc:	f000 ff82 	bl	80214e4 <HAL_RCC_ClockConfig>
 80205e0:	4603      	mov	r3, r0
 80205e2:	2b00      	cmp	r3, #0
 80205e4:	d001      	beq.n	80205ea <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80205e6:	f000 f8fb 	bl	80207e0 <Error_Handler>
  }
}
 80205ea:	bf00      	nop
 80205ec:	3750      	adds	r7, #80	@ 0x50
 80205ee:	46bd      	mov	sp, r7
 80205f0:	bd80      	pop	{r7, pc}
 80205f2:	bf00      	nop
 80205f4:	40023800 	.word	0x40023800
 80205f8:	40007000 	.word	0x40007000

080205fc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80205fc:	b580      	push	{r7, lr}
 80205fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8020600:	4b11      	ldr	r3, [pc, #68]	@ (8020648 <MX_USART3_UART_Init+0x4c>)
 8020602:	4a12      	ldr	r2, [pc, #72]	@ (802064c <MX_USART3_UART_Init+0x50>)
 8020604:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8020606:	4b10      	ldr	r3, [pc, #64]	@ (8020648 <MX_USART3_UART_Init+0x4c>)
 8020608:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 802060c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 802060e:	4b0e      	ldr	r3, [pc, #56]	@ (8020648 <MX_USART3_UART_Init+0x4c>)
 8020610:	2200      	movs	r2, #0
 8020612:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8020614:	4b0c      	ldr	r3, [pc, #48]	@ (8020648 <MX_USART3_UART_Init+0x4c>)
 8020616:	2200      	movs	r2, #0
 8020618:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 802061a:	4b0b      	ldr	r3, [pc, #44]	@ (8020648 <MX_USART3_UART_Init+0x4c>)
 802061c:	2200      	movs	r2, #0
 802061e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8020620:	4b09      	ldr	r3, [pc, #36]	@ (8020648 <MX_USART3_UART_Init+0x4c>)
 8020622:	220c      	movs	r2, #12
 8020624:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8020626:	4b08      	ldr	r3, [pc, #32]	@ (8020648 <MX_USART3_UART_Init+0x4c>)
 8020628:	2200      	movs	r2, #0
 802062a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 802062c:	4b06      	ldr	r3, [pc, #24]	@ (8020648 <MX_USART3_UART_Init+0x4c>)
 802062e:	2200      	movs	r2, #0
 8020630:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8020632:	4805      	ldr	r0, [pc, #20]	@ (8020648 <MX_USART3_UART_Init+0x4c>)
 8020634:	f001 f976 	bl	8021924 <HAL_UART_Init>
 8020638:	4603      	mov	r3, r0
 802063a:	2b00      	cmp	r3, #0
 802063c:	d001      	beq.n	8020642 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 802063e:	f000 f8cf 	bl	80207e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8020642:	bf00      	nop
 8020644:	bd80      	pop	{r7, pc}
 8020646:	bf00      	nop
 8020648:	20000028 	.word	0x20000028
 802064c:	40004800 	.word	0x40004800

08020650 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8020650:	b580      	push	{r7, lr}
 8020652:	b08c      	sub	sp, #48	@ 0x30
 8020654:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8020656:	f107 031c 	add.w	r3, r7, #28
 802065a:	2200      	movs	r2, #0
 802065c:	601a      	str	r2, [r3, #0]
 802065e:	605a      	str	r2, [r3, #4]
 8020660:	609a      	str	r2, [r3, #8]
 8020662:	60da      	str	r2, [r3, #12]
 8020664:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8020666:	2300      	movs	r3, #0
 8020668:	61bb      	str	r3, [r7, #24]
 802066a:	4b4c      	ldr	r3, [pc, #304]	@ (802079c <MX_GPIO_Init+0x14c>)
 802066c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802066e:	4a4b      	ldr	r2, [pc, #300]	@ (802079c <MX_GPIO_Init+0x14c>)
 8020670:	f043 0304 	orr.w	r3, r3, #4
 8020674:	6313      	str	r3, [r2, #48]	@ 0x30
 8020676:	4b49      	ldr	r3, [pc, #292]	@ (802079c <MX_GPIO_Init+0x14c>)
 8020678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802067a:	f003 0304 	and.w	r3, r3, #4
 802067e:	61bb      	str	r3, [r7, #24]
 8020680:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8020682:	2300      	movs	r3, #0
 8020684:	617b      	str	r3, [r7, #20]
 8020686:	4b45      	ldr	r3, [pc, #276]	@ (802079c <MX_GPIO_Init+0x14c>)
 8020688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802068a:	4a44      	ldr	r2, [pc, #272]	@ (802079c <MX_GPIO_Init+0x14c>)
 802068c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8020690:	6313      	str	r3, [r2, #48]	@ 0x30
 8020692:	4b42      	ldr	r3, [pc, #264]	@ (802079c <MX_GPIO_Init+0x14c>)
 8020694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8020696:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 802069a:	617b      	str	r3, [r7, #20]
 802069c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 802069e:	2300      	movs	r3, #0
 80206a0:	613b      	str	r3, [r7, #16]
 80206a2:	4b3e      	ldr	r3, [pc, #248]	@ (802079c <MX_GPIO_Init+0x14c>)
 80206a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80206a6:	4a3d      	ldr	r2, [pc, #244]	@ (802079c <MX_GPIO_Init+0x14c>)
 80206a8:	f043 0301 	orr.w	r3, r3, #1
 80206ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80206ae:	4b3b      	ldr	r3, [pc, #236]	@ (802079c <MX_GPIO_Init+0x14c>)
 80206b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80206b2:	f003 0301 	and.w	r3, r3, #1
 80206b6:	613b      	str	r3, [r7, #16]
 80206b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80206ba:	2300      	movs	r3, #0
 80206bc:	60fb      	str	r3, [r7, #12]
 80206be:	4b37      	ldr	r3, [pc, #220]	@ (802079c <MX_GPIO_Init+0x14c>)
 80206c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80206c2:	4a36      	ldr	r2, [pc, #216]	@ (802079c <MX_GPIO_Init+0x14c>)
 80206c4:	f043 0302 	orr.w	r3, r3, #2
 80206c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80206ca:	4b34      	ldr	r3, [pc, #208]	@ (802079c <MX_GPIO_Init+0x14c>)
 80206cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80206ce:	f003 0302 	and.w	r3, r3, #2
 80206d2:	60fb      	str	r3, [r7, #12]
 80206d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80206d6:	2300      	movs	r3, #0
 80206d8:	60bb      	str	r3, [r7, #8]
 80206da:	4b30      	ldr	r3, [pc, #192]	@ (802079c <MX_GPIO_Init+0x14c>)
 80206dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80206de:	4a2f      	ldr	r2, [pc, #188]	@ (802079c <MX_GPIO_Init+0x14c>)
 80206e0:	f043 0308 	orr.w	r3, r3, #8
 80206e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80206e6:	4b2d      	ldr	r3, [pc, #180]	@ (802079c <MX_GPIO_Init+0x14c>)
 80206e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80206ea:	f003 0308 	and.w	r3, r3, #8
 80206ee:	60bb      	str	r3, [r7, #8]
 80206f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80206f2:	2300      	movs	r3, #0
 80206f4:	607b      	str	r3, [r7, #4]
 80206f6:	4b29      	ldr	r3, [pc, #164]	@ (802079c <MX_GPIO_Init+0x14c>)
 80206f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80206fa:	4a28      	ldr	r2, [pc, #160]	@ (802079c <MX_GPIO_Init+0x14c>)
 80206fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8020700:	6313      	str	r3, [r2, #48]	@ 0x30
 8020702:	4b26      	ldr	r3, [pc, #152]	@ (802079c <MX_GPIO_Init+0x14c>)
 8020704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8020706:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 802070a:	607b      	str	r3, [r7, #4]
 802070c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 802070e:	2200      	movs	r2, #0
 8020710:	f244 0181 	movw	r1, #16513	@ 0x4081
 8020714:	4822      	ldr	r0, [pc, #136]	@ (80207a0 <MX_GPIO_Init+0x150>)
 8020716:	f000 fc39 	bl	8020f8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 802071a:	2200      	movs	r2, #0
 802071c:	2140      	movs	r1, #64	@ 0x40
 802071e:	4821      	ldr	r0, [pc, #132]	@ (80207a4 <MX_GPIO_Init+0x154>)
 8020720:	f000 fc34 	bl	8020f8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8020724:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8020728:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 802072a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 802072e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020730:	2300      	movs	r3, #0
 8020732:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8020734:	f107 031c 	add.w	r3, r7, #28
 8020738:	4619      	mov	r1, r3
 802073a:	481b      	ldr	r0, [pc, #108]	@ (80207a8 <MX_GPIO_Init+0x158>)
 802073c:	f000 fa7a 	bl	8020c34 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8020740:	f244 0381 	movw	r3, #16513	@ 0x4081
 8020744:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8020746:	2301      	movs	r3, #1
 8020748:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 802074a:	2300      	movs	r3, #0
 802074c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802074e:	2300      	movs	r3, #0
 8020750:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8020752:	f107 031c 	add.w	r3, r7, #28
 8020756:	4619      	mov	r1, r3
 8020758:	4811      	ldr	r0, [pc, #68]	@ (80207a0 <MX_GPIO_Init+0x150>)
 802075a:	f000 fa6b 	bl	8020c34 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 802075e:	2340      	movs	r3, #64	@ 0x40
 8020760:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8020762:	2301      	movs	r3, #1
 8020764:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020766:	2300      	movs	r3, #0
 8020768:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802076a:	2300      	movs	r3, #0
 802076c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 802076e:	f107 031c 	add.w	r3, r7, #28
 8020772:	4619      	mov	r1, r3
 8020774:	480b      	ldr	r0, [pc, #44]	@ (80207a4 <MX_GPIO_Init+0x154>)
 8020776:	f000 fa5d 	bl	8020c34 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 802077a:	2380      	movs	r3, #128	@ 0x80
 802077c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 802077e:	2300      	movs	r3, #0
 8020780:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020782:	2300      	movs	r3, #0
 8020784:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8020786:	f107 031c 	add.w	r3, r7, #28
 802078a:	4619      	mov	r1, r3
 802078c:	4805      	ldr	r0, [pc, #20]	@ (80207a4 <MX_GPIO_Init+0x154>)
 802078e:	f000 fa51 	bl	8020c34 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8020792:	bf00      	nop
 8020794:	3730      	adds	r7, #48	@ 0x30
 8020796:	46bd      	mov	sp, r7
 8020798:	bd80      	pop	{r7, pc}
 802079a:	bf00      	nop
 802079c:	40023800 	.word	0x40023800
 80207a0:	40020400 	.word	0x40020400
 80207a4:	40021800 	.word	0x40021800
 80207a8:	40020800 	.word	0x40020800

080207ac <HAL_IncTick>:

/* USER CODE BEGIN 4 */
void HAL_IncTick(void)
{
 80207ac:	b480      	push	{r7}
 80207ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80207b0:	4b08      	ldr	r3, [pc, #32]	@ (80207d4 <HAL_IncTick+0x28>)
 80207b2:	781b      	ldrb	r3, [r3, #0]
 80207b4:	461a      	mov	r2, r3
 80207b6:	4b08      	ldr	r3, [pc, #32]	@ (80207d8 <HAL_IncTick+0x2c>)
 80207b8:	681b      	ldr	r3, [r3, #0]
 80207ba:	4413      	add	r3, r2
 80207bc:	4a06      	ldr	r2, [pc, #24]	@ (80207d8 <HAL_IncTick+0x2c>)
 80207be:	6013      	str	r3, [r2, #0]
  TickTim++;
 80207c0:	4b06      	ldr	r3, [pc, #24]	@ (80207dc <HAL_IncTick+0x30>)
 80207c2:	681b      	ldr	r3, [r3, #0]
 80207c4:	3301      	adds	r3, #1
 80207c6:	4a05      	ldr	r2, [pc, #20]	@ (80207dc <HAL_IncTick+0x30>)
 80207c8:	6013      	str	r3, [r2, #0]
}
 80207ca:	bf00      	nop
 80207cc:	46bd      	mov	sp, r7
 80207ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80207d2:	4770      	bx	lr
 80207d4:	20000008 	.word	0x20000008
 80207d8:	20000070 	.word	0x20000070
 80207dc:	2000006c 	.word	0x2000006c

080207e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80207e0:	b480      	push	{r7}
 80207e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80207e4:	b672      	cpsid	i
}
 80207e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80207e8:	bf00      	nop
 80207ea:	e7fd      	b.n	80207e8 <Error_Handler+0x8>

080207ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80207ec:	b480      	push	{r7}
 80207ee:	b083      	sub	sp, #12
 80207f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80207f2:	2300      	movs	r3, #0
 80207f4:	607b      	str	r3, [r7, #4]
 80207f6:	4b10      	ldr	r3, [pc, #64]	@ (8020838 <HAL_MspInit+0x4c>)
 80207f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80207fa:	4a0f      	ldr	r2, [pc, #60]	@ (8020838 <HAL_MspInit+0x4c>)
 80207fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8020800:	6453      	str	r3, [r2, #68]	@ 0x44
 8020802:	4b0d      	ldr	r3, [pc, #52]	@ (8020838 <HAL_MspInit+0x4c>)
 8020804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8020806:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 802080a:	607b      	str	r3, [r7, #4]
 802080c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 802080e:	2300      	movs	r3, #0
 8020810:	603b      	str	r3, [r7, #0]
 8020812:	4b09      	ldr	r3, [pc, #36]	@ (8020838 <HAL_MspInit+0x4c>)
 8020814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8020816:	4a08      	ldr	r2, [pc, #32]	@ (8020838 <HAL_MspInit+0x4c>)
 8020818:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 802081c:	6413      	str	r3, [r2, #64]	@ 0x40
 802081e:	4b06      	ldr	r3, [pc, #24]	@ (8020838 <HAL_MspInit+0x4c>)
 8020820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8020822:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8020826:	603b      	str	r3, [r7, #0]
 8020828:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 802082a:	bf00      	nop
 802082c:	370c      	adds	r7, #12
 802082e:	46bd      	mov	sp, r7
 8020830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020834:	4770      	bx	lr
 8020836:	bf00      	nop
 8020838:	40023800 	.word	0x40023800

0802083c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 802083c:	b580      	push	{r7, lr}
 802083e:	b08a      	sub	sp, #40	@ 0x28
 8020840:	af00      	add	r7, sp, #0
 8020842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8020844:	f107 0314 	add.w	r3, r7, #20
 8020848:	2200      	movs	r2, #0
 802084a:	601a      	str	r2, [r3, #0]
 802084c:	605a      	str	r2, [r3, #4]
 802084e:	609a      	str	r2, [r3, #8]
 8020850:	60da      	str	r2, [r3, #12]
 8020852:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8020854:	687b      	ldr	r3, [r7, #4]
 8020856:	681b      	ldr	r3, [r3, #0]
 8020858:	4a19      	ldr	r2, [pc, #100]	@ (80208c0 <HAL_UART_MspInit+0x84>)
 802085a:	4293      	cmp	r3, r2
 802085c:	d12c      	bne.n	80208b8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 802085e:	2300      	movs	r3, #0
 8020860:	613b      	str	r3, [r7, #16]
 8020862:	4b18      	ldr	r3, [pc, #96]	@ (80208c4 <HAL_UART_MspInit+0x88>)
 8020864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8020866:	4a17      	ldr	r2, [pc, #92]	@ (80208c4 <HAL_UART_MspInit+0x88>)
 8020868:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 802086c:	6413      	str	r3, [r2, #64]	@ 0x40
 802086e:	4b15      	ldr	r3, [pc, #84]	@ (80208c4 <HAL_UART_MspInit+0x88>)
 8020870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8020872:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8020876:	613b      	str	r3, [r7, #16]
 8020878:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 802087a:	2300      	movs	r3, #0
 802087c:	60fb      	str	r3, [r7, #12]
 802087e:	4b11      	ldr	r3, [pc, #68]	@ (80208c4 <HAL_UART_MspInit+0x88>)
 8020880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8020882:	4a10      	ldr	r2, [pc, #64]	@ (80208c4 <HAL_UART_MspInit+0x88>)
 8020884:	f043 0308 	orr.w	r3, r3, #8
 8020888:	6313      	str	r3, [r2, #48]	@ 0x30
 802088a:	4b0e      	ldr	r3, [pc, #56]	@ (80208c4 <HAL_UART_MspInit+0x88>)
 802088c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802088e:	f003 0308 	and.w	r3, r3, #8
 8020892:	60fb      	str	r3, [r7, #12]
 8020894:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8020896:	f44f 7340 	mov.w	r3, #768	@ 0x300
 802089a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802089c:	2302      	movs	r3, #2
 802089e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80208a0:	2300      	movs	r3, #0
 80208a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80208a4:	2303      	movs	r3, #3
 80208a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80208a8:	2307      	movs	r3, #7
 80208aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80208ac:	f107 0314 	add.w	r3, r7, #20
 80208b0:	4619      	mov	r1, r3
 80208b2:	4805      	ldr	r0, [pc, #20]	@ (80208c8 <HAL_UART_MspInit+0x8c>)
 80208b4:	f000 f9be 	bl	8020c34 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80208b8:	bf00      	nop
 80208ba:	3728      	adds	r7, #40	@ 0x28
 80208bc:	46bd      	mov	sp, r7
 80208be:	bd80      	pop	{r7, pc}
 80208c0:	40004800 	.word	0x40004800
 80208c4:	40023800 	.word	0x40023800
 80208c8:	40020c00 	.word	0x40020c00

080208cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80208cc:	b480      	push	{r7}
 80208ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80208d0:	bf00      	nop
 80208d2:	e7fd      	b.n	80208d0 <NMI_Handler+0x4>

080208d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80208d4:	b480      	push	{r7}
 80208d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80208d8:	bf00      	nop
 80208da:	e7fd      	b.n	80208d8 <HardFault_Handler+0x4>

080208dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80208dc:	b480      	push	{r7}
 80208de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80208e0:	bf00      	nop
 80208e2:	e7fd      	b.n	80208e0 <MemManage_Handler+0x4>

080208e4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80208e4:	b480      	push	{r7}
 80208e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80208e8:	bf00      	nop
 80208ea:	e7fd      	b.n	80208e8 <BusFault_Handler+0x4>

080208ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80208ec:	b480      	push	{r7}
 80208ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80208f0:	bf00      	nop
 80208f2:	e7fd      	b.n	80208f0 <UsageFault_Handler+0x4>

080208f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80208f4:	b480      	push	{r7}
 80208f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80208f8:	bf00      	nop
 80208fa:	46bd      	mov	sp, r7
 80208fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020900:	4770      	bx	lr

08020902 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8020902:	b480      	push	{r7}
 8020904:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8020906:	bf00      	nop
 8020908:	46bd      	mov	sp, r7
 802090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802090e:	4770      	bx	lr

08020910 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8020910:	b480      	push	{r7}
 8020912:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8020914:	bf00      	nop
 8020916:	46bd      	mov	sp, r7
 8020918:	f85d 7b04 	ldr.w	r7, [sp], #4
 802091c:	4770      	bx	lr

0802091e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 802091e:	b580      	push	{r7, lr}
 8020920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8020922:	f7ff ff43 	bl	80207ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8020926:	bf00      	nop
 8020928:	bd80      	pop	{r7, pc}
	...

0802092c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 802092c:	b480      	push	{r7}
 802092e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8020930:	4b07      	ldr	r3, [pc, #28]	@ (8020950 <SystemInit+0x24>)
 8020932:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8020936:	4a06      	ldr	r2, [pc, #24]	@ (8020950 <SystemInit+0x24>)
 8020938:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 802093c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8020940:	4b03      	ldr	r3, [pc, #12]	@ (8020950 <SystemInit+0x24>)
 8020942:	4a04      	ldr	r2, [pc, #16]	@ (8020954 <SystemInit+0x28>)
 8020944:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8020946:	bf00      	nop
 8020948:	46bd      	mov	sp, r7
 802094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802094e:	4770      	bx	lr
 8020950:	e000ed00 	.word	0xe000ed00
 8020954:	08020000 	.word	0x08020000

08020958 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8020958:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8020990 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 802095c:	480d      	ldr	r0, [pc, #52]	@ (8020994 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 802095e:	490e      	ldr	r1, [pc, #56]	@ (8020998 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8020960:	4a0e      	ldr	r2, [pc, #56]	@ (802099c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8020962:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8020964:	e002      	b.n	802096c <LoopCopyDataInit>

08020966 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8020966:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8020968:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 802096a:	3304      	adds	r3, #4

0802096c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 802096c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 802096e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8020970:	d3f9      	bcc.n	8020966 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8020972:	4a0b      	ldr	r2, [pc, #44]	@ (80209a0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8020974:	4c0b      	ldr	r4, [pc, #44]	@ (80209a4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8020976:	2300      	movs	r3, #0
  b LoopFillZerobss
 8020978:	e001      	b.n	802097e <LoopFillZerobss>

0802097a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 802097a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 802097c:	3204      	adds	r2, #4

0802097e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 802097e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8020980:	d3fb      	bcc.n	802097a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8020982:	f7ff ffd3 	bl	802092c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8020986:	f001 fa97 	bl	8021eb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 802098a:	f7ff fda7 	bl	80204dc <main>
  bx  lr    
 802098e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8020990:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8020994:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8020998:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 802099c:	08021f40 	.word	0x08021f40
  ldr r2, =_sbss
 80209a0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80209a4:	20000074 	.word	0x20000074

080209a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80209a8:	e7fe      	b.n	80209a8 <ADC_IRQHandler>
	...

080209ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80209ac:	b580      	push	{r7, lr}
 80209ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80209b0:	4b0e      	ldr	r3, [pc, #56]	@ (80209ec <HAL_Init+0x40>)
 80209b2:	681b      	ldr	r3, [r3, #0]
 80209b4:	4a0d      	ldr	r2, [pc, #52]	@ (80209ec <HAL_Init+0x40>)
 80209b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80209ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80209bc:	4b0b      	ldr	r3, [pc, #44]	@ (80209ec <HAL_Init+0x40>)
 80209be:	681b      	ldr	r3, [r3, #0]
 80209c0:	4a0a      	ldr	r2, [pc, #40]	@ (80209ec <HAL_Init+0x40>)
 80209c2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80209c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80209c8:	4b08      	ldr	r3, [pc, #32]	@ (80209ec <HAL_Init+0x40>)
 80209ca:	681b      	ldr	r3, [r3, #0]
 80209cc:	4a07      	ldr	r2, [pc, #28]	@ (80209ec <HAL_Init+0x40>)
 80209ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80209d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80209d4:	2003      	movs	r0, #3
 80209d6:	f000 f8f9 	bl	8020bcc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80209da:	2000      	movs	r0, #0
 80209dc:	f000 f808 	bl	80209f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80209e0:	f7ff ff04 	bl	80207ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80209e4:	2300      	movs	r3, #0
}
 80209e6:	4618      	mov	r0, r3
 80209e8:	bd80      	pop	{r7, pc}
 80209ea:	bf00      	nop
 80209ec:	40023c00 	.word	0x40023c00

080209f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80209f0:	b580      	push	{r7, lr}
 80209f2:	b082      	sub	sp, #8
 80209f4:	af00      	add	r7, sp, #0
 80209f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80209f8:	4b12      	ldr	r3, [pc, #72]	@ (8020a44 <HAL_InitTick+0x54>)
 80209fa:	681a      	ldr	r2, [r3, #0]
 80209fc:	4b12      	ldr	r3, [pc, #72]	@ (8020a48 <HAL_InitTick+0x58>)
 80209fe:	781b      	ldrb	r3, [r3, #0]
 8020a00:	4619      	mov	r1, r3
 8020a02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8020a06:	fbb3 f3f1 	udiv	r3, r3, r1
 8020a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8020a0e:	4618      	mov	r0, r3
 8020a10:	f000 f903 	bl	8020c1a <HAL_SYSTICK_Config>
 8020a14:	4603      	mov	r3, r0
 8020a16:	2b00      	cmp	r3, #0
 8020a18:	d001      	beq.n	8020a1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8020a1a:	2301      	movs	r3, #1
 8020a1c:	e00e      	b.n	8020a3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8020a1e:	687b      	ldr	r3, [r7, #4]
 8020a20:	2b0f      	cmp	r3, #15
 8020a22:	d80a      	bhi.n	8020a3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8020a24:	2200      	movs	r2, #0
 8020a26:	6879      	ldr	r1, [r7, #4]
 8020a28:	f04f 30ff 	mov.w	r0, #4294967295
 8020a2c:	f000 f8d9 	bl	8020be2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8020a30:	4a06      	ldr	r2, [pc, #24]	@ (8020a4c <HAL_InitTick+0x5c>)
 8020a32:	687b      	ldr	r3, [r7, #4]
 8020a34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8020a36:	2300      	movs	r3, #0
 8020a38:	e000      	b.n	8020a3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8020a3a:	2301      	movs	r3, #1
}
 8020a3c:	4618      	mov	r0, r3
 8020a3e:	3708      	adds	r7, #8
 8020a40:	46bd      	mov	sp, r7
 8020a42:	bd80      	pop	{r7, pc}
 8020a44:	20000000 	.word	0x20000000
 8020a48:	20000008 	.word	0x20000008
 8020a4c:	20000004 	.word	0x20000004

08020a50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8020a50:	b480      	push	{r7}
 8020a52:	af00      	add	r7, sp, #0
  return uwTick;
 8020a54:	4b03      	ldr	r3, [pc, #12]	@ (8020a64 <HAL_GetTick+0x14>)
 8020a56:	681b      	ldr	r3, [r3, #0]
}
 8020a58:	4618      	mov	r0, r3
 8020a5a:	46bd      	mov	sp, r7
 8020a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020a60:	4770      	bx	lr
 8020a62:	bf00      	nop
 8020a64:	20000070 	.word	0x20000070

08020a68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8020a68:	b480      	push	{r7}
 8020a6a:	b085      	sub	sp, #20
 8020a6c:	af00      	add	r7, sp, #0
 8020a6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8020a70:	687b      	ldr	r3, [r7, #4]
 8020a72:	f003 0307 	and.w	r3, r3, #7
 8020a76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8020a78:	4b0c      	ldr	r3, [pc, #48]	@ (8020aac <__NVIC_SetPriorityGrouping+0x44>)
 8020a7a:	68db      	ldr	r3, [r3, #12]
 8020a7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8020a7e:	68ba      	ldr	r2, [r7, #8]
 8020a80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8020a84:	4013      	ands	r3, r2
 8020a86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8020a88:	68fb      	ldr	r3, [r7, #12]
 8020a8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8020a8c:	68bb      	ldr	r3, [r7, #8]
 8020a8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8020a90:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8020a94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8020a98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8020a9a:	4a04      	ldr	r2, [pc, #16]	@ (8020aac <__NVIC_SetPriorityGrouping+0x44>)
 8020a9c:	68bb      	ldr	r3, [r7, #8]
 8020a9e:	60d3      	str	r3, [r2, #12]
}
 8020aa0:	bf00      	nop
 8020aa2:	3714      	adds	r7, #20
 8020aa4:	46bd      	mov	sp, r7
 8020aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020aaa:	4770      	bx	lr
 8020aac:	e000ed00 	.word	0xe000ed00

08020ab0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8020ab0:	b480      	push	{r7}
 8020ab2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8020ab4:	4b04      	ldr	r3, [pc, #16]	@ (8020ac8 <__NVIC_GetPriorityGrouping+0x18>)
 8020ab6:	68db      	ldr	r3, [r3, #12]
 8020ab8:	0a1b      	lsrs	r3, r3, #8
 8020aba:	f003 0307 	and.w	r3, r3, #7
}
 8020abe:	4618      	mov	r0, r3
 8020ac0:	46bd      	mov	sp, r7
 8020ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ac6:	4770      	bx	lr
 8020ac8:	e000ed00 	.word	0xe000ed00

08020acc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8020acc:	b480      	push	{r7}
 8020ace:	b083      	sub	sp, #12
 8020ad0:	af00      	add	r7, sp, #0
 8020ad2:	4603      	mov	r3, r0
 8020ad4:	6039      	str	r1, [r7, #0]
 8020ad6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8020ad8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8020adc:	2b00      	cmp	r3, #0
 8020ade:	db0a      	blt.n	8020af6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8020ae0:	683b      	ldr	r3, [r7, #0]
 8020ae2:	b2da      	uxtb	r2, r3
 8020ae4:	490c      	ldr	r1, [pc, #48]	@ (8020b18 <__NVIC_SetPriority+0x4c>)
 8020ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8020aea:	0112      	lsls	r2, r2, #4
 8020aec:	b2d2      	uxtb	r2, r2
 8020aee:	440b      	add	r3, r1
 8020af0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8020af4:	e00a      	b.n	8020b0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8020af6:	683b      	ldr	r3, [r7, #0]
 8020af8:	b2da      	uxtb	r2, r3
 8020afa:	4908      	ldr	r1, [pc, #32]	@ (8020b1c <__NVIC_SetPriority+0x50>)
 8020afc:	79fb      	ldrb	r3, [r7, #7]
 8020afe:	f003 030f 	and.w	r3, r3, #15
 8020b02:	3b04      	subs	r3, #4
 8020b04:	0112      	lsls	r2, r2, #4
 8020b06:	b2d2      	uxtb	r2, r2
 8020b08:	440b      	add	r3, r1
 8020b0a:	761a      	strb	r2, [r3, #24]
}
 8020b0c:	bf00      	nop
 8020b0e:	370c      	adds	r7, #12
 8020b10:	46bd      	mov	sp, r7
 8020b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020b16:	4770      	bx	lr
 8020b18:	e000e100 	.word	0xe000e100
 8020b1c:	e000ed00 	.word	0xe000ed00

08020b20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8020b20:	b480      	push	{r7}
 8020b22:	b089      	sub	sp, #36	@ 0x24
 8020b24:	af00      	add	r7, sp, #0
 8020b26:	60f8      	str	r0, [r7, #12]
 8020b28:	60b9      	str	r1, [r7, #8]
 8020b2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8020b2c:	68fb      	ldr	r3, [r7, #12]
 8020b2e:	f003 0307 	and.w	r3, r3, #7
 8020b32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8020b34:	69fb      	ldr	r3, [r7, #28]
 8020b36:	f1c3 0307 	rsb	r3, r3, #7
 8020b3a:	2b04      	cmp	r3, #4
 8020b3c:	bf28      	it	cs
 8020b3e:	2304      	movcs	r3, #4
 8020b40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8020b42:	69fb      	ldr	r3, [r7, #28]
 8020b44:	3304      	adds	r3, #4
 8020b46:	2b06      	cmp	r3, #6
 8020b48:	d902      	bls.n	8020b50 <NVIC_EncodePriority+0x30>
 8020b4a:	69fb      	ldr	r3, [r7, #28]
 8020b4c:	3b03      	subs	r3, #3
 8020b4e:	e000      	b.n	8020b52 <NVIC_EncodePriority+0x32>
 8020b50:	2300      	movs	r3, #0
 8020b52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8020b54:	f04f 32ff 	mov.w	r2, #4294967295
 8020b58:	69bb      	ldr	r3, [r7, #24]
 8020b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8020b5e:	43da      	mvns	r2, r3
 8020b60:	68bb      	ldr	r3, [r7, #8]
 8020b62:	401a      	ands	r2, r3
 8020b64:	697b      	ldr	r3, [r7, #20]
 8020b66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8020b68:	f04f 31ff 	mov.w	r1, #4294967295
 8020b6c:	697b      	ldr	r3, [r7, #20]
 8020b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8020b72:	43d9      	mvns	r1, r3
 8020b74:	687b      	ldr	r3, [r7, #4]
 8020b76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8020b78:	4313      	orrs	r3, r2
         );
}
 8020b7a:	4618      	mov	r0, r3
 8020b7c:	3724      	adds	r7, #36	@ 0x24
 8020b7e:	46bd      	mov	sp, r7
 8020b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020b84:	4770      	bx	lr
	...

08020b88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8020b88:	b580      	push	{r7, lr}
 8020b8a:	b082      	sub	sp, #8
 8020b8c:	af00      	add	r7, sp, #0
 8020b8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8020b90:	687b      	ldr	r3, [r7, #4]
 8020b92:	3b01      	subs	r3, #1
 8020b94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8020b98:	d301      	bcc.n	8020b9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8020b9a:	2301      	movs	r3, #1
 8020b9c:	e00f      	b.n	8020bbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8020b9e:	4a0a      	ldr	r2, [pc, #40]	@ (8020bc8 <SysTick_Config+0x40>)
 8020ba0:	687b      	ldr	r3, [r7, #4]
 8020ba2:	3b01      	subs	r3, #1
 8020ba4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8020ba6:	210f      	movs	r1, #15
 8020ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8020bac:	f7ff ff8e 	bl	8020acc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8020bb0:	4b05      	ldr	r3, [pc, #20]	@ (8020bc8 <SysTick_Config+0x40>)
 8020bb2:	2200      	movs	r2, #0
 8020bb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8020bb6:	4b04      	ldr	r3, [pc, #16]	@ (8020bc8 <SysTick_Config+0x40>)
 8020bb8:	2207      	movs	r2, #7
 8020bba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8020bbc:	2300      	movs	r3, #0
}
 8020bbe:	4618      	mov	r0, r3
 8020bc0:	3708      	adds	r7, #8
 8020bc2:	46bd      	mov	sp, r7
 8020bc4:	bd80      	pop	{r7, pc}
 8020bc6:	bf00      	nop
 8020bc8:	e000e010 	.word	0xe000e010

08020bcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8020bcc:	b580      	push	{r7, lr}
 8020bce:	b082      	sub	sp, #8
 8020bd0:	af00      	add	r7, sp, #0
 8020bd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8020bd4:	6878      	ldr	r0, [r7, #4]
 8020bd6:	f7ff ff47 	bl	8020a68 <__NVIC_SetPriorityGrouping>
}
 8020bda:	bf00      	nop
 8020bdc:	3708      	adds	r7, #8
 8020bde:	46bd      	mov	sp, r7
 8020be0:	bd80      	pop	{r7, pc}

08020be2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8020be2:	b580      	push	{r7, lr}
 8020be4:	b086      	sub	sp, #24
 8020be6:	af00      	add	r7, sp, #0
 8020be8:	4603      	mov	r3, r0
 8020bea:	60b9      	str	r1, [r7, #8]
 8020bec:	607a      	str	r2, [r7, #4]
 8020bee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8020bf0:	2300      	movs	r3, #0
 8020bf2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8020bf4:	f7ff ff5c 	bl	8020ab0 <__NVIC_GetPriorityGrouping>
 8020bf8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8020bfa:	687a      	ldr	r2, [r7, #4]
 8020bfc:	68b9      	ldr	r1, [r7, #8]
 8020bfe:	6978      	ldr	r0, [r7, #20]
 8020c00:	f7ff ff8e 	bl	8020b20 <NVIC_EncodePriority>
 8020c04:	4602      	mov	r2, r0
 8020c06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8020c0a:	4611      	mov	r1, r2
 8020c0c:	4618      	mov	r0, r3
 8020c0e:	f7ff ff5d 	bl	8020acc <__NVIC_SetPriority>
}
 8020c12:	bf00      	nop
 8020c14:	3718      	adds	r7, #24
 8020c16:	46bd      	mov	sp, r7
 8020c18:	bd80      	pop	{r7, pc}

08020c1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8020c1a:	b580      	push	{r7, lr}
 8020c1c:	b082      	sub	sp, #8
 8020c1e:	af00      	add	r7, sp, #0
 8020c20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8020c22:	6878      	ldr	r0, [r7, #4]
 8020c24:	f7ff ffb0 	bl	8020b88 <SysTick_Config>
 8020c28:	4603      	mov	r3, r0
}
 8020c2a:	4618      	mov	r0, r3
 8020c2c:	3708      	adds	r7, #8
 8020c2e:	46bd      	mov	sp, r7
 8020c30:	bd80      	pop	{r7, pc}
	...

08020c34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8020c34:	b480      	push	{r7}
 8020c36:	b089      	sub	sp, #36	@ 0x24
 8020c38:	af00      	add	r7, sp, #0
 8020c3a:	6078      	str	r0, [r7, #4]
 8020c3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8020c3e:	2300      	movs	r3, #0
 8020c40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8020c42:	2300      	movs	r3, #0
 8020c44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8020c46:	2300      	movs	r3, #0
 8020c48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8020c4a:	2300      	movs	r3, #0
 8020c4c:	61fb      	str	r3, [r7, #28]
 8020c4e:	e177      	b.n	8020f40 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8020c50:	2201      	movs	r2, #1
 8020c52:	69fb      	ldr	r3, [r7, #28]
 8020c54:	fa02 f303 	lsl.w	r3, r2, r3
 8020c58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8020c5a:	683b      	ldr	r3, [r7, #0]
 8020c5c:	681b      	ldr	r3, [r3, #0]
 8020c5e:	697a      	ldr	r2, [r7, #20]
 8020c60:	4013      	ands	r3, r2
 8020c62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8020c64:	693a      	ldr	r2, [r7, #16]
 8020c66:	697b      	ldr	r3, [r7, #20]
 8020c68:	429a      	cmp	r2, r3
 8020c6a:	f040 8166 	bne.w	8020f3a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8020c6e:	683b      	ldr	r3, [r7, #0]
 8020c70:	685b      	ldr	r3, [r3, #4]
 8020c72:	f003 0303 	and.w	r3, r3, #3
 8020c76:	2b01      	cmp	r3, #1
 8020c78:	d005      	beq.n	8020c86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8020c7a:	683b      	ldr	r3, [r7, #0]
 8020c7c:	685b      	ldr	r3, [r3, #4]
 8020c7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8020c82:	2b02      	cmp	r3, #2
 8020c84:	d130      	bne.n	8020ce8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8020c86:	687b      	ldr	r3, [r7, #4]
 8020c88:	689b      	ldr	r3, [r3, #8]
 8020c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8020c8c:	69fb      	ldr	r3, [r7, #28]
 8020c8e:	005b      	lsls	r3, r3, #1
 8020c90:	2203      	movs	r2, #3
 8020c92:	fa02 f303 	lsl.w	r3, r2, r3
 8020c96:	43db      	mvns	r3, r3
 8020c98:	69ba      	ldr	r2, [r7, #24]
 8020c9a:	4013      	ands	r3, r2
 8020c9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8020c9e:	683b      	ldr	r3, [r7, #0]
 8020ca0:	68da      	ldr	r2, [r3, #12]
 8020ca2:	69fb      	ldr	r3, [r7, #28]
 8020ca4:	005b      	lsls	r3, r3, #1
 8020ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8020caa:	69ba      	ldr	r2, [r7, #24]
 8020cac:	4313      	orrs	r3, r2
 8020cae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8020cb0:	687b      	ldr	r3, [r7, #4]
 8020cb2:	69ba      	ldr	r2, [r7, #24]
 8020cb4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8020cb6:	687b      	ldr	r3, [r7, #4]
 8020cb8:	685b      	ldr	r3, [r3, #4]
 8020cba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8020cbc:	2201      	movs	r2, #1
 8020cbe:	69fb      	ldr	r3, [r7, #28]
 8020cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8020cc4:	43db      	mvns	r3, r3
 8020cc6:	69ba      	ldr	r2, [r7, #24]
 8020cc8:	4013      	ands	r3, r2
 8020cca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8020ccc:	683b      	ldr	r3, [r7, #0]
 8020cce:	685b      	ldr	r3, [r3, #4]
 8020cd0:	091b      	lsrs	r3, r3, #4
 8020cd2:	f003 0201 	and.w	r2, r3, #1
 8020cd6:	69fb      	ldr	r3, [r7, #28]
 8020cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8020cdc:	69ba      	ldr	r2, [r7, #24]
 8020cde:	4313      	orrs	r3, r2
 8020ce0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8020ce2:	687b      	ldr	r3, [r7, #4]
 8020ce4:	69ba      	ldr	r2, [r7, #24]
 8020ce6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8020ce8:	683b      	ldr	r3, [r7, #0]
 8020cea:	685b      	ldr	r3, [r3, #4]
 8020cec:	f003 0303 	and.w	r3, r3, #3
 8020cf0:	2b03      	cmp	r3, #3
 8020cf2:	d017      	beq.n	8020d24 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8020cf4:	687b      	ldr	r3, [r7, #4]
 8020cf6:	68db      	ldr	r3, [r3, #12]
 8020cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8020cfa:	69fb      	ldr	r3, [r7, #28]
 8020cfc:	005b      	lsls	r3, r3, #1
 8020cfe:	2203      	movs	r2, #3
 8020d00:	fa02 f303 	lsl.w	r3, r2, r3
 8020d04:	43db      	mvns	r3, r3
 8020d06:	69ba      	ldr	r2, [r7, #24]
 8020d08:	4013      	ands	r3, r2
 8020d0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8020d0c:	683b      	ldr	r3, [r7, #0]
 8020d0e:	689a      	ldr	r2, [r3, #8]
 8020d10:	69fb      	ldr	r3, [r7, #28]
 8020d12:	005b      	lsls	r3, r3, #1
 8020d14:	fa02 f303 	lsl.w	r3, r2, r3
 8020d18:	69ba      	ldr	r2, [r7, #24]
 8020d1a:	4313      	orrs	r3, r2
 8020d1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8020d1e:	687b      	ldr	r3, [r7, #4]
 8020d20:	69ba      	ldr	r2, [r7, #24]
 8020d22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8020d24:	683b      	ldr	r3, [r7, #0]
 8020d26:	685b      	ldr	r3, [r3, #4]
 8020d28:	f003 0303 	and.w	r3, r3, #3
 8020d2c:	2b02      	cmp	r3, #2
 8020d2e:	d123      	bne.n	8020d78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8020d30:	69fb      	ldr	r3, [r7, #28]
 8020d32:	08da      	lsrs	r2, r3, #3
 8020d34:	687b      	ldr	r3, [r7, #4]
 8020d36:	3208      	adds	r2, #8
 8020d38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8020d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8020d3e:	69fb      	ldr	r3, [r7, #28]
 8020d40:	f003 0307 	and.w	r3, r3, #7
 8020d44:	009b      	lsls	r3, r3, #2
 8020d46:	220f      	movs	r2, #15
 8020d48:	fa02 f303 	lsl.w	r3, r2, r3
 8020d4c:	43db      	mvns	r3, r3
 8020d4e:	69ba      	ldr	r2, [r7, #24]
 8020d50:	4013      	ands	r3, r2
 8020d52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8020d54:	683b      	ldr	r3, [r7, #0]
 8020d56:	691a      	ldr	r2, [r3, #16]
 8020d58:	69fb      	ldr	r3, [r7, #28]
 8020d5a:	f003 0307 	and.w	r3, r3, #7
 8020d5e:	009b      	lsls	r3, r3, #2
 8020d60:	fa02 f303 	lsl.w	r3, r2, r3
 8020d64:	69ba      	ldr	r2, [r7, #24]
 8020d66:	4313      	orrs	r3, r2
 8020d68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8020d6a:	69fb      	ldr	r3, [r7, #28]
 8020d6c:	08da      	lsrs	r2, r3, #3
 8020d6e:	687b      	ldr	r3, [r7, #4]
 8020d70:	3208      	adds	r2, #8
 8020d72:	69b9      	ldr	r1, [r7, #24]
 8020d74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8020d78:	687b      	ldr	r3, [r7, #4]
 8020d7a:	681b      	ldr	r3, [r3, #0]
 8020d7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8020d7e:	69fb      	ldr	r3, [r7, #28]
 8020d80:	005b      	lsls	r3, r3, #1
 8020d82:	2203      	movs	r2, #3
 8020d84:	fa02 f303 	lsl.w	r3, r2, r3
 8020d88:	43db      	mvns	r3, r3
 8020d8a:	69ba      	ldr	r2, [r7, #24]
 8020d8c:	4013      	ands	r3, r2
 8020d8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8020d90:	683b      	ldr	r3, [r7, #0]
 8020d92:	685b      	ldr	r3, [r3, #4]
 8020d94:	f003 0203 	and.w	r2, r3, #3
 8020d98:	69fb      	ldr	r3, [r7, #28]
 8020d9a:	005b      	lsls	r3, r3, #1
 8020d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8020da0:	69ba      	ldr	r2, [r7, #24]
 8020da2:	4313      	orrs	r3, r2
 8020da4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8020da6:	687b      	ldr	r3, [r7, #4]
 8020da8:	69ba      	ldr	r2, [r7, #24]
 8020daa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8020dac:	683b      	ldr	r3, [r7, #0]
 8020dae:	685b      	ldr	r3, [r3, #4]
 8020db0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8020db4:	2b00      	cmp	r3, #0
 8020db6:	f000 80c0 	beq.w	8020f3a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8020dba:	2300      	movs	r3, #0
 8020dbc:	60fb      	str	r3, [r7, #12]
 8020dbe:	4b66      	ldr	r3, [pc, #408]	@ (8020f58 <HAL_GPIO_Init+0x324>)
 8020dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8020dc2:	4a65      	ldr	r2, [pc, #404]	@ (8020f58 <HAL_GPIO_Init+0x324>)
 8020dc4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8020dc8:	6453      	str	r3, [r2, #68]	@ 0x44
 8020dca:	4b63      	ldr	r3, [pc, #396]	@ (8020f58 <HAL_GPIO_Init+0x324>)
 8020dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8020dce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8020dd2:	60fb      	str	r3, [r7, #12]
 8020dd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8020dd6:	4a61      	ldr	r2, [pc, #388]	@ (8020f5c <HAL_GPIO_Init+0x328>)
 8020dd8:	69fb      	ldr	r3, [r7, #28]
 8020dda:	089b      	lsrs	r3, r3, #2
 8020ddc:	3302      	adds	r3, #2
 8020dde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8020de2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8020de4:	69fb      	ldr	r3, [r7, #28]
 8020de6:	f003 0303 	and.w	r3, r3, #3
 8020dea:	009b      	lsls	r3, r3, #2
 8020dec:	220f      	movs	r2, #15
 8020dee:	fa02 f303 	lsl.w	r3, r2, r3
 8020df2:	43db      	mvns	r3, r3
 8020df4:	69ba      	ldr	r2, [r7, #24]
 8020df6:	4013      	ands	r3, r2
 8020df8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8020dfa:	687b      	ldr	r3, [r7, #4]
 8020dfc:	4a58      	ldr	r2, [pc, #352]	@ (8020f60 <HAL_GPIO_Init+0x32c>)
 8020dfe:	4293      	cmp	r3, r2
 8020e00:	d037      	beq.n	8020e72 <HAL_GPIO_Init+0x23e>
 8020e02:	687b      	ldr	r3, [r7, #4]
 8020e04:	4a57      	ldr	r2, [pc, #348]	@ (8020f64 <HAL_GPIO_Init+0x330>)
 8020e06:	4293      	cmp	r3, r2
 8020e08:	d031      	beq.n	8020e6e <HAL_GPIO_Init+0x23a>
 8020e0a:	687b      	ldr	r3, [r7, #4]
 8020e0c:	4a56      	ldr	r2, [pc, #344]	@ (8020f68 <HAL_GPIO_Init+0x334>)
 8020e0e:	4293      	cmp	r3, r2
 8020e10:	d02b      	beq.n	8020e6a <HAL_GPIO_Init+0x236>
 8020e12:	687b      	ldr	r3, [r7, #4]
 8020e14:	4a55      	ldr	r2, [pc, #340]	@ (8020f6c <HAL_GPIO_Init+0x338>)
 8020e16:	4293      	cmp	r3, r2
 8020e18:	d025      	beq.n	8020e66 <HAL_GPIO_Init+0x232>
 8020e1a:	687b      	ldr	r3, [r7, #4]
 8020e1c:	4a54      	ldr	r2, [pc, #336]	@ (8020f70 <HAL_GPIO_Init+0x33c>)
 8020e1e:	4293      	cmp	r3, r2
 8020e20:	d01f      	beq.n	8020e62 <HAL_GPIO_Init+0x22e>
 8020e22:	687b      	ldr	r3, [r7, #4]
 8020e24:	4a53      	ldr	r2, [pc, #332]	@ (8020f74 <HAL_GPIO_Init+0x340>)
 8020e26:	4293      	cmp	r3, r2
 8020e28:	d019      	beq.n	8020e5e <HAL_GPIO_Init+0x22a>
 8020e2a:	687b      	ldr	r3, [r7, #4]
 8020e2c:	4a52      	ldr	r2, [pc, #328]	@ (8020f78 <HAL_GPIO_Init+0x344>)
 8020e2e:	4293      	cmp	r3, r2
 8020e30:	d013      	beq.n	8020e5a <HAL_GPIO_Init+0x226>
 8020e32:	687b      	ldr	r3, [r7, #4]
 8020e34:	4a51      	ldr	r2, [pc, #324]	@ (8020f7c <HAL_GPIO_Init+0x348>)
 8020e36:	4293      	cmp	r3, r2
 8020e38:	d00d      	beq.n	8020e56 <HAL_GPIO_Init+0x222>
 8020e3a:	687b      	ldr	r3, [r7, #4]
 8020e3c:	4a50      	ldr	r2, [pc, #320]	@ (8020f80 <HAL_GPIO_Init+0x34c>)
 8020e3e:	4293      	cmp	r3, r2
 8020e40:	d007      	beq.n	8020e52 <HAL_GPIO_Init+0x21e>
 8020e42:	687b      	ldr	r3, [r7, #4]
 8020e44:	4a4f      	ldr	r2, [pc, #316]	@ (8020f84 <HAL_GPIO_Init+0x350>)
 8020e46:	4293      	cmp	r3, r2
 8020e48:	d101      	bne.n	8020e4e <HAL_GPIO_Init+0x21a>
 8020e4a:	2309      	movs	r3, #9
 8020e4c:	e012      	b.n	8020e74 <HAL_GPIO_Init+0x240>
 8020e4e:	230a      	movs	r3, #10
 8020e50:	e010      	b.n	8020e74 <HAL_GPIO_Init+0x240>
 8020e52:	2308      	movs	r3, #8
 8020e54:	e00e      	b.n	8020e74 <HAL_GPIO_Init+0x240>
 8020e56:	2307      	movs	r3, #7
 8020e58:	e00c      	b.n	8020e74 <HAL_GPIO_Init+0x240>
 8020e5a:	2306      	movs	r3, #6
 8020e5c:	e00a      	b.n	8020e74 <HAL_GPIO_Init+0x240>
 8020e5e:	2305      	movs	r3, #5
 8020e60:	e008      	b.n	8020e74 <HAL_GPIO_Init+0x240>
 8020e62:	2304      	movs	r3, #4
 8020e64:	e006      	b.n	8020e74 <HAL_GPIO_Init+0x240>
 8020e66:	2303      	movs	r3, #3
 8020e68:	e004      	b.n	8020e74 <HAL_GPIO_Init+0x240>
 8020e6a:	2302      	movs	r3, #2
 8020e6c:	e002      	b.n	8020e74 <HAL_GPIO_Init+0x240>
 8020e6e:	2301      	movs	r3, #1
 8020e70:	e000      	b.n	8020e74 <HAL_GPIO_Init+0x240>
 8020e72:	2300      	movs	r3, #0
 8020e74:	69fa      	ldr	r2, [r7, #28]
 8020e76:	f002 0203 	and.w	r2, r2, #3
 8020e7a:	0092      	lsls	r2, r2, #2
 8020e7c:	4093      	lsls	r3, r2
 8020e7e:	69ba      	ldr	r2, [r7, #24]
 8020e80:	4313      	orrs	r3, r2
 8020e82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8020e84:	4935      	ldr	r1, [pc, #212]	@ (8020f5c <HAL_GPIO_Init+0x328>)
 8020e86:	69fb      	ldr	r3, [r7, #28]
 8020e88:	089b      	lsrs	r3, r3, #2
 8020e8a:	3302      	adds	r3, #2
 8020e8c:	69ba      	ldr	r2, [r7, #24]
 8020e8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8020e92:	4b3d      	ldr	r3, [pc, #244]	@ (8020f88 <HAL_GPIO_Init+0x354>)
 8020e94:	689b      	ldr	r3, [r3, #8]
 8020e96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8020e98:	693b      	ldr	r3, [r7, #16]
 8020e9a:	43db      	mvns	r3, r3
 8020e9c:	69ba      	ldr	r2, [r7, #24]
 8020e9e:	4013      	ands	r3, r2
 8020ea0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8020ea2:	683b      	ldr	r3, [r7, #0]
 8020ea4:	685b      	ldr	r3, [r3, #4]
 8020ea6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8020eaa:	2b00      	cmp	r3, #0
 8020eac:	d003      	beq.n	8020eb6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8020eae:	69ba      	ldr	r2, [r7, #24]
 8020eb0:	693b      	ldr	r3, [r7, #16]
 8020eb2:	4313      	orrs	r3, r2
 8020eb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8020eb6:	4a34      	ldr	r2, [pc, #208]	@ (8020f88 <HAL_GPIO_Init+0x354>)
 8020eb8:	69bb      	ldr	r3, [r7, #24]
 8020eba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8020ebc:	4b32      	ldr	r3, [pc, #200]	@ (8020f88 <HAL_GPIO_Init+0x354>)
 8020ebe:	68db      	ldr	r3, [r3, #12]
 8020ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8020ec2:	693b      	ldr	r3, [r7, #16]
 8020ec4:	43db      	mvns	r3, r3
 8020ec6:	69ba      	ldr	r2, [r7, #24]
 8020ec8:	4013      	ands	r3, r2
 8020eca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8020ecc:	683b      	ldr	r3, [r7, #0]
 8020ece:	685b      	ldr	r3, [r3, #4]
 8020ed0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8020ed4:	2b00      	cmp	r3, #0
 8020ed6:	d003      	beq.n	8020ee0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8020ed8:	69ba      	ldr	r2, [r7, #24]
 8020eda:	693b      	ldr	r3, [r7, #16]
 8020edc:	4313      	orrs	r3, r2
 8020ede:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8020ee0:	4a29      	ldr	r2, [pc, #164]	@ (8020f88 <HAL_GPIO_Init+0x354>)
 8020ee2:	69bb      	ldr	r3, [r7, #24]
 8020ee4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8020ee6:	4b28      	ldr	r3, [pc, #160]	@ (8020f88 <HAL_GPIO_Init+0x354>)
 8020ee8:	685b      	ldr	r3, [r3, #4]
 8020eea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8020eec:	693b      	ldr	r3, [r7, #16]
 8020eee:	43db      	mvns	r3, r3
 8020ef0:	69ba      	ldr	r2, [r7, #24]
 8020ef2:	4013      	ands	r3, r2
 8020ef4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8020ef6:	683b      	ldr	r3, [r7, #0]
 8020ef8:	685b      	ldr	r3, [r3, #4]
 8020efa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8020efe:	2b00      	cmp	r3, #0
 8020f00:	d003      	beq.n	8020f0a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8020f02:	69ba      	ldr	r2, [r7, #24]
 8020f04:	693b      	ldr	r3, [r7, #16]
 8020f06:	4313      	orrs	r3, r2
 8020f08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8020f0a:	4a1f      	ldr	r2, [pc, #124]	@ (8020f88 <HAL_GPIO_Init+0x354>)
 8020f0c:	69bb      	ldr	r3, [r7, #24]
 8020f0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8020f10:	4b1d      	ldr	r3, [pc, #116]	@ (8020f88 <HAL_GPIO_Init+0x354>)
 8020f12:	681b      	ldr	r3, [r3, #0]
 8020f14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8020f16:	693b      	ldr	r3, [r7, #16]
 8020f18:	43db      	mvns	r3, r3
 8020f1a:	69ba      	ldr	r2, [r7, #24]
 8020f1c:	4013      	ands	r3, r2
 8020f1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8020f20:	683b      	ldr	r3, [r7, #0]
 8020f22:	685b      	ldr	r3, [r3, #4]
 8020f24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8020f28:	2b00      	cmp	r3, #0
 8020f2a:	d003      	beq.n	8020f34 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8020f2c:	69ba      	ldr	r2, [r7, #24]
 8020f2e:	693b      	ldr	r3, [r7, #16]
 8020f30:	4313      	orrs	r3, r2
 8020f32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8020f34:	4a14      	ldr	r2, [pc, #80]	@ (8020f88 <HAL_GPIO_Init+0x354>)
 8020f36:	69bb      	ldr	r3, [r7, #24]
 8020f38:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8020f3a:	69fb      	ldr	r3, [r7, #28]
 8020f3c:	3301      	adds	r3, #1
 8020f3e:	61fb      	str	r3, [r7, #28]
 8020f40:	69fb      	ldr	r3, [r7, #28]
 8020f42:	2b0f      	cmp	r3, #15
 8020f44:	f67f ae84 	bls.w	8020c50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8020f48:	bf00      	nop
 8020f4a:	bf00      	nop
 8020f4c:	3724      	adds	r7, #36	@ 0x24
 8020f4e:	46bd      	mov	sp, r7
 8020f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f54:	4770      	bx	lr
 8020f56:	bf00      	nop
 8020f58:	40023800 	.word	0x40023800
 8020f5c:	40013800 	.word	0x40013800
 8020f60:	40020000 	.word	0x40020000
 8020f64:	40020400 	.word	0x40020400
 8020f68:	40020800 	.word	0x40020800
 8020f6c:	40020c00 	.word	0x40020c00
 8020f70:	40021000 	.word	0x40021000
 8020f74:	40021400 	.word	0x40021400
 8020f78:	40021800 	.word	0x40021800
 8020f7c:	40021c00 	.word	0x40021c00
 8020f80:	40022000 	.word	0x40022000
 8020f84:	40022400 	.word	0x40022400
 8020f88:	40013c00 	.word	0x40013c00

08020f8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8020f8c:	b480      	push	{r7}
 8020f8e:	b083      	sub	sp, #12
 8020f90:	af00      	add	r7, sp, #0
 8020f92:	6078      	str	r0, [r7, #4]
 8020f94:	460b      	mov	r3, r1
 8020f96:	807b      	strh	r3, [r7, #2]
 8020f98:	4613      	mov	r3, r2
 8020f9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8020f9c:	787b      	ldrb	r3, [r7, #1]
 8020f9e:	2b00      	cmp	r3, #0
 8020fa0:	d003      	beq.n	8020faa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8020fa2:	887a      	ldrh	r2, [r7, #2]
 8020fa4:	687b      	ldr	r3, [r7, #4]
 8020fa6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8020fa8:	e003      	b.n	8020fb2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8020faa:	887b      	ldrh	r3, [r7, #2]
 8020fac:	041a      	lsls	r2, r3, #16
 8020fae:	687b      	ldr	r3, [r7, #4]
 8020fb0:	619a      	str	r2, [r3, #24]
}
 8020fb2:	bf00      	nop
 8020fb4:	370c      	adds	r7, #12
 8020fb6:	46bd      	mov	sp, r7
 8020fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020fbc:	4770      	bx	lr

08020fbe <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8020fbe:	b480      	push	{r7}
 8020fc0:	b085      	sub	sp, #20
 8020fc2:	af00      	add	r7, sp, #0
 8020fc4:	6078      	str	r0, [r7, #4]
 8020fc6:	460b      	mov	r3, r1
 8020fc8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8020fca:	687b      	ldr	r3, [r7, #4]
 8020fcc:	695b      	ldr	r3, [r3, #20]
 8020fce:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8020fd0:	887a      	ldrh	r2, [r7, #2]
 8020fd2:	68fb      	ldr	r3, [r7, #12]
 8020fd4:	4013      	ands	r3, r2
 8020fd6:	041a      	lsls	r2, r3, #16
 8020fd8:	68fb      	ldr	r3, [r7, #12]
 8020fda:	43d9      	mvns	r1, r3
 8020fdc:	887b      	ldrh	r3, [r7, #2]
 8020fde:	400b      	ands	r3, r1
 8020fe0:	431a      	orrs	r2, r3
 8020fe2:	687b      	ldr	r3, [r7, #4]
 8020fe4:	619a      	str	r2, [r3, #24]
}
 8020fe6:	bf00      	nop
 8020fe8:	3714      	adds	r7, #20
 8020fea:	46bd      	mov	sp, r7
 8020fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ff0:	4770      	bx	lr
	...

08020ff4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8020ff4:	b580      	push	{r7, lr}
 8020ff6:	b086      	sub	sp, #24
 8020ff8:	af00      	add	r7, sp, #0
 8020ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8020ffc:	687b      	ldr	r3, [r7, #4]
 8020ffe:	2b00      	cmp	r3, #0
 8021000:	d101      	bne.n	8021006 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8021002:	2301      	movs	r3, #1
 8021004:	e267      	b.n	80214d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8021006:	687b      	ldr	r3, [r7, #4]
 8021008:	681b      	ldr	r3, [r3, #0]
 802100a:	f003 0301 	and.w	r3, r3, #1
 802100e:	2b00      	cmp	r3, #0
 8021010:	d075      	beq.n	80210fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8021012:	4b88      	ldr	r3, [pc, #544]	@ (8021234 <HAL_RCC_OscConfig+0x240>)
 8021014:	689b      	ldr	r3, [r3, #8]
 8021016:	f003 030c 	and.w	r3, r3, #12
 802101a:	2b04      	cmp	r3, #4
 802101c:	d00c      	beq.n	8021038 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 802101e:	4b85      	ldr	r3, [pc, #532]	@ (8021234 <HAL_RCC_OscConfig+0x240>)
 8021020:	689b      	ldr	r3, [r3, #8]
 8021022:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8021026:	2b08      	cmp	r3, #8
 8021028:	d112      	bne.n	8021050 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 802102a:	4b82      	ldr	r3, [pc, #520]	@ (8021234 <HAL_RCC_OscConfig+0x240>)
 802102c:	685b      	ldr	r3, [r3, #4]
 802102e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8021032:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8021036:	d10b      	bne.n	8021050 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8021038:	4b7e      	ldr	r3, [pc, #504]	@ (8021234 <HAL_RCC_OscConfig+0x240>)
 802103a:	681b      	ldr	r3, [r3, #0]
 802103c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8021040:	2b00      	cmp	r3, #0
 8021042:	d05b      	beq.n	80210fc <HAL_RCC_OscConfig+0x108>
 8021044:	687b      	ldr	r3, [r7, #4]
 8021046:	685b      	ldr	r3, [r3, #4]
 8021048:	2b00      	cmp	r3, #0
 802104a:	d157      	bne.n	80210fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 802104c:	2301      	movs	r3, #1
 802104e:	e242      	b.n	80214d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8021050:	687b      	ldr	r3, [r7, #4]
 8021052:	685b      	ldr	r3, [r3, #4]
 8021054:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8021058:	d106      	bne.n	8021068 <HAL_RCC_OscConfig+0x74>
 802105a:	4b76      	ldr	r3, [pc, #472]	@ (8021234 <HAL_RCC_OscConfig+0x240>)
 802105c:	681b      	ldr	r3, [r3, #0]
 802105e:	4a75      	ldr	r2, [pc, #468]	@ (8021234 <HAL_RCC_OscConfig+0x240>)
 8021060:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8021064:	6013      	str	r3, [r2, #0]
 8021066:	e01d      	b.n	80210a4 <HAL_RCC_OscConfig+0xb0>
 8021068:	687b      	ldr	r3, [r7, #4]
 802106a:	685b      	ldr	r3, [r3, #4]
 802106c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8021070:	d10c      	bne.n	802108c <HAL_RCC_OscConfig+0x98>
 8021072:	4b70      	ldr	r3, [pc, #448]	@ (8021234 <HAL_RCC_OscConfig+0x240>)
 8021074:	681b      	ldr	r3, [r3, #0]
 8021076:	4a6f      	ldr	r2, [pc, #444]	@ (8021234 <HAL_RCC_OscConfig+0x240>)
 8021078:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 802107c:	6013      	str	r3, [r2, #0]
 802107e:	4b6d      	ldr	r3, [pc, #436]	@ (8021234 <HAL_RCC_OscConfig+0x240>)
 8021080:	681b      	ldr	r3, [r3, #0]
 8021082:	4a6c      	ldr	r2, [pc, #432]	@ (8021234 <HAL_RCC_OscConfig+0x240>)
 8021084:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8021088:	6013      	str	r3, [r2, #0]
 802108a:	e00b      	b.n	80210a4 <HAL_RCC_OscConfig+0xb0>
 802108c:	4b69      	ldr	r3, [pc, #420]	@ (8021234 <HAL_RCC_OscConfig+0x240>)
 802108e:	681b      	ldr	r3, [r3, #0]
 8021090:	4a68      	ldr	r2, [pc, #416]	@ (8021234 <HAL_RCC_OscConfig+0x240>)
 8021092:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8021096:	6013      	str	r3, [r2, #0]
 8021098:	4b66      	ldr	r3, [pc, #408]	@ (8021234 <HAL_RCC_OscConfig+0x240>)
 802109a:	681b      	ldr	r3, [r3, #0]
 802109c:	4a65      	ldr	r2, [pc, #404]	@ (8021234 <HAL_RCC_OscConfig+0x240>)
 802109e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80210a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80210a4:	687b      	ldr	r3, [r7, #4]
 80210a6:	685b      	ldr	r3, [r3, #4]
 80210a8:	2b00      	cmp	r3, #0
 80210aa:	d013      	beq.n	80210d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80210ac:	f7ff fcd0 	bl	8020a50 <HAL_GetTick>
 80210b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80210b2:	e008      	b.n	80210c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80210b4:	f7ff fccc 	bl	8020a50 <HAL_GetTick>
 80210b8:	4602      	mov	r2, r0
 80210ba:	693b      	ldr	r3, [r7, #16]
 80210bc:	1ad3      	subs	r3, r2, r3
 80210be:	2b64      	cmp	r3, #100	@ 0x64
 80210c0:	d901      	bls.n	80210c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80210c2:	2303      	movs	r3, #3
 80210c4:	e207      	b.n	80214d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80210c6:	4b5b      	ldr	r3, [pc, #364]	@ (8021234 <HAL_RCC_OscConfig+0x240>)
 80210c8:	681b      	ldr	r3, [r3, #0]
 80210ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80210ce:	2b00      	cmp	r3, #0
 80210d0:	d0f0      	beq.n	80210b4 <HAL_RCC_OscConfig+0xc0>
 80210d2:	e014      	b.n	80210fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80210d4:	f7ff fcbc 	bl	8020a50 <HAL_GetTick>
 80210d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80210da:	e008      	b.n	80210ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80210dc:	f7ff fcb8 	bl	8020a50 <HAL_GetTick>
 80210e0:	4602      	mov	r2, r0
 80210e2:	693b      	ldr	r3, [r7, #16]
 80210e4:	1ad3      	subs	r3, r2, r3
 80210e6:	2b64      	cmp	r3, #100	@ 0x64
 80210e8:	d901      	bls.n	80210ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80210ea:	2303      	movs	r3, #3
 80210ec:	e1f3      	b.n	80214d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80210ee:	4b51      	ldr	r3, [pc, #324]	@ (8021234 <HAL_RCC_OscConfig+0x240>)
 80210f0:	681b      	ldr	r3, [r3, #0]
 80210f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80210f6:	2b00      	cmp	r3, #0
 80210f8:	d1f0      	bne.n	80210dc <HAL_RCC_OscConfig+0xe8>
 80210fa:	e000      	b.n	80210fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80210fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80210fe:	687b      	ldr	r3, [r7, #4]
 8021100:	681b      	ldr	r3, [r3, #0]
 8021102:	f003 0302 	and.w	r3, r3, #2
 8021106:	2b00      	cmp	r3, #0
 8021108:	d063      	beq.n	80211d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 802110a:	4b4a      	ldr	r3, [pc, #296]	@ (8021234 <HAL_RCC_OscConfig+0x240>)
 802110c:	689b      	ldr	r3, [r3, #8]
 802110e:	f003 030c 	and.w	r3, r3, #12
 8021112:	2b00      	cmp	r3, #0
 8021114:	d00b      	beq.n	802112e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8021116:	4b47      	ldr	r3, [pc, #284]	@ (8021234 <HAL_RCC_OscConfig+0x240>)
 8021118:	689b      	ldr	r3, [r3, #8]
 802111a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 802111e:	2b08      	cmp	r3, #8
 8021120:	d11c      	bne.n	802115c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8021122:	4b44      	ldr	r3, [pc, #272]	@ (8021234 <HAL_RCC_OscConfig+0x240>)
 8021124:	685b      	ldr	r3, [r3, #4]
 8021126:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 802112a:	2b00      	cmp	r3, #0
 802112c:	d116      	bne.n	802115c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 802112e:	4b41      	ldr	r3, [pc, #260]	@ (8021234 <HAL_RCC_OscConfig+0x240>)
 8021130:	681b      	ldr	r3, [r3, #0]
 8021132:	f003 0302 	and.w	r3, r3, #2
 8021136:	2b00      	cmp	r3, #0
 8021138:	d005      	beq.n	8021146 <HAL_RCC_OscConfig+0x152>
 802113a:	687b      	ldr	r3, [r7, #4]
 802113c:	68db      	ldr	r3, [r3, #12]
 802113e:	2b01      	cmp	r3, #1
 8021140:	d001      	beq.n	8021146 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8021142:	2301      	movs	r3, #1
 8021144:	e1c7      	b.n	80214d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8021146:	4b3b      	ldr	r3, [pc, #236]	@ (8021234 <HAL_RCC_OscConfig+0x240>)
 8021148:	681b      	ldr	r3, [r3, #0]
 802114a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 802114e:	687b      	ldr	r3, [r7, #4]
 8021150:	691b      	ldr	r3, [r3, #16]
 8021152:	00db      	lsls	r3, r3, #3
 8021154:	4937      	ldr	r1, [pc, #220]	@ (8021234 <HAL_RCC_OscConfig+0x240>)
 8021156:	4313      	orrs	r3, r2
 8021158:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 802115a:	e03a      	b.n	80211d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 802115c:	687b      	ldr	r3, [r7, #4]
 802115e:	68db      	ldr	r3, [r3, #12]
 8021160:	2b00      	cmp	r3, #0
 8021162:	d020      	beq.n	80211a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8021164:	4b34      	ldr	r3, [pc, #208]	@ (8021238 <HAL_RCC_OscConfig+0x244>)
 8021166:	2201      	movs	r2, #1
 8021168:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 802116a:	f7ff fc71 	bl	8020a50 <HAL_GetTick>
 802116e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8021170:	e008      	b.n	8021184 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8021172:	f7ff fc6d 	bl	8020a50 <HAL_GetTick>
 8021176:	4602      	mov	r2, r0
 8021178:	693b      	ldr	r3, [r7, #16]
 802117a:	1ad3      	subs	r3, r2, r3
 802117c:	2b02      	cmp	r3, #2
 802117e:	d901      	bls.n	8021184 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8021180:	2303      	movs	r3, #3
 8021182:	e1a8      	b.n	80214d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8021184:	4b2b      	ldr	r3, [pc, #172]	@ (8021234 <HAL_RCC_OscConfig+0x240>)
 8021186:	681b      	ldr	r3, [r3, #0]
 8021188:	f003 0302 	and.w	r3, r3, #2
 802118c:	2b00      	cmp	r3, #0
 802118e:	d0f0      	beq.n	8021172 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8021190:	4b28      	ldr	r3, [pc, #160]	@ (8021234 <HAL_RCC_OscConfig+0x240>)
 8021192:	681b      	ldr	r3, [r3, #0]
 8021194:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8021198:	687b      	ldr	r3, [r7, #4]
 802119a:	691b      	ldr	r3, [r3, #16]
 802119c:	00db      	lsls	r3, r3, #3
 802119e:	4925      	ldr	r1, [pc, #148]	@ (8021234 <HAL_RCC_OscConfig+0x240>)
 80211a0:	4313      	orrs	r3, r2
 80211a2:	600b      	str	r3, [r1, #0]
 80211a4:	e015      	b.n	80211d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80211a6:	4b24      	ldr	r3, [pc, #144]	@ (8021238 <HAL_RCC_OscConfig+0x244>)
 80211a8:	2200      	movs	r2, #0
 80211aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80211ac:	f7ff fc50 	bl	8020a50 <HAL_GetTick>
 80211b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80211b2:	e008      	b.n	80211c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80211b4:	f7ff fc4c 	bl	8020a50 <HAL_GetTick>
 80211b8:	4602      	mov	r2, r0
 80211ba:	693b      	ldr	r3, [r7, #16]
 80211bc:	1ad3      	subs	r3, r2, r3
 80211be:	2b02      	cmp	r3, #2
 80211c0:	d901      	bls.n	80211c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80211c2:	2303      	movs	r3, #3
 80211c4:	e187      	b.n	80214d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80211c6:	4b1b      	ldr	r3, [pc, #108]	@ (8021234 <HAL_RCC_OscConfig+0x240>)
 80211c8:	681b      	ldr	r3, [r3, #0]
 80211ca:	f003 0302 	and.w	r3, r3, #2
 80211ce:	2b00      	cmp	r3, #0
 80211d0:	d1f0      	bne.n	80211b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80211d2:	687b      	ldr	r3, [r7, #4]
 80211d4:	681b      	ldr	r3, [r3, #0]
 80211d6:	f003 0308 	and.w	r3, r3, #8
 80211da:	2b00      	cmp	r3, #0
 80211dc:	d036      	beq.n	802124c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80211de:	687b      	ldr	r3, [r7, #4]
 80211e0:	695b      	ldr	r3, [r3, #20]
 80211e2:	2b00      	cmp	r3, #0
 80211e4:	d016      	beq.n	8021214 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80211e6:	4b15      	ldr	r3, [pc, #84]	@ (802123c <HAL_RCC_OscConfig+0x248>)
 80211e8:	2201      	movs	r2, #1
 80211ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80211ec:	f7ff fc30 	bl	8020a50 <HAL_GetTick>
 80211f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80211f2:	e008      	b.n	8021206 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80211f4:	f7ff fc2c 	bl	8020a50 <HAL_GetTick>
 80211f8:	4602      	mov	r2, r0
 80211fa:	693b      	ldr	r3, [r7, #16]
 80211fc:	1ad3      	subs	r3, r2, r3
 80211fe:	2b02      	cmp	r3, #2
 8021200:	d901      	bls.n	8021206 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8021202:	2303      	movs	r3, #3
 8021204:	e167      	b.n	80214d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8021206:	4b0b      	ldr	r3, [pc, #44]	@ (8021234 <HAL_RCC_OscConfig+0x240>)
 8021208:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 802120a:	f003 0302 	and.w	r3, r3, #2
 802120e:	2b00      	cmp	r3, #0
 8021210:	d0f0      	beq.n	80211f4 <HAL_RCC_OscConfig+0x200>
 8021212:	e01b      	b.n	802124c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8021214:	4b09      	ldr	r3, [pc, #36]	@ (802123c <HAL_RCC_OscConfig+0x248>)
 8021216:	2200      	movs	r2, #0
 8021218:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 802121a:	f7ff fc19 	bl	8020a50 <HAL_GetTick>
 802121e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8021220:	e00e      	b.n	8021240 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8021222:	f7ff fc15 	bl	8020a50 <HAL_GetTick>
 8021226:	4602      	mov	r2, r0
 8021228:	693b      	ldr	r3, [r7, #16]
 802122a:	1ad3      	subs	r3, r2, r3
 802122c:	2b02      	cmp	r3, #2
 802122e:	d907      	bls.n	8021240 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8021230:	2303      	movs	r3, #3
 8021232:	e150      	b.n	80214d6 <HAL_RCC_OscConfig+0x4e2>
 8021234:	40023800 	.word	0x40023800
 8021238:	42470000 	.word	0x42470000
 802123c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8021240:	4b88      	ldr	r3, [pc, #544]	@ (8021464 <HAL_RCC_OscConfig+0x470>)
 8021242:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8021244:	f003 0302 	and.w	r3, r3, #2
 8021248:	2b00      	cmp	r3, #0
 802124a:	d1ea      	bne.n	8021222 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 802124c:	687b      	ldr	r3, [r7, #4]
 802124e:	681b      	ldr	r3, [r3, #0]
 8021250:	f003 0304 	and.w	r3, r3, #4
 8021254:	2b00      	cmp	r3, #0
 8021256:	f000 8097 	beq.w	8021388 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 802125a:	2300      	movs	r3, #0
 802125c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 802125e:	4b81      	ldr	r3, [pc, #516]	@ (8021464 <HAL_RCC_OscConfig+0x470>)
 8021260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8021262:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8021266:	2b00      	cmp	r3, #0
 8021268:	d10f      	bne.n	802128a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 802126a:	2300      	movs	r3, #0
 802126c:	60bb      	str	r3, [r7, #8]
 802126e:	4b7d      	ldr	r3, [pc, #500]	@ (8021464 <HAL_RCC_OscConfig+0x470>)
 8021270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8021272:	4a7c      	ldr	r2, [pc, #496]	@ (8021464 <HAL_RCC_OscConfig+0x470>)
 8021274:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8021278:	6413      	str	r3, [r2, #64]	@ 0x40
 802127a:	4b7a      	ldr	r3, [pc, #488]	@ (8021464 <HAL_RCC_OscConfig+0x470>)
 802127c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802127e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8021282:	60bb      	str	r3, [r7, #8]
 8021284:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8021286:	2301      	movs	r3, #1
 8021288:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 802128a:	4b77      	ldr	r3, [pc, #476]	@ (8021468 <HAL_RCC_OscConfig+0x474>)
 802128c:	681b      	ldr	r3, [r3, #0]
 802128e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8021292:	2b00      	cmp	r3, #0
 8021294:	d118      	bne.n	80212c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8021296:	4b74      	ldr	r3, [pc, #464]	@ (8021468 <HAL_RCC_OscConfig+0x474>)
 8021298:	681b      	ldr	r3, [r3, #0]
 802129a:	4a73      	ldr	r2, [pc, #460]	@ (8021468 <HAL_RCC_OscConfig+0x474>)
 802129c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80212a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80212a2:	f7ff fbd5 	bl	8020a50 <HAL_GetTick>
 80212a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80212a8:	e008      	b.n	80212bc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80212aa:	f7ff fbd1 	bl	8020a50 <HAL_GetTick>
 80212ae:	4602      	mov	r2, r0
 80212b0:	693b      	ldr	r3, [r7, #16]
 80212b2:	1ad3      	subs	r3, r2, r3
 80212b4:	2b02      	cmp	r3, #2
 80212b6:	d901      	bls.n	80212bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80212b8:	2303      	movs	r3, #3
 80212ba:	e10c      	b.n	80214d6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80212bc:	4b6a      	ldr	r3, [pc, #424]	@ (8021468 <HAL_RCC_OscConfig+0x474>)
 80212be:	681b      	ldr	r3, [r3, #0]
 80212c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80212c4:	2b00      	cmp	r3, #0
 80212c6:	d0f0      	beq.n	80212aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80212c8:	687b      	ldr	r3, [r7, #4]
 80212ca:	689b      	ldr	r3, [r3, #8]
 80212cc:	2b01      	cmp	r3, #1
 80212ce:	d106      	bne.n	80212de <HAL_RCC_OscConfig+0x2ea>
 80212d0:	4b64      	ldr	r3, [pc, #400]	@ (8021464 <HAL_RCC_OscConfig+0x470>)
 80212d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80212d4:	4a63      	ldr	r2, [pc, #396]	@ (8021464 <HAL_RCC_OscConfig+0x470>)
 80212d6:	f043 0301 	orr.w	r3, r3, #1
 80212da:	6713      	str	r3, [r2, #112]	@ 0x70
 80212dc:	e01c      	b.n	8021318 <HAL_RCC_OscConfig+0x324>
 80212de:	687b      	ldr	r3, [r7, #4]
 80212e0:	689b      	ldr	r3, [r3, #8]
 80212e2:	2b05      	cmp	r3, #5
 80212e4:	d10c      	bne.n	8021300 <HAL_RCC_OscConfig+0x30c>
 80212e6:	4b5f      	ldr	r3, [pc, #380]	@ (8021464 <HAL_RCC_OscConfig+0x470>)
 80212e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80212ea:	4a5e      	ldr	r2, [pc, #376]	@ (8021464 <HAL_RCC_OscConfig+0x470>)
 80212ec:	f043 0304 	orr.w	r3, r3, #4
 80212f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80212f2:	4b5c      	ldr	r3, [pc, #368]	@ (8021464 <HAL_RCC_OscConfig+0x470>)
 80212f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80212f6:	4a5b      	ldr	r2, [pc, #364]	@ (8021464 <HAL_RCC_OscConfig+0x470>)
 80212f8:	f043 0301 	orr.w	r3, r3, #1
 80212fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80212fe:	e00b      	b.n	8021318 <HAL_RCC_OscConfig+0x324>
 8021300:	4b58      	ldr	r3, [pc, #352]	@ (8021464 <HAL_RCC_OscConfig+0x470>)
 8021302:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8021304:	4a57      	ldr	r2, [pc, #348]	@ (8021464 <HAL_RCC_OscConfig+0x470>)
 8021306:	f023 0301 	bic.w	r3, r3, #1
 802130a:	6713      	str	r3, [r2, #112]	@ 0x70
 802130c:	4b55      	ldr	r3, [pc, #340]	@ (8021464 <HAL_RCC_OscConfig+0x470>)
 802130e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8021310:	4a54      	ldr	r2, [pc, #336]	@ (8021464 <HAL_RCC_OscConfig+0x470>)
 8021312:	f023 0304 	bic.w	r3, r3, #4
 8021316:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8021318:	687b      	ldr	r3, [r7, #4]
 802131a:	689b      	ldr	r3, [r3, #8]
 802131c:	2b00      	cmp	r3, #0
 802131e:	d015      	beq.n	802134c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8021320:	f7ff fb96 	bl	8020a50 <HAL_GetTick>
 8021324:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8021326:	e00a      	b.n	802133e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8021328:	f7ff fb92 	bl	8020a50 <HAL_GetTick>
 802132c:	4602      	mov	r2, r0
 802132e:	693b      	ldr	r3, [r7, #16]
 8021330:	1ad3      	subs	r3, r2, r3
 8021332:	f241 3288 	movw	r2, #5000	@ 0x1388
 8021336:	4293      	cmp	r3, r2
 8021338:	d901      	bls.n	802133e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 802133a:	2303      	movs	r3, #3
 802133c:	e0cb      	b.n	80214d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 802133e:	4b49      	ldr	r3, [pc, #292]	@ (8021464 <HAL_RCC_OscConfig+0x470>)
 8021340:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8021342:	f003 0302 	and.w	r3, r3, #2
 8021346:	2b00      	cmp	r3, #0
 8021348:	d0ee      	beq.n	8021328 <HAL_RCC_OscConfig+0x334>
 802134a:	e014      	b.n	8021376 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 802134c:	f7ff fb80 	bl	8020a50 <HAL_GetTick>
 8021350:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8021352:	e00a      	b.n	802136a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8021354:	f7ff fb7c 	bl	8020a50 <HAL_GetTick>
 8021358:	4602      	mov	r2, r0
 802135a:	693b      	ldr	r3, [r7, #16]
 802135c:	1ad3      	subs	r3, r2, r3
 802135e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8021362:	4293      	cmp	r3, r2
 8021364:	d901      	bls.n	802136a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8021366:	2303      	movs	r3, #3
 8021368:	e0b5      	b.n	80214d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 802136a:	4b3e      	ldr	r3, [pc, #248]	@ (8021464 <HAL_RCC_OscConfig+0x470>)
 802136c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 802136e:	f003 0302 	and.w	r3, r3, #2
 8021372:	2b00      	cmp	r3, #0
 8021374:	d1ee      	bne.n	8021354 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8021376:	7dfb      	ldrb	r3, [r7, #23]
 8021378:	2b01      	cmp	r3, #1
 802137a:	d105      	bne.n	8021388 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 802137c:	4b39      	ldr	r3, [pc, #228]	@ (8021464 <HAL_RCC_OscConfig+0x470>)
 802137e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8021380:	4a38      	ldr	r2, [pc, #224]	@ (8021464 <HAL_RCC_OscConfig+0x470>)
 8021382:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8021386:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8021388:	687b      	ldr	r3, [r7, #4]
 802138a:	699b      	ldr	r3, [r3, #24]
 802138c:	2b00      	cmp	r3, #0
 802138e:	f000 80a1 	beq.w	80214d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8021392:	4b34      	ldr	r3, [pc, #208]	@ (8021464 <HAL_RCC_OscConfig+0x470>)
 8021394:	689b      	ldr	r3, [r3, #8]
 8021396:	f003 030c 	and.w	r3, r3, #12
 802139a:	2b08      	cmp	r3, #8
 802139c:	d05c      	beq.n	8021458 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 802139e:	687b      	ldr	r3, [r7, #4]
 80213a0:	699b      	ldr	r3, [r3, #24]
 80213a2:	2b02      	cmp	r3, #2
 80213a4:	d141      	bne.n	802142a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80213a6:	4b31      	ldr	r3, [pc, #196]	@ (802146c <HAL_RCC_OscConfig+0x478>)
 80213a8:	2200      	movs	r2, #0
 80213aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80213ac:	f7ff fb50 	bl	8020a50 <HAL_GetTick>
 80213b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80213b2:	e008      	b.n	80213c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80213b4:	f7ff fb4c 	bl	8020a50 <HAL_GetTick>
 80213b8:	4602      	mov	r2, r0
 80213ba:	693b      	ldr	r3, [r7, #16]
 80213bc:	1ad3      	subs	r3, r2, r3
 80213be:	2b02      	cmp	r3, #2
 80213c0:	d901      	bls.n	80213c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80213c2:	2303      	movs	r3, #3
 80213c4:	e087      	b.n	80214d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80213c6:	4b27      	ldr	r3, [pc, #156]	@ (8021464 <HAL_RCC_OscConfig+0x470>)
 80213c8:	681b      	ldr	r3, [r3, #0]
 80213ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80213ce:	2b00      	cmp	r3, #0
 80213d0:	d1f0      	bne.n	80213b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80213d2:	687b      	ldr	r3, [r7, #4]
 80213d4:	69da      	ldr	r2, [r3, #28]
 80213d6:	687b      	ldr	r3, [r7, #4]
 80213d8:	6a1b      	ldr	r3, [r3, #32]
 80213da:	431a      	orrs	r2, r3
 80213dc:	687b      	ldr	r3, [r7, #4]
 80213de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80213e0:	019b      	lsls	r3, r3, #6
 80213e2:	431a      	orrs	r2, r3
 80213e4:	687b      	ldr	r3, [r7, #4]
 80213e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80213e8:	085b      	lsrs	r3, r3, #1
 80213ea:	3b01      	subs	r3, #1
 80213ec:	041b      	lsls	r3, r3, #16
 80213ee:	431a      	orrs	r2, r3
 80213f0:	687b      	ldr	r3, [r7, #4]
 80213f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80213f4:	061b      	lsls	r3, r3, #24
 80213f6:	491b      	ldr	r1, [pc, #108]	@ (8021464 <HAL_RCC_OscConfig+0x470>)
 80213f8:	4313      	orrs	r3, r2
 80213fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80213fc:	4b1b      	ldr	r3, [pc, #108]	@ (802146c <HAL_RCC_OscConfig+0x478>)
 80213fe:	2201      	movs	r2, #1
 8021400:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8021402:	f7ff fb25 	bl	8020a50 <HAL_GetTick>
 8021406:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8021408:	e008      	b.n	802141c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 802140a:	f7ff fb21 	bl	8020a50 <HAL_GetTick>
 802140e:	4602      	mov	r2, r0
 8021410:	693b      	ldr	r3, [r7, #16]
 8021412:	1ad3      	subs	r3, r2, r3
 8021414:	2b02      	cmp	r3, #2
 8021416:	d901      	bls.n	802141c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8021418:	2303      	movs	r3, #3
 802141a:	e05c      	b.n	80214d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 802141c:	4b11      	ldr	r3, [pc, #68]	@ (8021464 <HAL_RCC_OscConfig+0x470>)
 802141e:	681b      	ldr	r3, [r3, #0]
 8021420:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8021424:	2b00      	cmp	r3, #0
 8021426:	d0f0      	beq.n	802140a <HAL_RCC_OscConfig+0x416>
 8021428:	e054      	b.n	80214d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 802142a:	4b10      	ldr	r3, [pc, #64]	@ (802146c <HAL_RCC_OscConfig+0x478>)
 802142c:	2200      	movs	r2, #0
 802142e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8021430:	f7ff fb0e 	bl	8020a50 <HAL_GetTick>
 8021434:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8021436:	e008      	b.n	802144a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8021438:	f7ff fb0a 	bl	8020a50 <HAL_GetTick>
 802143c:	4602      	mov	r2, r0
 802143e:	693b      	ldr	r3, [r7, #16]
 8021440:	1ad3      	subs	r3, r2, r3
 8021442:	2b02      	cmp	r3, #2
 8021444:	d901      	bls.n	802144a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8021446:	2303      	movs	r3, #3
 8021448:	e045      	b.n	80214d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 802144a:	4b06      	ldr	r3, [pc, #24]	@ (8021464 <HAL_RCC_OscConfig+0x470>)
 802144c:	681b      	ldr	r3, [r3, #0]
 802144e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8021452:	2b00      	cmp	r3, #0
 8021454:	d1f0      	bne.n	8021438 <HAL_RCC_OscConfig+0x444>
 8021456:	e03d      	b.n	80214d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8021458:	687b      	ldr	r3, [r7, #4]
 802145a:	699b      	ldr	r3, [r3, #24]
 802145c:	2b01      	cmp	r3, #1
 802145e:	d107      	bne.n	8021470 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8021460:	2301      	movs	r3, #1
 8021462:	e038      	b.n	80214d6 <HAL_RCC_OscConfig+0x4e2>
 8021464:	40023800 	.word	0x40023800
 8021468:	40007000 	.word	0x40007000
 802146c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8021470:	4b1b      	ldr	r3, [pc, #108]	@ (80214e0 <HAL_RCC_OscConfig+0x4ec>)
 8021472:	685b      	ldr	r3, [r3, #4]
 8021474:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8021476:	687b      	ldr	r3, [r7, #4]
 8021478:	699b      	ldr	r3, [r3, #24]
 802147a:	2b01      	cmp	r3, #1
 802147c:	d028      	beq.n	80214d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 802147e:	68fb      	ldr	r3, [r7, #12]
 8021480:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8021484:	687b      	ldr	r3, [r7, #4]
 8021486:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8021488:	429a      	cmp	r2, r3
 802148a:	d121      	bne.n	80214d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 802148c:	68fb      	ldr	r3, [r7, #12]
 802148e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8021492:	687b      	ldr	r3, [r7, #4]
 8021494:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8021496:	429a      	cmp	r2, r3
 8021498:	d11a      	bne.n	80214d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 802149a:	68fa      	ldr	r2, [r7, #12]
 802149c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80214a0:	4013      	ands	r3, r2
 80214a2:	687a      	ldr	r2, [r7, #4]
 80214a4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80214a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80214a8:	4293      	cmp	r3, r2
 80214aa:	d111      	bne.n	80214d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80214ac:	68fb      	ldr	r3, [r7, #12]
 80214ae:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80214b2:	687b      	ldr	r3, [r7, #4]
 80214b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80214b6:	085b      	lsrs	r3, r3, #1
 80214b8:	3b01      	subs	r3, #1
 80214ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80214bc:	429a      	cmp	r2, r3
 80214be:	d107      	bne.n	80214d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80214c0:	68fb      	ldr	r3, [r7, #12]
 80214c2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80214c6:	687b      	ldr	r3, [r7, #4]
 80214c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80214ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80214cc:	429a      	cmp	r2, r3
 80214ce:	d001      	beq.n	80214d4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80214d0:	2301      	movs	r3, #1
 80214d2:	e000      	b.n	80214d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80214d4:	2300      	movs	r3, #0
}
 80214d6:	4618      	mov	r0, r3
 80214d8:	3718      	adds	r7, #24
 80214da:	46bd      	mov	sp, r7
 80214dc:	bd80      	pop	{r7, pc}
 80214de:	bf00      	nop
 80214e0:	40023800 	.word	0x40023800

080214e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80214e4:	b580      	push	{r7, lr}
 80214e6:	b084      	sub	sp, #16
 80214e8:	af00      	add	r7, sp, #0
 80214ea:	6078      	str	r0, [r7, #4]
 80214ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80214ee:	687b      	ldr	r3, [r7, #4]
 80214f0:	2b00      	cmp	r3, #0
 80214f2:	d101      	bne.n	80214f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80214f4:	2301      	movs	r3, #1
 80214f6:	e0cc      	b.n	8021692 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80214f8:	4b68      	ldr	r3, [pc, #416]	@ (802169c <HAL_RCC_ClockConfig+0x1b8>)
 80214fa:	681b      	ldr	r3, [r3, #0]
 80214fc:	f003 030f 	and.w	r3, r3, #15
 8021500:	683a      	ldr	r2, [r7, #0]
 8021502:	429a      	cmp	r2, r3
 8021504:	d90c      	bls.n	8021520 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8021506:	4b65      	ldr	r3, [pc, #404]	@ (802169c <HAL_RCC_ClockConfig+0x1b8>)
 8021508:	683a      	ldr	r2, [r7, #0]
 802150a:	b2d2      	uxtb	r2, r2
 802150c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 802150e:	4b63      	ldr	r3, [pc, #396]	@ (802169c <HAL_RCC_ClockConfig+0x1b8>)
 8021510:	681b      	ldr	r3, [r3, #0]
 8021512:	f003 030f 	and.w	r3, r3, #15
 8021516:	683a      	ldr	r2, [r7, #0]
 8021518:	429a      	cmp	r2, r3
 802151a:	d001      	beq.n	8021520 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 802151c:	2301      	movs	r3, #1
 802151e:	e0b8      	b.n	8021692 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8021520:	687b      	ldr	r3, [r7, #4]
 8021522:	681b      	ldr	r3, [r3, #0]
 8021524:	f003 0302 	and.w	r3, r3, #2
 8021528:	2b00      	cmp	r3, #0
 802152a:	d020      	beq.n	802156e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 802152c:	687b      	ldr	r3, [r7, #4]
 802152e:	681b      	ldr	r3, [r3, #0]
 8021530:	f003 0304 	and.w	r3, r3, #4
 8021534:	2b00      	cmp	r3, #0
 8021536:	d005      	beq.n	8021544 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8021538:	4b59      	ldr	r3, [pc, #356]	@ (80216a0 <HAL_RCC_ClockConfig+0x1bc>)
 802153a:	689b      	ldr	r3, [r3, #8]
 802153c:	4a58      	ldr	r2, [pc, #352]	@ (80216a0 <HAL_RCC_ClockConfig+0x1bc>)
 802153e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8021542:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8021544:	687b      	ldr	r3, [r7, #4]
 8021546:	681b      	ldr	r3, [r3, #0]
 8021548:	f003 0308 	and.w	r3, r3, #8
 802154c:	2b00      	cmp	r3, #0
 802154e:	d005      	beq.n	802155c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8021550:	4b53      	ldr	r3, [pc, #332]	@ (80216a0 <HAL_RCC_ClockConfig+0x1bc>)
 8021552:	689b      	ldr	r3, [r3, #8]
 8021554:	4a52      	ldr	r2, [pc, #328]	@ (80216a0 <HAL_RCC_ClockConfig+0x1bc>)
 8021556:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 802155a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 802155c:	4b50      	ldr	r3, [pc, #320]	@ (80216a0 <HAL_RCC_ClockConfig+0x1bc>)
 802155e:	689b      	ldr	r3, [r3, #8]
 8021560:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8021564:	687b      	ldr	r3, [r7, #4]
 8021566:	689b      	ldr	r3, [r3, #8]
 8021568:	494d      	ldr	r1, [pc, #308]	@ (80216a0 <HAL_RCC_ClockConfig+0x1bc>)
 802156a:	4313      	orrs	r3, r2
 802156c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 802156e:	687b      	ldr	r3, [r7, #4]
 8021570:	681b      	ldr	r3, [r3, #0]
 8021572:	f003 0301 	and.w	r3, r3, #1
 8021576:	2b00      	cmp	r3, #0
 8021578:	d044      	beq.n	8021604 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 802157a:	687b      	ldr	r3, [r7, #4]
 802157c:	685b      	ldr	r3, [r3, #4]
 802157e:	2b01      	cmp	r3, #1
 8021580:	d107      	bne.n	8021592 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8021582:	4b47      	ldr	r3, [pc, #284]	@ (80216a0 <HAL_RCC_ClockConfig+0x1bc>)
 8021584:	681b      	ldr	r3, [r3, #0]
 8021586:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 802158a:	2b00      	cmp	r3, #0
 802158c:	d119      	bne.n	80215c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 802158e:	2301      	movs	r3, #1
 8021590:	e07f      	b.n	8021692 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8021592:	687b      	ldr	r3, [r7, #4]
 8021594:	685b      	ldr	r3, [r3, #4]
 8021596:	2b02      	cmp	r3, #2
 8021598:	d003      	beq.n	80215a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 802159a:	687b      	ldr	r3, [r7, #4]
 802159c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 802159e:	2b03      	cmp	r3, #3
 80215a0:	d107      	bne.n	80215b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80215a2:	4b3f      	ldr	r3, [pc, #252]	@ (80216a0 <HAL_RCC_ClockConfig+0x1bc>)
 80215a4:	681b      	ldr	r3, [r3, #0]
 80215a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80215aa:	2b00      	cmp	r3, #0
 80215ac:	d109      	bne.n	80215c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80215ae:	2301      	movs	r3, #1
 80215b0:	e06f      	b.n	8021692 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80215b2:	4b3b      	ldr	r3, [pc, #236]	@ (80216a0 <HAL_RCC_ClockConfig+0x1bc>)
 80215b4:	681b      	ldr	r3, [r3, #0]
 80215b6:	f003 0302 	and.w	r3, r3, #2
 80215ba:	2b00      	cmp	r3, #0
 80215bc:	d101      	bne.n	80215c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80215be:	2301      	movs	r3, #1
 80215c0:	e067      	b.n	8021692 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80215c2:	4b37      	ldr	r3, [pc, #220]	@ (80216a0 <HAL_RCC_ClockConfig+0x1bc>)
 80215c4:	689b      	ldr	r3, [r3, #8]
 80215c6:	f023 0203 	bic.w	r2, r3, #3
 80215ca:	687b      	ldr	r3, [r7, #4]
 80215cc:	685b      	ldr	r3, [r3, #4]
 80215ce:	4934      	ldr	r1, [pc, #208]	@ (80216a0 <HAL_RCC_ClockConfig+0x1bc>)
 80215d0:	4313      	orrs	r3, r2
 80215d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80215d4:	f7ff fa3c 	bl	8020a50 <HAL_GetTick>
 80215d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80215da:	e00a      	b.n	80215f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80215dc:	f7ff fa38 	bl	8020a50 <HAL_GetTick>
 80215e0:	4602      	mov	r2, r0
 80215e2:	68fb      	ldr	r3, [r7, #12]
 80215e4:	1ad3      	subs	r3, r2, r3
 80215e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80215ea:	4293      	cmp	r3, r2
 80215ec:	d901      	bls.n	80215f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80215ee:	2303      	movs	r3, #3
 80215f0:	e04f      	b.n	8021692 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80215f2:	4b2b      	ldr	r3, [pc, #172]	@ (80216a0 <HAL_RCC_ClockConfig+0x1bc>)
 80215f4:	689b      	ldr	r3, [r3, #8]
 80215f6:	f003 020c 	and.w	r2, r3, #12
 80215fa:	687b      	ldr	r3, [r7, #4]
 80215fc:	685b      	ldr	r3, [r3, #4]
 80215fe:	009b      	lsls	r3, r3, #2
 8021600:	429a      	cmp	r2, r3
 8021602:	d1eb      	bne.n	80215dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8021604:	4b25      	ldr	r3, [pc, #148]	@ (802169c <HAL_RCC_ClockConfig+0x1b8>)
 8021606:	681b      	ldr	r3, [r3, #0]
 8021608:	f003 030f 	and.w	r3, r3, #15
 802160c:	683a      	ldr	r2, [r7, #0]
 802160e:	429a      	cmp	r2, r3
 8021610:	d20c      	bcs.n	802162c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8021612:	4b22      	ldr	r3, [pc, #136]	@ (802169c <HAL_RCC_ClockConfig+0x1b8>)
 8021614:	683a      	ldr	r2, [r7, #0]
 8021616:	b2d2      	uxtb	r2, r2
 8021618:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 802161a:	4b20      	ldr	r3, [pc, #128]	@ (802169c <HAL_RCC_ClockConfig+0x1b8>)
 802161c:	681b      	ldr	r3, [r3, #0]
 802161e:	f003 030f 	and.w	r3, r3, #15
 8021622:	683a      	ldr	r2, [r7, #0]
 8021624:	429a      	cmp	r2, r3
 8021626:	d001      	beq.n	802162c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8021628:	2301      	movs	r3, #1
 802162a:	e032      	b.n	8021692 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 802162c:	687b      	ldr	r3, [r7, #4]
 802162e:	681b      	ldr	r3, [r3, #0]
 8021630:	f003 0304 	and.w	r3, r3, #4
 8021634:	2b00      	cmp	r3, #0
 8021636:	d008      	beq.n	802164a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8021638:	4b19      	ldr	r3, [pc, #100]	@ (80216a0 <HAL_RCC_ClockConfig+0x1bc>)
 802163a:	689b      	ldr	r3, [r3, #8]
 802163c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8021640:	687b      	ldr	r3, [r7, #4]
 8021642:	68db      	ldr	r3, [r3, #12]
 8021644:	4916      	ldr	r1, [pc, #88]	@ (80216a0 <HAL_RCC_ClockConfig+0x1bc>)
 8021646:	4313      	orrs	r3, r2
 8021648:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 802164a:	687b      	ldr	r3, [r7, #4]
 802164c:	681b      	ldr	r3, [r3, #0]
 802164e:	f003 0308 	and.w	r3, r3, #8
 8021652:	2b00      	cmp	r3, #0
 8021654:	d009      	beq.n	802166a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8021656:	4b12      	ldr	r3, [pc, #72]	@ (80216a0 <HAL_RCC_ClockConfig+0x1bc>)
 8021658:	689b      	ldr	r3, [r3, #8]
 802165a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 802165e:	687b      	ldr	r3, [r7, #4]
 8021660:	691b      	ldr	r3, [r3, #16]
 8021662:	00db      	lsls	r3, r3, #3
 8021664:	490e      	ldr	r1, [pc, #56]	@ (80216a0 <HAL_RCC_ClockConfig+0x1bc>)
 8021666:	4313      	orrs	r3, r2
 8021668:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 802166a:	f000 f821 	bl	80216b0 <HAL_RCC_GetSysClockFreq>
 802166e:	4602      	mov	r2, r0
 8021670:	4b0b      	ldr	r3, [pc, #44]	@ (80216a0 <HAL_RCC_ClockConfig+0x1bc>)
 8021672:	689b      	ldr	r3, [r3, #8]
 8021674:	091b      	lsrs	r3, r3, #4
 8021676:	f003 030f 	and.w	r3, r3, #15
 802167a:	490a      	ldr	r1, [pc, #40]	@ (80216a4 <HAL_RCC_ClockConfig+0x1c0>)
 802167c:	5ccb      	ldrb	r3, [r1, r3]
 802167e:	fa22 f303 	lsr.w	r3, r2, r3
 8021682:	4a09      	ldr	r2, [pc, #36]	@ (80216a8 <HAL_RCC_ClockConfig+0x1c4>)
 8021684:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8021686:	4b09      	ldr	r3, [pc, #36]	@ (80216ac <HAL_RCC_ClockConfig+0x1c8>)
 8021688:	681b      	ldr	r3, [r3, #0]
 802168a:	4618      	mov	r0, r3
 802168c:	f7ff f9b0 	bl	80209f0 <HAL_InitTick>

  return HAL_OK;
 8021690:	2300      	movs	r3, #0
}
 8021692:	4618      	mov	r0, r3
 8021694:	3710      	adds	r7, #16
 8021696:	46bd      	mov	sp, r7
 8021698:	bd80      	pop	{r7, pc}
 802169a:	bf00      	nop
 802169c:	40023c00 	.word	0x40023c00
 80216a0:	40023800 	.word	0x40023800
 80216a4:	08021f18 	.word	0x08021f18
 80216a8:	20000000 	.word	0x20000000
 80216ac:	20000004 	.word	0x20000004

080216b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80216b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80216b4:	b094      	sub	sp, #80	@ 0x50
 80216b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80216b8:	2300      	movs	r3, #0
 80216ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80216bc:	2300      	movs	r3, #0
 80216be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80216c0:	2300      	movs	r3, #0
 80216c2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80216c4:	2300      	movs	r3, #0
 80216c6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80216c8:	4b79      	ldr	r3, [pc, #484]	@ (80218b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80216ca:	689b      	ldr	r3, [r3, #8]
 80216cc:	f003 030c 	and.w	r3, r3, #12
 80216d0:	2b08      	cmp	r3, #8
 80216d2:	d00d      	beq.n	80216f0 <HAL_RCC_GetSysClockFreq+0x40>
 80216d4:	2b08      	cmp	r3, #8
 80216d6:	f200 80e1 	bhi.w	802189c <HAL_RCC_GetSysClockFreq+0x1ec>
 80216da:	2b00      	cmp	r3, #0
 80216dc:	d002      	beq.n	80216e4 <HAL_RCC_GetSysClockFreq+0x34>
 80216de:	2b04      	cmp	r3, #4
 80216e0:	d003      	beq.n	80216ea <HAL_RCC_GetSysClockFreq+0x3a>
 80216e2:	e0db      	b.n	802189c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80216e4:	4b73      	ldr	r3, [pc, #460]	@ (80218b4 <HAL_RCC_GetSysClockFreq+0x204>)
 80216e6:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80216e8:	e0db      	b.n	80218a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80216ea:	4b73      	ldr	r3, [pc, #460]	@ (80218b8 <HAL_RCC_GetSysClockFreq+0x208>)
 80216ec:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80216ee:	e0d8      	b.n	80218a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80216f0:	4b6f      	ldr	r3, [pc, #444]	@ (80218b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80216f2:	685b      	ldr	r3, [r3, #4]
 80216f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80216f8:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80216fa:	4b6d      	ldr	r3, [pc, #436]	@ (80218b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80216fc:	685b      	ldr	r3, [r3, #4]
 80216fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8021702:	2b00      	cmp	r3, #0
 8021704:	d063      	beq.n	80217ce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8021706:	4b6a      	ldr	r3, [pc, #424]	@ (80218b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8021708:	685b      	ldr	r3, [r3, #4]
 802170a:	099b      	lsrs	r3, r3, #6
 802170c:	2200      	movs	r2, #0
 802170e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8021710:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8021712:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021714:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8021718:	633b      	str	r3, [r7, #48]	@ 0x30
 802171a:	2300      	movs	r3, #0
 802171c:	637b      	str	r3, [r7, #52]	@ 0x34
 802171e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8021722:	4622      	mov	r2, r4
 8021724:	462b      	mov	r3, r5
 8021726:	f04f 0000 	mov.w	r0, #0
 802172a:	f04f 0100 	mov.w	r1, #0
 802172e:	0159      	lsls	r1, r3, #5
 8021730:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8021734:	0150      	lsls	r0, r2, #5
 8021736:	4602      	mov	r2, r0
 8021738:	460b      	mov	r3, r1
 802173a:	4621      	mov	r1, r4
 802173c:	1a51      	subs	r1, r2, r1
 802173e:	6139      	str	r1, [r7, #16]
 8021740:	4629      	mov	r1, r5
 8021742:	eb63 0301 	sbc.w	r3, r3, r1
 8021746:	617b      	str	r3, [r7, #20]
 8021748:	f04f 0200 	mov.w	r2, #0
 802174c:	f04f 0300 	mov.w	r3, #0
 8021750:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8021754:	4659      	mov	r1, fp
 8021756:	018b      	lsls	r3, r1, #6
 8021758:	4651      	mov	r1, sl
 802175a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 802175e:	4651      	mov	r1, sl
 8021760:	018a      	lsls	r2, r1, #6
 8021762:	4651      	mov	r1, sl
 8021764:	ebb2 0801 	subs.w	r8, r2, r1
 8021768:	4659      	mov	r1, fp
 802176a:	eb63 0901 	sbc.w	r9, r3, r1
 802176e:	f04f 0200 	mov.w	r2, #0
 8021772:	f04f 0300 	mov.w	r3, #0
 8021776:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 802177a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 802177e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8021782:	4690      	mov	r8, r2
 8021784:	4699      	mov	r9, r3
 8021786:	4623      	mov	r3, r4
 8021788:	eb18 0303 	adds.w	r3, r8, r3
 802178c:	60bb      	str	r3, [r7, #8]
 802178e:	462b      	mov	r3, r5
 8021790:	eb49 0303 	adc.w	r3, r9, r3
 8021794:	60fb      	str	r3, [r7, #12]
 8021796:	f04f 0200 	mov.w	r2, #0
 802179a:	f04f 0300 	mov.w	r3, #0
 802179e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80217a2:	4629      	mov	r1, r5
 80217a4:	024b      	lsls	r3, r1, #9
 80217a6:	4621      	mov	r1, r4
 80217a8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80217ac:	4621      	mov	r1, r4
 80217ae:	024a      	lsls	r2, r1, #9
 80217b0:	4610      	mov	r0, r2
 80217b2:	4619      	mov	r1, r3
 80217b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80217b6:	2200      	movs	r2, #0
 80217b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80217ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80217bc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80217c0:	f7fe fd14 	bl	80201ec <__aeabi_uldivmod>
 80217c4:	4602      	mov	r2, r0
 80217c6:	460b      	mov	r3, r1
 80217c8:	4613      	mov	r3, r2
 80217ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80217cc:	e058      	b.n	8021880 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80217ce:	4b38      	ldr	r3, [pc, #224]	@ (80218b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80217d0:	685b      	ldr	r3, [r3, #4]
 80217d2:	099b      	lsrs	r3, r3, #6
 80217d4:	2200      	movs	r2, #0
 80217d6:	4618      	mov	r0, r3
 80217d8:	4611      	mov	r1, r2
 80217da:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80217de:	623b      	str	r3, [r7, #32]
 80217e0:	2300      	movs	r3, #0
 80217e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80217e4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80217e8:	4642      	mov	r2, r8
 80217ea:	464b      	mov	r3, r9
 80217ec:	f04f 0000 	mov.w	r0, #0
 80217f0:	f04f 0100 	mov.w	r1, #0
 80217f4:	0159      	lsls	r1, r3, #5
 80217f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80217fa:	0150      	lsls	r0, r2, #5
 80217fc:	4602      	mov	r2, r0
 80217fe:	460b      	mov	r3, r1
 8021800:	4641      	mov	r1, r8
 8021802:	ebb2 0a01 	subs.w	sl, r2, r1
 8021806:	4649      	mov	r1, r9
 8021808:	eb63 0b01 	sbc.w	fp, r3, r1
 802180c:	f04f 0200 	mov.w	r2, #0
 8021810:	f04f 0300 	mov.w	r3, #0
 8021814:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8021818:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 802181c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8021820:	ebb2 040a 	subs.w	r4, r2, sl
 8021824:	eb63 050b 	sbc.w	r5, r3, fp
 8021828:	f04f 0200 	mov.w	r2, #0
 802182c:	f04f 0300 	mov.w	r3, #0
 8021830:	00eb      	lsls	r3, r5, #3
 8021832:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8021836:	00e2      	lsls	r2, r4, #3
 8021838:	4614      	mov	r4, r2
 802183a:	461d      	mov	r5, r3
 802183c:	4643      	mov	r3, r8
 802183e:	18e3      	adds	r3, r4, r3
 8021840:	603b      	str	r3, [r7, #0]
 8021842:	464b      	mov	r3, r9
 8021844:	eb45 0303 	adc.w	r3, r5, r3
 8021848:	607b      	str	r3, [r7, #4]
 802184a:	f04f 0200 	mov.w	r2, #0
 802184e:	f04f 0300 	mov.w	r3, #0
 8021852:	e9d7 4500 	ldrd	r4, r5, [r7]
 8021856:	4629      	mov	r1, r5
 8021858:	028b      	lsls	r3, r1, #10
 802185a:	4621      	mov	r1, r4
 802185c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8021860:	4621      	mov	r1, r4
 8021862:	028a      	lsls	r2, r1, #10
 8021864:	4610      	mov	r0, r2
 8021866:	4619      	mov	r1, r3
 8021868:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 802186a:	2200      	movs	r2, #0
 802186c:	61bb      	str	r3, [r7, #24]
 802186e:	61fa      	str	r2, [r7, #28]
 8021870:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8021874:	f7fe fcba 	bl	80201ec <__aeabi_uldivmod>
 8021878:	4602      	mov	r2, r0
 802187a:	460b      	mov	r3, r1
 802187c:	4613      	mov	r3, r2
 802187e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8021880:	4b0b      	ldr	r3, [pc, #44]	@ (80218b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8021882:	685b      	ldr	r3, [r3, #4]
 8021884:	0c1b      	lsrs	r3, r3, #16
 8021886:	f003 0303 	and.w	r3, r3, #3
 802188a:	3301      	adds	r3, #1
 802188c:	005b      	lsls	r3, r3, #1
 802188e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8021890:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8021892:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8021894:	fbb2 f3f3 	udiv	r3, r2, r3
 8021898:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 802189a:	e002      	b.n	80218a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 802189c:	4b05      	ldr	r3, [pc, #20]	@ (80218b4 <HAL_RCC_GetSysClockFreq+0x204>)
 802189e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80218a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80218a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80218a4:	4618      	mov	r0, r3
 80218a6:	3750      	adds	r7, #80	@ 0x50
 80218a8:	46bd      	mov	sp, r7
 80218aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80218ae:	bf00      	nop
 80218b0:	40023800 	.word	0x40023800
 80218b4:	00f42400 	.word	0x00f42400
 80218b8:	007a1200 	.word	0x007a1200

080218bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80218bc:	b480      	push	{r7}
 80218be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80218c0:	4b03      	ldr	r3, [pc, #12]	@ (80218d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80218c2:	681b      	ldr	r3, [r3, #0]
}
 80218c4:	4618      	mov	r0, r3
 80218c6:	46bd      	mov	sp, r7
 80218c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80218cc:	4770      	bx	lr
 80218ce:	bf00      	nop
 80218d0:	20000000 	.word	0x20000000

080218d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80218d4:	b580      	push	{r7, lr}
 80218d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80218d8:	f7ff fff0 	bl	80218bc <HAL_RCC_GetHCLKFreq>
 80218dc:	4602      	mov	r2, r0
 80218de:	4b05      	ldr	r3, [pc, #20]	@ (80218f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80218e0:	689b      	ldr	r3, [r3, #8]
 80218e2:	0a9b      	lsrs	r3, r3, #10
 80218e4:	f003 0307 	and.w	r3, r3, #7
 80218e8:	4903      	ldr	r1, [pc, #12]	@ (80218f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80218ea:	5ccb      	ldrb	r3, [r1, r3]
 80218ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80218f0:	4618      	mov	r0, r3
 80218f2:	bd80      	pop	{r7, pc}
 80218f4:	40023800 	.word	0x40023800
 80218f8:	08021f28 	.word	0x08021f28

080218fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80218fc:	b580      	push	{r7, lr}
 80218fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8021900:	f7ff ffdc 	bl	80218bc <HAL_RCC_GetHCLKFreq>
 8021904:	4602      	mov	r2, r0
 8021906:	4b05      	ldr	r3, [pc, #20]	@ (802191c <HAL_RCC_GetPCLK2Freq+0x20>)
 8021908:	689b      	ldr	r3, [r3, #8]
 802190a:	0b5b      	lsrs	r3, r3, #13
 802190c:	f003 0307 	and.w	r3, r3, #7
 8021910:	4903      	ldr	r1, [pc, #12]	@ (8021920 <HAL_RCC_GetPCLK2Freq+0x24>)
 8021912:	5ccb      	ldrb	r3, [r1, r3]
 8021914:	fa22 f303 	lsr.w	r3, r2, r3
}
 8021918:	4618      	mov	r0, r3
 802191a:	bd80      	pop	{r7, pc}
 802191c:	40023800 	.word	0x40023800
 8021920:	08021f28 	.word	0x08021f28

08021924 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8021924:	b580      	push	{r7, lr}
 8021926:	b082      	sub	sp, #8
 8021928:	af00      	add	r7, sp, #0
 802192a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 802192c:	687b      	ldr	r3, [r7, #4]
 802192e:	2b00      	cmp	r3, #0
 8021930:	d101      	bne.n	8021936 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8021932:	2301      	movs	r3, #1
 8021934:	e03f      	b.n	80219b6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8021936:	687b      	ldr	r3, [r7, #4]
 8021938:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 802193c:	b2db      	uxtb	r3, r3
 802193e:	2b00      	cmp	r3, #0
 8021940:	d106      	bne.n	8021950 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8021942:	687b      	ldr	r3, [r7, #4]
 8021944:	2200      	movs	r2, #0
 8021946:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 802194a:	6878      	ldr	r0, [r7, #4]
 802194c:	f7fe ff76 	bl	802083c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8021950:	687b      	ldr	r3, [r7, #4]
 8021952:	2224      	movs	r2, #36	@ 0x24
 8021954:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8021958:	687b      	ldr	r3, [r7, #4]
 802195a:	681b      	ldr	r3, [r3, #0]
 802195c:	68da      	ldr	r2, [r3, #12]
 802195e:	687b      	ldr	r3, [r7, #4]
 8021960:	681b      	ldr	r3, [r3, #0]
 8021962:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8021966:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8021968:	6878      	ldr	r0, [r7, #4]
 802196a:	f000 f829 	bl	80219c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 802196e:	687b      	ldr	r3, [r7, #4]
 8021970:	681b      	ldr	r3, [r3, #0]
 8021972:	691a      	ldr	r2, [r3, #16]
 8021974:	687b      	ldr	r3, [r7, #4]
 8021976:	681b      	ldr	r3, [r3, #0]
 8021978:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 802197c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 802197e:	687b      	ldr	r3, [r7, #4]
 8021980:	681b      	ldr	r3, [r3, #0]
 8021982:	695a      	ldr	r2, [r3, #20]
 8021984:	687b      	ldr	r3, [r7, #4]
 8021986:	681b      	ldr	r3, [r3, #0]
 8021988:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 802198c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 802198e:	687b      	ldr	r3, [r7, #4]
 8021990:	681b      	ldr	r3, [r3, #0]
 8021992:	68da      	ldr	r2, [r3, #12]
 8021994:	687b      	ldr	r3, [r7, #4]
 8021996:	681b      	ldr	r3, [r3, #0]
 8021998:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 802199c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 802199e:	687b      	ldr	r3, [r7, #4]
 80219a0:	2200      	movs	r2, #0
 80219a2:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 80219a4:	687b      	ldr	r3, [r7, #4]
 80219a6:	2220      	movs	r2, #32
 80219a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80219ac:	687b      	ldr	r3, [r7, #4]
 80219ae:	2220      	movs	r2, #32
 80219b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80219b4:	2300      	movs	r3, #0
}
 80219b6:	4618      	mov	r0, r3
 80219b8:	3708      	adds	r7, #8
 80219ba:	46bd      	mov	sp, r7
 80219bc:	bd80      	pop	{r7, pc}
	...

080219c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80219c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80219c4:	b0c0      	sub	sp, #256	@ 0x100
 80219c6:	af00      	add	r7, sp, #0
 80219c8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80219cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80219d0:	681b      	ldr	r3, [r3, #0]
 80219d2:	691b      	ldr	r3, [r3, #16]
 80219d4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80219d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80219dc:	68d9      	ldr	r1, [r3, #12]
 80219de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80219e2:	681a      	ldr	r2, [r3, #0]
 80219e4:	ea40 0301 	orr.w	r3, r0, r1
 80219e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80219ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80219ee:	689a      	ldr	r2, [r3, #8]
 80219f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80219f4:	691b      	ldr	r3, [r3, #16]
 80219f6:	431a      	orrs	r2, r3
 80219f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80219fc:	695b      	ldr	r3, [r3, #20]
 80219fe:	431a      	orrs	r2, r3
 8021a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8021a04:	69db      	ldr	r3, [r3, #28]
 8021a06:	4313      	orrs	r3, r2
 8021a08:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8021a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8021a10:	681b      	ldr	r3, [r3, #0]
 8021a12:	68db      	ldr	r3, [r3, #12]
 8021a14:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8021a18:	f021 010c 	bic.w	r1, r1, #12
 8021a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8021a20:	681a      	ldr	r2, [r3, #0]
 8021a22:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8021a26:	430b      	orrs	r3, r1
 8021a28:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8021a2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8021a2e:	681b      	ldr	r3, [r3, #0]
 8021a30:	695b      	ldr	r3, [r3, #20]
 8021a32:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8021a36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8021a3a:	6999      	ldr	r1, [r3, #24]
 8021a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8021a40:	681a      	ldr	r2, [r3, #0]
 8021a42:	ea40 0301 	orr.w	r3, r0, r1
 8021a46:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8021a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8021a4c:	681a      	ldr	r2, [r3, #0]
 8021a4e:	4b8f      	ldr	r3, [pc, #572]	@ (8021c8c <UART_SetConfig+0x2cc>)
 8021a50:	429a      	cmp	r2, r3
 8021a52:	d005      	beq.n	8021a60 <UART_SetConfig+0xa0>
 8021a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8021a58:	681a      	ldr	r2, [r3, #0]
 8021a5a:	4b8d      	ldr	r3, [pc, #564]	@ (8021c90 <UART_SetConfig+0x2d0>)
 8021a5c:	429a      	cmp	r2, r3
 8021a5e:	d104      	bne.n	8021a6a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8021a60:	f7ff ff4c 	bl	80218fc <HAL_RCC_GetPCLK2Freq>
 8021a64:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8021a68:	e003      	b.n	8021a72 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8021a6a:	f7ff ff33 	bl	80218d4 <HAL_RCC_GetPCLK1Freq>
 8021a6e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8021a72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8021a76:	69db      	ldr	r3, [r3, #28]
 8021a78:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8021a7c:	f040 810c 	bne.w	8021c98 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8021a80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8021a84:	2200      	movs	r2, #0
 8021a86:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8021a8a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8021a8e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8021a92:	4622      	mov	r2, r4
 8021a94:	462b      	mov	r3, r5
 8021a96:	1891      	adds	r1, r2, r2
 8021a98:	65b9      	str	r1, [r7, #88]	@ 0x58
 8021a9a:	415b      	adcs	r3, r3
 8021a9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8021a9e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8021aa2:	4621      	mov	r1, r4
 8021aa4:	eb12 0801 	adds.w	r8, r2, r1
 8021aa8:	4629      	mov	r1, r5
 8021aaa:	eb43 0901 	adc.w	r9, r3, r1
 8021aae:	f04f 0200 	mov.w	r2, #0
 8021ab2:	f04f 0300 	mov.w	r3, #0
 8021ab6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8021aba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8021abe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8021ac2:	4690      	mov	r8, r2
 8021ac4:	4699      	mov	r9, r3
 8021ac6:	4623      	mov	r3, r4
 8021ac8:	eb18 0303 	adds.w	r3, r8, r3
 8021acc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8021ad0:	462b      	mov	r3, r5
 8021ad2:	eb49 0303 	adc.w	r3, r9, r3
 8021ad6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8021ada:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8021ade:	685b      	ldr	r3, [r3, #4]
 8021ae0:	2200      	movs	r2, #0
 8021ae2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8021ae6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8021aea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8021aee:	460b      	mov	r3, r1
 8021af0:	18db      	adds	r3, r3, r3
 8021af2:	653b      	str	r3, [r7, #80]	@ 0x50
 8021af4:	4613      	mov	r3, r2
 8021af6:	eb42 0303 	adc.w	r3, r2, r3
 8021afa:	657b      	str	r3, [r7, #84]	@ 0x54
 8021afc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8021b00:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8021b04:	f7fe fb72 	bl	80201ec <__aeabi_uldivmod>
 8021b08:	4602      	mov	r2, r0
 8021b0a:	460b      	mov	r3, r1
 8021b0c:	4b61      	ldr	r3, [pc, #388]	@ (8021c94 <UART_SetConfig+0x2d4>)
 8021b0e:	fba3 2302 	umull	r2, r3, r3, r2
 8021b12:	095b      	lsrs	r3, r3, #5
 8021b14:	011c      	lsls	r4, r3, #4
 8021b16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8021b1a:	2200      	movs	r2, #0
 8021b1c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8021b20:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8021b24:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8021b28:	4642      	mov	r2, r8
 8021b2a:	464b      	mov	r3, r9
 8021b2c:	1891      	adds	r1, r2, r2
 8021b2e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8021b30:	415b      	adcs	r3, r3
 8021b32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8021b34:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8021b38:	4641      	mov	r1, r8
 8021b3a:	eb12 0a01 	adds.w	sl, r2, r1
 8021b3e:	4649      	mov	r1, r9
 8021b40:	eb43 0b01 	adc.w	fp, r3, r1
 8021b44:	f04f 0200 	mov.w	r2, #0
 8021b48:	f04f 0300 	mov.w	r3, #0
 8021b4c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8021b50:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8021b54:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8021b58:	4692      	mov	sl, r2
 8021b5a:	469b      	mov	fp, r3
 8021b5c:	4643      	mov	r3, r8
 8021b5e:	eb1a 0303 	adds.w	r3, sl, r3
 8021b62:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8021b66:	464b      	mov	r3, r9
 8021b68:	eb4b 0303 	adc.w	r3, fp, r3
 8021b6c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8021b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8021b74:	685b      	ldr	r3, [r3, #4]
 8021b76:	2200      	movs	r2, #0
 8021b78:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8021b7c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8021b80:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8021b84:	460b      	mov	r3, r1
 8021b86:	18db      	adds	r3, r3, r3
 8021b88:	643b      	str	r3, [r7, #64]	@ 0x40
 8021b8a:	4613      	mov	r3, r2
 8021b8c:	eb42 0303 	adc.w	r3, r2, r3
 8021b90:	647b      	str	r3, [r7, #68]	@ 0x44
 8021b92:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8021b96:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8021b9a:	f7fe fb27 	bl	80201ec <__aeabi_uldivmod>
 8021b9e:	4602      	mov	r2, r0
 8021ba0:	460b      	mov	r3, r1
 8021ba2:	4611      	mov	r1, r2
 8021ba4:	4b3b      	ldr	r3, [pc, #236]	@ (8021c94 <UART_SetConfig+0x2d4>)
 8021ba6:	fba3 2301 	umull	r2, r3, r3, r1
 8021baa:	095b      	lsrs	r3, r3, #5
 8021bac:	2264      	movs	r2, #100	@ 0x64
 8021bae:	fb02 f303 	mul.w	r3, r2, r3
 8021bb2:	1acb      	subs	r3, r1, r3
 8021bb4:	00db      	lsls	r3, r3, #3
 8021bb6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8021bba:	4b36      	ldr	r3, [pc, #216]	@ (8021c94 <UART_SetConfig+0x2d4>)
 8021bbc:	fba3 2302 	umull	r2, r3, r3, r2
 8021bc0:	095b      	lsrs	r3, r3, #5
 8021bc2:	005b      	lsls	r3, r3, #1
 8021bc4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8021bc8:	441c      	add	r4, r3
 8021bca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8021bce:	2200      	movs	r2, #0
 8021bd0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8021bd4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8021bd8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8021bdc:	4642      	mov	r2, r8
 8021bde:	464b      	mov	r3, r9
 8021be0:	1891      	adds	r1, r2, r2
 8021be2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8021be4:	415b      	adcs	r3, r3
 8021be6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8021be8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8021bec:	4641      	mov	r1, r8
 8021bee:	1851      	adds	r1, r2, r1
 8021bf0:	6339      	str	r1, [r7, #48]	@ 0x30
 8021bf2:	4649      	mov	r1, r9
 8021bf4:	414b      	adcs	r3, r1
 8021bf6:	637b      	str	r3, [r7, #52]	@ 0x34
 8021bf8:	f04f 0200 	mov.w	r2, #0
 8021bfc:	f04f 0300 	mov.w	r3, #0
 8021c00:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8021c04:	4659      	mov	r1, fp
 8021c06:	00cb      	lsls	r3, r1, #3
 8021c08:	4651      	mov	r1, sl
 8021c0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8021c0e:	4651      	mov	r1, sl
 8021c10:	00ca      	lsls	r2, r1, #3
 8021c12:	4610      	mov	r0, r2
 8021c14:	4619      	mov	r1, r3
 8021c16:	4603      	mov	r3, r0
 8021c18:	4642      	mov	r2, r8
 8021c1a:	189b      	adds	r3, r3, r2
 8021c1c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8021c20:	464b      	mov	r3, r9
 8021c22:	460a      	mov	r2, r1
 8021c24:	eb42 0303 	adc.w	r3, r2, r3
 8021c28:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8021c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8021c30:	685b      	ldr	r3, [r3, #4]
 8021c32:	2200      	movs	r2, #0
 8021c34:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8021c38:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8021c3c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8021c40:	460b      	mov	r3, r1
 8021c42:	18db      	adds	r3, r3, r3
 8021c44:	62bb      	str	r3, [r7, #40]	@ 0x28
 8021c46:	4613      	mov	r3, r2
 8021c48:	eb42 0303 	adc.w	r3, r2, r3
 8021c4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8021c4e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8021c52:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8021c56:	f7fe fac9 	bl	80201ec <__aeabi_uldivmod>
 8021c5a:	4602      	mov	r2, r0
 8021c5c:	460b      	mov	r3, r1
 8021c5e:	4b0d      	ldr	r3, [pc, #52]	@ (8021c94 <UART_SetConfig+0x2d4>)
 8021c60:	fba3 1302 	umull	r1, r3, r3, r2
 8021c64:	095b      	lsrs	r3, r3, #5
 8021c66:	2164      	movs	r1, #100	@ 0x64
 8021c68:	fb01 f303 	mul.w	r3, r1, r3
 8021c6c:	1ad3      	subs	r3, r2, r3
 8021c6e:	00db      	lsls	r3, r3, #3
 8021c70:	3332      	adds	r3, #50	@ 0x32
 8021c72:	4a08      	ldr	r2, [pc, #32]	@ (8021c94 <UART_SetConfig+0x2d4>)
 8021c74:	fba2 2303 	umull	r2, r3, r2, r3
 8021c78:	095b      	lsrs	r3, r3, #5
 8021c7a:	f003 0207 	and.w	r2, r3, #7
 8021c7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8021c82:	681b      	ldr	r3, [r3, #0]
 8021c84:	4422      	add	r2, r4
 8021c86:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8021c88:	e106      	b.n	8021e98 <UART_SetConfig+0x4d8>
 8021c8a:	bf00      	nop
 8021c8c:	40011000 	.word	0x40011000
 8021c90:	40011400 	.word	0x40011400
 8021c94:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8021c98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8021c9c:	2200      	movs	r2, #0
 8021c9e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8021ca2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8021ca6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8021caa:	4642      	mov	r2, r8
 8021cac:	464b      	mov	r3, r9
 8021cae:	1891      	adds	r1, r2, r2
 8021cb0:	6239      	str	r1, [r7, #32]
 8021cb2:	415b      	adcs	r3, r3
 8021cb4:	627b      	str	r3, [r7, #36]	@ 0x24
 8021cb6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8021cba:	4641      	mov	r1, r8
 8021cbc:	1854      	adds	r4, r2, r1
 8021cbe:	4649      	mov	r1, r9
 8021cc0:	eb43 0501 	adc.w	r5, r3, r1
 8021cc4:	f04f 0200 	mov.w	r2, #0
 8021cc8:	f04f 0300 	mov.w	r3, #0
 8021ccc:	00eb      	lsls	r3, r5, #3
 8021cce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8021cd2:	00e2      	lsls	r2, r4, #3
 8021cd4:	4614      	mov	r4, r2
 8021cd6:	461d      	mov	r5, r3
 8021cd8:	4643      	mov	r3, r8
 8021cda:	18e3      	adds	r3, r4, r3
 8021cdc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8021ce0:	464b      	mov	r3, r9
 8021ce2:	eb45 0303 	adc.w	r3, r5, r3
 8021ce6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8021cea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8021cee:	685b      	ldr	r3, [r3, #4]
 8021cf0:	2200      	movs	r2, #0
 8021cf2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8021cf6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8021cfa:	f04f 0200 	mov.w	r2, #0
 8021cfe:	f04f 0300 	mov.w	r3, #0
 8021d02:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8021d06:	4629      	mov	r1, r5
 8021d08:	008b      	lsls	r3, r1, #2
 8021d0a:	4621      	mov	r1, r4
 8021d0c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8021d10:	4621      	mov	r1, r4
 8021d12:	008a      	lsls	r2, r1, #2
 8021d14:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8021d18:	f7fe fa68 	bl	80201ec <__aeabi_uldivmod>
 8021d1c:	4602      	mov	r2, r0
 8021d1e:	460b      	mov	r3, r1
 8021d20:	4b60      	ldr	r3, [pc, #384]	@ (8021ea4 <UART_SetConfig+0x4e4>)
 8021d22:	fba3 2302 	umull	r2, r3, r3, r2
 8021d26:	095b      	lsrs	r3, r3, #5
 8021d28:	011c      	lsls	r4, r3, #4
 8021d2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8021d2e:	2200      	movs	r2, #0
 8021d30:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8021d34:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8021d38:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8021d3c:	4642      	mov	r2, r8
 8021d3e:	464b      	mov	r3, r9
 8021d40:	1891      	adds	r1, r2, r2
 8021d42:	61b9      	str	r1, [r7, #24]
 8021d44:	415b      	adcs	r3, r3
 8021d46:	61fb      	str	r3, [r7, #28]
 8021d48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8021d4c:	4641      	mov	r1, r8
 8021d4e:	1851      	adds	r1, r2, r1
 8021d50:	6139      	str	r1, [r7, #16]
 8021d52:	4649      	mov	r1, r9
 8021d54:	414b      	adcs	r3, r1
 8021d56:	617b      	str	r3, [r7, #20]
 8021d58:	f04f 0200 	mov.w	r2, #0
 8021d5c:	f04f 0300 	mov.w	r3, #0
 8021d60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8021d64:	4659      	mov	r1, fp
 8021d66:	00cb      	lsls	r3, r1, #3
 8021d68:	4651      	mov	r1, sl
 8021d6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8021d6e:	4651      	mov	r1, sl
 8021d70:	00ca      	lsls	r2, r1, #3
 8021d72:	4610      	mov	r0, r2
 8021d74:	4619      	mov	r1, r3
 8021d76:	4603      	mov	r3, r0
 8021d78:	4642      	mov	r2, r8
 8021d7a:	189b      	adds	r3, r3, r2
 8021d7c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8021d80:	464b      	mov	r3, r9
 8021d82:	460a      	mov	r2, r1
 8021d84:	eb42 0303 	adc.w	r3, r2, r3
 8021d88:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8021d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8021d90:	685b      	ldr	r3, [r3, #4]
 8021d92:	2200      	movs	r2, #0
 8021d94:	67bb      	str	r3, [r7, #120]	@ 0x78
 8021d96:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8021d98:	f04f 0200 	mov.w	r2, #0
 8021d9c:	f04f 0300 	mov.w	r3, #0
 8021da0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8021da4:	4649      	mov	r1, r9
 8021da6:	008b      	lsls	r3, r1, #2
 8021da8:	4641      	mov	r1, r8
 8021daa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8021dae:	4641      	mov	r1, r8
 8021db0:	008a      	lsls	r2, r1, #2
 8021db2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8021db6:	f7fe fa19 	bl	80201ec <__aeabi_uldivmod>
 8021dba:	4602      	mov	r2, r0
 8021dbc:	460b      	mov	r3, r1
 8021dbe:	4611      	mov	r1, r2
 8021dc0:	4b38      	ldr	r3, [pc, #224]	@ (8021ea4 <UART_SetConfig+0x4e4>)
 8021dc2:	fba3 2301 	umull	r2, r3, r3, r1
 8021dc6:	095b      	lsrs	r3, r3, #5
 8021dc8:	2264      	movs	r2, #100	@ 0x64
 8021dca:	fb02 f303 	mul.w	r3, r2, r3
 8021dce:	1acb      	subs	r3, r1, r3
 8021dd0:	011b      	lsls	r3, r3, #4
 8021dd2:	3332      	adds	r3, #50	@ 0x32
 8021dd4:	4a33      	ldr	r2, [pc, #204]	@ (8021ea4 <UART_SetConfig+0x4e4>)
 8021dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8021dda:	095b      	lsrs	r3, r3, #5
 8021ddc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8021de0:	441c      	add	r4, r3
 8021de2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8021de6:	2200      	movs	r2, #0
 8021de8:	673b      	str	r3, [r7, #112]	@ 0x70
 8021dea:	677a      	str	r2, [r7, #116]	@ 0x74
 8021dec:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8021df0:	4642      	mov	r2, r8
 8021df2:	464b      	mov	r3, r9
 8021df4:	1891      	adds	r1, r2, r2
 8021df6:	60b9      	str	r1, [r7, #8]
 8021df8:	415b      	adcs	r3, r3
 8021dfa:	60fb      	str	r3, [r7, #12]
 8021dfc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8021e00:	4641      	mov	r1, r8
 8021e02:	1851      	adds	r1, r2, r1
 8021e04:	6039      	str	r1, [r7, #0]
 8021e06:	4649      	mov	r1, r9
 8021e08:	414b      	adcs	r3, r1
 8021e0a:	607b      	str	r3, [r7, #4]
 8021e0c:	f04f 0200 	mov.w	r2, #0
 8021e10:	f04f 0300 	mov.w	r3, #0
 8021e14:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8021e18:	4659      	mov	r1, fp
 8021e1a:	00cb      	lsls	r3, r1, #3
 8021e1c:	4651      	mov	r1, sl
 8021e1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8021e22:	4651      	mov	r1, sl
 8021e24:	00ca      	lsls	r2, r1, #3
 8021e26:	4610      	mov	r0, r2
 8021e28:	4619      	mov	r1, r3
 8021e2a:	4603      	mov	r3, r0
 8021e2c:	4642      	mov	r2, r8
 8021e2e:	189b      	adds	r3, r3, r2
 8021e30:	66bb      	str	r3, [r7, #104]	@ 0x68
 8021e32:	464b      	mov	r3, r9
 8021e34:	460a      	mov	r2, r1
 8021e36:	eb42 0303 	adc.w	r3, r2, r3
 8021e3a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8021e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8021e40:	685b      	ldr	r3, [r3, #4]
 8021e42:	2200      	movs	r2, #0
 8021e44:	663b      	str	r3, [r7, #96]	@ 0x60
 8021e46:	667a      	str	r2, [r7, #100]	@ 0x64
 8021e48:	f04f 0200 	mov.w	r2, #0
 8021e4c:	f04f 0300 	mov.w	r3, #0
 8021e50:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8021e54:	4649      	mov	r1, r9
 8021e56:	008b      	lsls	r3, r1, #2
 8021e58:	4641      	mov	r1, r8
 8021e5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8021e5e:	4641      	mov	r1, r8
 8021e60:	008a      	lsls	r2, r1, #2
 8021e62:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8021e66:	f7fe f9c1 	bl	80201ec <__aeabi_uldivmod>
 8021e6a:	4602      	mov	r2, r0
 8021e6c:	460b      	mov	r3, r1
 8021e6e:	4b0d      	ldr	r3, [pc, #52]	@ (8021ea4 <UART_SetConfig+0x4e4>)
 8021e70:	fba3 1302 	umull	r1, r3, r3, r2
 8021e74:	095b      	lsrs	r3, r3, #5
 8021e76:	2164      	movs	r1, #100	@ 0x64
 8021e78:	fb01 f303 	mul.w	r3, r1, r3
 8021e7c:	1ad3      	subs	r3, r2, r3
 8021e7e:	011b      	lsls	r3, r3, #4
 8021e80:	3332      	adds	r3, #50	@ 0x32
 8021e82:	4a08      	ldr	r2, [pc, #32]	@ (8021ea4 <UART_SetConfig+0x4e4>)
 8021e84:	fba2 2303 	umull	r2, r3, r2, r3
 8021e88:	095b      	lsrs	r3, r3, #5
 8021e8a:	f003 020f 	and.w	r2, r3, #15
 8021e8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8021e92:	681b      	ldr	r3, [r3, #0]
 8021e94:	4422      	add	r2, r4
 8021e96:	609a      	str	r2, [r3, #8]
}
 8021e98:	bf00      	nop
 8021e9a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8021e9e:	46bd      	mov	sp, r7
 8021ea0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8021ea4:	51eb851f 	.word	0x51eb851f

08021ea8 <memset>:
 8021ea8:	4402      	add	r2, r0
 8021eaa:	4603      	mov	r3, r0
 8021eac:	4293      	cmp	r3, r2
 8021eae:	d100      	bne.n	8021eb2 <memset+0xa>
 8021eb0:	4770      	bx	lr
 8021eb2:	f803 1b01 	strb.w	r1, [r3], #1
 8021eb6:	e7f9      	b.n	8021eac <memset+0x4>

08021eb8 <__libc_init_array>:
 8021eb8:	b570      	push	{r4, r5, r6, lr}
 8021eba:	4d0d      	ldr	r5, [pc, #52]	@ (8021ef0 <__libc_init_array+0x38>)
 8021ebc:	4c0d      	ldr	r4, [pc, #52]	@ (8021ef4 <__libc_init_array+0x3c>)
 8021ebe:	1b64      	subs	r4, r4, r5
 8021ec0:	10a4      	asrs	r4, r4, #2
 8021ec2:	2600      	movs	r6, #0
 8021ec4:	42a6      	cmp	r6, r4
 8021ec6:	d109      	bne.n	8021edc <__libc_init_array+0x24>
 8021ec8:	4d0b      	ldr	r5, [pc, #44]	@ (8021ef8 <__libc_init_array+0x40>)
 8021eca:	4c0c      	ldr	r4, [pc, #48]	@ (8021efc <__libc_init_array+0x44>)
 8021ecc:	f000 f818 	bl	8021f00 <_init>
 8021ed0:	1b64      	subs	r4, r4, r5
 8021ed2:	10a4      	asrs	r4, r4, #2
 8021ed4:	2600      	movs	r6, #0
 8021ed6:	42a6      	cmp	r6, r4
 8021ed8:	d105      	bne.n	8021ee6 <__libc_init_array+0x2e>
 8021eda:	bd70      	pop	{r4, r5, r6, pc}
 8021edc:	f855 3b04 	ldr.w	r3, [r5], #4
 8021ee0:	4798      	blx	r3
 8021ee2:	3601      	adds	r6, #1
 8021ee4:	e7ee      	b.n	8021ec4 <__libc_init_array+0xc>
 8021ee6:	f855 3b04 	ldr.w	r3, [r5], #4
 8021eea:	4798      	blx	r3
 8021eec:	3601      	adds	r6, #1
 8021eee:	e7f2      	b.n	8021ed6 <__libc_init_array+0x1e>
 8021ef0:	08021f38 	.word	0x08021f38
 8021ef4:	08021f38 	.word	0x08021f38
 8021ef8:	08021f38 	.word	0x08021f38
 8021efc:	08021f3c 	.word	0x08021f3c

08021f00 <_init>:
 8021f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021f02:	bf00      	nop
 8021f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021f06:	bc08      	pop	{r3}
 8021f08:	469e      	mov	lr, r3
 8021f0a:	4770      	bx	lr

08021f0c <_fini>:
 8021f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021f0e:	bf00      	nop
 8021f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021f12:	bc08      	pop	{r3}
 8021f14:	469e      	mov	lr, r3
 8021f16:	4770      	bx	lr
