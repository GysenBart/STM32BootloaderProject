
Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bd0  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003d7c  08003d7c  00013d7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d94  08003d94  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003d94  08003d94  00013d94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d9c  08003d9c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d9c  08003d9c  00013d9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003da0  08003da0  00013da0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003da4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00004258  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004264  20004264  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010903  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000024ec  00000000  00000000  0003093f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d28  00000000  00000000  00032e30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c50  00000000  00000000  00033b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024eb6  00000000  00000000  000347a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f11e  00000000  00000000  0005965e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dbe2a  00000000  00000000  0006877c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001445a6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000036dc  00000000  00000000  001445f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08003d64 	.word	0x08003d64

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08003d64 	.word	0x08003d64

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <bootloader_uart_read_data>:
//uint8_t bl_rx_buffer[BLRXLEN];	// Buffer that holds bootloader received data
uint8_t bl_rx_buffer[BLRXLEN];	// Buffer that holds bootloader received data
extern UART_HandleTypeDef huart3;

void  bootloader_uart_read_data(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0
    uint8_t rcv_len=0;
 80004f6:	2300      	movs	r3, #0
 80004f8:	71fb      	strb	r3, [r7, #7]

	memset(bl_rx_buffer,0,15000);
 80004fa:	f643 2298 	movw	r2, #15000	; 0x3a98
 80004fe:	2100      	movs	r1, #0
 8000500:	4813      	ldr	r0, [pc, #76]	; (8000550 <bootloader_uart_read_data+0x60>)
 8000502:	f003 fc27 	bl	8003d54 <memset>

	HAL_UART_Receive(&huart3,bl_rx_buffer,1,100);
 8000506:	2364      	movs	r3, #100	; 0x64
 8000508:	2201      	movs	r2, #1
 800050a:	4911      	ldr	r1, [pc, #68]	; (8000550 <bootloader_uart_read_data+0x60>)
 800050c:	4811      	ldr	r0, [pc, #68]	; (8000554 <bootloader_uart_read_data+0x64>)
 800050e:	f002 fd76 	bl	8002ffe <HAL_UART_Receive>
	rcv_len= bl_rx_buffer[0];
 8000512:	4b0f      	ldr	r3, [pc, #60]	; (8000550 <bootloader_uart_read_data+0x60>)
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Receive(&huart3,&bl_rx_buffer[1],rcv_len,100);
 8000518:	79fb      	ldrb	r3, [r7, #7]
 800051a:	b29a      	uxth	r2, r3
 800051c:	2364      	movs	r3, #100	; 0x64
 800051e:	490e      	ldr	r1, [pc, #56]	; (8000558 <bootloader_uart_read_data+0x68>)
 8000520:	480c      	ldr	r0, [pc, #48]	; (8000554 <bootloader_uart_read_data+0x64>)
 8000522:	f002 fd6c 	bl	8002ffe <HAL_UART_Receive>
	switch(bl_rx_buffer[1])
 8000526:	4b0a      	ldr	r3, [pc, #40]	; (8000550 <bootloader_uart_read_data+0x60>)
 8000528:	785b      	ldrb	r3, [r3, #1]
 800052a:	2b56      	cmp	r3, #86	; 0x56
 800052c:	d002      	beq.n	8000534 <bootloader_uart_read_data+0x44>
 800052e:	2b57      	cmp	r3, #87	; 0x57
 8000530:	d005      	beq.n	800053e <bootloader_uart_read_data+0x4e>
		case BL_MEM_WRITE:
			//execute_flash_erase(4 , 16);
			bootloader_handle_mem_write_cmd(bl_rx_buffer);
			break;
		 default:
			break;
 8000532:	e008      	b.n	8000546 <bootloader_uart_read_data+0x56>
			execute_flash_erase(4 , 16);
 8000534:	2110      	movs	r1, #16
 8000536:	2004      	movs	r0, #4
 8000538:	f000 f810 	bl	800055c <execute_flash_erase>
			break;
 800053c:	e003      	b.n	8000546 <bootloader_uart_read_data+0x56>
			bootloader_handle_mem_write_cmd(bl_rx_buffer);
 800053e:	4804      	ldr	r0, [pc, #16]	; (8000550 <bootloader_uart_read_data+0x60>)
 8000540:	f000 f848 	bl	80005d4 <bootloader_handle_mem_write_cmd>
			break;
 8000544:	bf00      	nop
	}
}
 8000546:	bf00      	nop
 8000548:	3708      	adds	r7, #8
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	20000028 	.word	0x20000028
 8000554:	20003ce8 	.word	0x20003ce8
 8000558:	20000029 	.word	0x20000029

0800055c <execute_flash_erase>:
{
	execute_flash_erase(pBuffer[2] , pBuffer[3]);
}

uint8_t execute_flash_erase(uint8_t sector_number , uint8_t number_of_sector)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b08a      	sub	sp, #40	; 0x28
 8000560:	af00      	add	r7, sp, #0
 8000562:	4603      	mov	r3, r0
 8000564:	460a      	mov	r2, r1
 8000566:	71fb      	strb	r3, [r7, #7]
 8000568:	4613      	mov	r3, r2
 800056a:	71bb      	strb	r3, [r7, #6]
	//we have totally 24 sectors in STM32F429ZI mcu
	//number_of_sector has to be in the range of 0 to 23
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 800056c:	2201      	movs	r2, #1
 800056e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000572:	4817      	ldr	r0, [pc, #92]	; (80005d0 <execute_flash_erase+0x74>)
 8000574:	f001 fe30 	bl	80021d8 <HAL_GPIO_WritePin>

	FLASH_EraseInitTypeDef flashErase_handle;
	uint32_t sectorError;
	HAL_StatusTypeDef status;

	if( number_of_sector > 23 )
 8000578:	79bb      	ldrb	r3, [r7, #6]
 800057a:	2b17      	cmp	r3, #23
 800057c:	d901      	bls.n	8000582 <execute_flash_erase+0x26>
	{
		return HAL_ERROR;
 800057e:	2301      	movs	r3, #1
 8000580:	e022      	b.n	80005c8 <execute_flash_erase+0x6c>
	}
	else
	{
		// See struct FLASH_EraseInitTypeDef for explanation of the parameters
		flashErase_handle.TypeErase = FLASH_TYPEERASE_SECTORS;
 8000582:	2300      	movs	r3, #0
 8000584:	613b      	str	r3, [r7, #16]
		flashErase_handle.Sector = sector_number; // this is the initial sector
 8000586:	79fb      	ldrb	r3, [r7, #7]
 8000588:	61bb      	str	r3, [r7, #24]
		flashErase_handle.NbSectors = 24 - number_of_sector;
 800058a:	79bb      	ldrb	r3, [r7, #6]
 800058c:	f1c3 0318 	rsb	r3, r3, #24
 8000590:	61fb      	str	r3, [r7, #28]
		flashErase_handle.Banks = FLASH_BANK_1;	// irrelevant, may be omitted (to test)
 8000592:	2301      	movs	r3, #1
 8000594:	617b      	str	r3, [r7, #20]
		flashErase_handle.VoltageRange = FLASH_VOLTAGE_RANGE_3;  // our mcu will work on this voltage range
 8000596:	2302      	movs	r3, #2
 8000598:	623b      	str	r3, [r7, #32]
		HAL_FLASH_Unlock();
 800059a:	f001 f9a7 	bl	80018ec <HAL_FLASH_Unlock>
		status = (uint8_t) HAL_FLASHEx_Erase(&flashErase_handle, &sectorError);
 800059e:	f107 020c 	add.w	r2, r7, #12
 80005a2:	f107 0310 	add.w	r3, r7, #16
 80005a6:	4611      	mov	r1, r2
 80005a8:	4618      	mov	r0, r3
 80005aa:	f001 fb11 	bl	8001bd0 <HAL_FLASHEx_Erase>
 80005ae:	4603      	mov	r3, r0
 80005b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		HAL_FLASH_Lock();
 80005b4:	f001 f9bc 	bl	8001930 <HAL_FLASH_Lock>
	}
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80005b8:	2200      	movs	r2, #0
 80005ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005be:	4804      	ldr	r0, [pc, #16]	; (80005d0 <execute_flash_erase+0x74>)
 80005c0:	f001 fe0a 	bl	80021d8 <HAL_GPIO_WritePin>
	return status;
 80005c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80005c8:	4618      	mov	r0, r3
 80005ca:	3728      	adds	r7, #40	; 0x28
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	40020400 	.word	0x40020400

080005d4 <bootloader_handle_mem_write_cmd>:

void bootloader_handle_mem_write_cmd(uint8_t *pBuffer)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
	uint8_t payload_len = pBuffer[6];
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	799b      	ldrb	r3, [r3, #6]
 80005e0:	73fb      	strb	r3, [r7, #15]

	uint32_t mem_address = *((uint32_t *) ( &pBuffer[2]) );
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80005e8:	60bb      	str	r3, [r7, #8]

	//glow the led to indicate bootloader is currently writing to memory
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 80005ea:	2201      	movs	r2, #1
 80005ec:	2101      	movs	r1, #1
 80005ee:	4809      	ldr	r0, [pc, #36]	; (8000614 <bootloader_handle_mem_write_cmd+0x40>)
 80005f0:	f001 fdf2 	bl	80021d8 <HAL_GPIO_WritePin>

	//execute mem write
	execute_mem_write(&pBuffer[7],mem_address, payload_len);
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	3307      	adds	r3, #7
 80005f8:	7bfa      	ldrb	r2, [r7, #15]
 80005fa:	68b9      	ldr	r1, [r7, #8]
 80005fc:	4618      	mov	r0, r3
 80005fe:	f000 f80b 	bl	8000618 <execute_mem_write>

	//turn off the led to indicate memory write is over
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000602:	2200      	movs	r2, #0
 8000604:	2101      	movs	r1, #1
 8000606:	4803      	ldr	r0, [pc, #12]	; (8000614 <bootloader_handle_mem_write_cmd+0x40>)
 8000608:	f001 fde6 	bl	80021d8 <HAL_GPIO_WritePin>
}
 800060c:	bf00      	nop
 800060e:	3710      	adds	r7, #16
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	40020400 	.word	0x40020400

08000618 <execute_mem_write>:

uint8_t execute_mem_write(uint8_t *pBuffer, uint32_t mem_address, uint32_t len)
{
 8000618:	b5b0      	push	{r4, r5, r7, lr}
 800061a:	b086      	sub	sp, #24
 800061c:	af00      	add	r7, sp, #0
 800061e:	60f8      	str	r0, [r7, #12]
 8000620:	60b9      	str	r1, [r7, #8]
 8000622:	607a      	str	r2, [r7, #4]
    uint8_t status=HAL_OK;
 8000624:	2300      	movs	r3, #0
 8000626:	75fb      	strb	r3, [r7, #23]

    //We have to unlock flash module to get control of registers
    HAL_FLASH_Unlock();
 8000628:	f001 f960 	bl	80018ec <HAL_FLASH_Unlock>

    for(uint32_t i = 0 ; i <len ; i++)
 800062c:	2300      	movs	r3, #0
 800062e:	613b      	str	r3, [r7, #16]
 8000630:	e014      	b.n	800065c <execute_mem_write+0x44>
    {
        //Here we program the flash byte by byte
        status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE,mem_address+i,pBuffer[i] );
 8000632:	68ba      	ldr	r2, [r7, #8]
 8000634:	693b      	ldr	r3, [r7, #16]
 8000636:	18d1      	adds	r1, r2, r3
 8000638:	68fa      	ldr	r2, [r7, #12]
 800063a:	693b      	ldr	r3, [r7, #16]
 800063c:	4413      	add	r3, r2
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	b2db      	uxtb	r3, r3
 8000642:	2200      	movs	r2, #0
 8000644:	461c      	mov	r4, r3
 8000646:	4615      	mov	r5, r2
 8000648:	4622      	mov	r2, r4
 800064a:	462b      	mov	r3, r5
 800064c:	2000      	movs	r0, #0
 800064e:	f001 f8f9 	bl	8001844 <HAL_FLASH_Program>
 8000652:	4603      	mov	r3, r0
 8000654:	75fb      	strb	r3, [r7, #23]
    for(uint32_t i = 0 ; i <len ; i++)
 8000656:	693b      	ldr	r3, [r7, #16]
 8000658:	3301      	adds	r3, #1
 800065a:	613b      	str	r3, [r7, #16]
 800065c:	693a      	ldr	r2, [r7, #16]
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	429a      	cmp	r2, r3
 8000662:	d3e6      	bcc.n	8000632 <execute_mem_write+0x1a>
    }

    HAL_FLASH_Lock();
 8000664:	f001 f964 	bl	8001930 <HAL_FLASH_Lock>

    return status;
 8000668:	7dfb      	ldrb	r3, [r7, #23]
}
 800066a:	4618      	mov	r0, r3
 800066c:	3718      	adds	r7, #24
 800066e:	46bd      	mov	sp, r7
 8000670:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000674 <ExitBootloader>:

void ExitBootloader()
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b084      	sub	sp, #16
 8000678:	af00      	add	r7, sp, #0
	// Function pointer to hold the address of the user application to jump to
	uint32_t reset_handler_add = *((volatile uint32_t *) (USERAPPLICATION_BASEADDRESS + 4));
 800067a:	4b10      	ldr	r3, [pc, #64]	; (80006bc <ExitBootloader+0x48>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	60fb      	str	r3, [r7, #12]
	void (*Exit_Bootloader)(void) = (void*) reset_handler_add;
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	60bb      	str	r3, [r7, #8]

	// Disable RCC and set all peripherals to default
	HAL_RCC_DeInit();
 8000684:	f002 fb76 	bl	8002d74 <HAL_RCC_DeInit>
	HAL_DeInit();
 8000688:	f000 fc26 	bl	8000ed8 <HAL_DeInit>

	// Disable systick timer
	SysTick->CTRL = 0x0;
 800068c:	4b0c      	ldr	r3, [pc, #48]	; (80006c0 <ExitBootloader+0x4c>)
 800068e:	2200      	movs	r2, #0
 8000690:	601a      	str	r2, [r3, #0]
	SysTick->LOAD=0;
 8000692:	4b0b      	ldr	r3, [pc, #44]	; (80006c0 <ExitBootloader+0x4c>)
 8000694:	2200      	movs	r2, #0
 8000696:	605a      	str	r2, [r3, #4]
	SysTick->VAL=0;
 8000698:	4b09      	ldr	r3, [pc, #36]	; (80006c0 <ExitBootloader+0x4c>)
 800069a:	2200      	movs	r2, #0
 800069c:	609a      	str	r2, [r3, #8]

	// Main Stack Pointer value (location where the Interrupt Vector table starts). This sets
	// SCB->VTOR to the correct address
	uint32_t MspValue = *(volatile uint32_t*)USERAPPLICATION_BASEADDRESS;
 800069e:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <ExitBootloader+0x50>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80006a8:	683b      	ldr	r3, [r7, #0]
 80006aa:	f383 8808 	msr	MSP, r3
}
 80006ae:	bf00      	nop
	__set_MSP(MspValue);

	// Exit the bootloader and handoff control to the user application
	Exit_Bootloader();
 80006b0:	68bb      	ldr	r3, [r7, #8]
 80006b2:	4798      	blx	r3
}
 80006b4:	bf00      	nop
 80006b6:	3710      	adds	r7, #16
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	08010004 	.word	0x08010004
 80006c0:	e000e010 	.word	0xe000e010
 80006c4:	08010000 	.word	0x08010000

080006c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ce:	f000 fbe1 	bl	8000e94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006d2:	f000 f825 	bl	8000720 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006d6:	f000 f933 	bl	8000940 <MX_GPIO_Init>
  MX_ETH_Init();
 80006da:	f000 f88b 	bl	80007f4 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80006de:	f000 f8d7 	bl	8000890 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80006e2:	f000 f8ff 	bl	80008e4 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  int btn_state = 0;
 80006e6:	2300      	movs	r3, #0
 80006e8:	607b      	str	r3, [r7, #4]
  int btn_previous_state = 0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	603b      	str	r3, [r7, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  btn_previous_state = btn_state;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	603b      	str	r3, [r7, #0]
	  btn_state = HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin);
 80006f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006f6:	4809      	ldr	r0, [pc, #36]	; (800071c <main+0x54>)
 80006f8:	f001 fd56 	bl	80021a8 <HAL_GPIO_ReadPin>
 80006fc:	4603      	mov	r3, r0
 80006fe:	607b      	str	r3, [r7, #4]
    /* USER CODE END WHILE */
	  /* Check button on rising edge */
	  if ((btn_state != btn_previous_state)&&(btn_state == 1))
 8000700:	687a      	ldr	r2, [r7, #4]
 8000702:	683b      	ldr	r3, [r7, #0]
 8000704:	429a      	cmp	r2, r3
 8000706:	d005      	beq.n	8000714 <main+0x4c>
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	2b01      	cmp	r3, #1
 800070c:	d102      	bne.n	8000714 <main+0x4c>
	  {
		  ExitBootloader();
 800070e:	f7ff ffb1 	bl	8000674 <ExitBootloader>
 8000712:	e001      	b.n	8000718 <main+0x50>
	  }
	  else
	  {
		  bootloader_uart_read_data();
 8000714:	f7ff feec 	bl	80004f0 <bootloader_uart_read_data>
	  btn_previous_state = btn_state;
 8000718:	e7e9      	b.n	80006ee <main+0x26>
 800071a:	bf00      	nop
 800071c:	40020800 	.word	0x40020800

08000720 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b094      	sub	sp, #80	; 0x50
 8000724:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000726:	f107 0320 	add.w	r3, r7, #32
 800072a:	2230      	movs	r2, #48	; 0x30
 800072c:	2100      	movs	r1, #0
 800072e:	4618      	mov	r0, r3
 8000730:	f003 fb10 	bl	8003d54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000734:	f107 030c 	add.w	r3, r7, #12
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]
 800073e:	609a      	str	r2, [r3, #8]
 8000740:	60da      	str	r2, [r3, #12]
 8000742:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000744:	2300      	movs	r3, #0
 8000746:	60bb      	str	r3, [r7, #8]
 8000748:	4b28      	ldr	r3, [pc, #160]	; (80007ec <SystemClock_Config+0xcc>)
 800074a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074c:	4a27      	ldr	r2, [pc, #156]	; (80007ec <SystemClock_Config+0xcc>)
 800074e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000752:	6413      	str	r3, [r2, #64]	; 0x40
 8000754:	4b25      	ldr	r3, [pc, #148]	; (80007ec <SystemClock_Config+0xcc>)
 8000756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000758:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800075c:	60bb      	str	r3, [r7, #8]
 800075e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000760:	2300      	movs	r3, #0
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	4b22      	ldr	r3, [pc, #136]	; (80007f0 <SystemClock_Config+0xd0>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a21      	ldr	r2, [pc, #132]	; (80007f0 <SystemClock_Config+0xd0>)
 800076a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800076e:	6013      	str	r3, [r2, #0]
 8000770:	4b1f      	ldr	r3, [pc, #124]	; (80007f0 <SystemClock_Config+0xd0>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000778:	607b      	str	r3, [r7, #4]
 800077a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800077c:	2301      	movs	r3, #1
 800077e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000780:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000784:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000786:	2302      	movs	r3, #2
 8000788:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800078a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800078e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000790:	2304      	movs	r3, #4
 8000792:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000794:	23a8      	movs	r3, #168	; 0xa8
 8000796:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000798:	2302      	movs	r3, #2
 800079a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800079c:	2307      	movs	r3, #7
 800079e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a0:	f107 0320 	add.w	r3, r7, #32
 80007a4:	4618      	mov	r0, r3
 80007a6:	f001 fe4d 	bl	8002444 <HAL_RCC_OscConfig>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007b0:	f000 f974 	bl	8000a9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b4:	230f      	movs	r3, #15
 80007b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b8:	2302      	movs	r3, #2
 80007ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007bc:	2300      	movs	r3, #0
 80007be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007c0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007cc:	f107 030c 	add.w	r3, r7, #12
 80007d0:	2105      	movs	r1, #5
 80007d2:	4618      	mov	r0, r3
 80007d4:	f002 f8ae 	bl	8002934 <HAL_RCC_ClockConfig>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007de:	f000 f95d 	bl	8000a9c <Error_Handler>
  }
}
 80007e2:	bf00      	nop
 80007e4:	3750      	adds	r7, #80	; 0x50
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	40023800 	.word	0x40023800
 80007f0:	40007000 	.word	0x40007000

080007f4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80007f8:	4b1f      	ldr	r3, [pc, #124]	; (8000878 <MX_ETH_Init+0x84>)
 80007fa:	4a20      	ldr	r2, [pc, #128]	; (800087c <MX_ETH_Init+0x88>)
 80007fc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80007fe:	4b20      	ldr	r3, [pc, #128]	; (8000880 <MX_ETH_Init+0x8c>)
 8000800:	2200      	movs	r2, #0
 8000802:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000804:	4b1e      	ldr	r3, [pc, #120]	; (8000880 <MX_ETH_Init+0x8c>)
 8000806:	2280      	movs	r2, #128	; 0x80
 8000808:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800080a:	4b1d      	ldr	r3, [pc, #116]	; (8000880 <MX_ETH_Init+0x8c>)
 800080c:	22e1      	movs	r2, #225	; 0xe1
 800080e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000810:	4b1b      	ldr	r3, [pc, #108]	; (8000880 <MX_ETH_Init+0x8c>)
 8000812:	2200      	movs	r2, #0
 8000814:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000816:	4b1a      	ldr	r3, [pc, #104]	; (8000880 <MX_ETH_Init+0x8c>)
 8000818:	2200      	movs	r2, #0
 800081a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800081c:	4b18      	ldr	r3, [pc, #96]	; (8000880 <MX_ETH_Init+0x8c>)
 800081e:	2200      	movs	r2, #0
 8000820:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000822:	4b15      	ldr	r3, [pc, #84]	; (8000878 <MX_ETH_Init+0x84>)
 8000824:	4a16      	ldr	r2, [pc, #88]	; (8000880 <MX_ETH_Init+0x8c>)
 8000826:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000828:	4b13      	ldr	r3, [pc, #76]	; (8000878 <MX_ETH_Init+0x84>)
 800082a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800082e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000830:	4b11      	ldr	r3, [pc, #68]	; (8000878 <MX_ETH_Init+0x84>)
 8000832:	4a14      	ldr	r2, [pc, #80]	; (8000884 <MX_ETH_Init+0x90>)
 8000834:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000836:	4b10      	ldr	r3, [pc, #64]	; (8000878 <MX_ETH_Init+0x84>)
 8000838:	4a13      	ldr	r2, [pc, #76]	; (8000888 <MX_ETH_Init+0x94>)
 800083a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800083c:	4b0e      	ldr	r3, [pc, #56]	; (8000878 <MX_ETH_Init+0x84>)
 800083e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000842:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000844:	480c      	ldr	r0, [pc, #48]	; (8000878 <MX_ETH_Init+0x84>)
 8000846:	f000 fcd5 	bl	80011f4 <HAL_ETH_Init>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000850:	f000 f924 	bl	8000a9c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000854:	2238      	movs	r2, #56	; 0x38
 8000856:	2100      	movs	r1, #0
 8000858:	480c      	ldr	r0, [pc, #48]	; (800088c <MX_ETH_Init+0x98>)
 800085a:	f003 fa7b 	bl	8003d54 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800085e:	4b0b      	ldr	r3, [pc, #44]	; (800088c <MX_ETH_Init+0x98>)
 8000860:	2221      	movs	r2, #33	; 0x21
 8000862:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000864:	4b09      	ldr	r3, [pc, #36]	; (800088c <MX_ETH_Init+0x98>)
 8000866:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800086a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800086c:	4b07      	ldr	r3, [pc, #28]	; (800088c <MX_ETH_Init+0x98>)
 800086e:	2200      	movs	r2, #0
 8000870:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	20003c38 	.word	0x20003c38
 800087c:	40028000 	.word	0x40028000
 8000880:	20004238 	.word	0x20004238
 8000884:	20003b98 	.word	0x20003b98
 8000888:	20003af8 	.word	0x20003af8
 800088c:	20003ac0 	.word	0x20003ac0

08000890 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000894:	4b11      	ldr	r3, [pc, #68]	; (80008dc <MX_USART3_UART_Init+0x4c>)
 8000896:	4a12      	ldr	r2, [pc, #72]	; (80008e0 <MX_USART3_UART_Init+0x50>)
 8000898:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800089a:	4b10      	ldr	r3, [pc, #64]	; (80008dc <MX_USART3_UART_Init+0x4c>)
 800089c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008a0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008a2:	4b0e      	ldr	r3, [pc, #56]	; (80008dc <MX_USART3_UART_Init+0x4c>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008a8:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <MX_USART3_UART_Init+0x4c>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008ae:	4b0b      	ldr	r3, [pc, #44]	; (80008dc <MX_USART3_UART_Init+0x4c>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008b4:	4b09      	ldr	r3, [pc, #36]	; (80008dc <MX_USART3_UART_Init+0x4c>)
 80008b6:	220c      	movs	r2, #12
 80008b8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ba:	4b08      	ldr	r3, [pc, #32]	; (80008dc <MX_USART3_UART_Init+0x4c>)
 80008bc:	2200      	movs	r2, #0
 80008be:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c0:	4b06      	ldr	r3, [pc, #24]	; (80008dc <MX_USART3_UART_Init+0x4c>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008c6:	4805      	ldr	r0, [pc, #20]	; (80008dc <MX_USART3_UART_Init+0x4c>)
 80008c8:	f002 fb4c 	bl	8002f64 <HAL_UART_Init>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80008d2:	f000 f8e3 	bl	8000a9c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	20003ce8 	.word	0x20003ce8
 80008e0:	40004800 	.word	0x40004800

080008e4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80008e8:	4b14      	ldr	r3, [pc, #80]	; (800093c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ea:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80008ee:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80008f0:	4b12      	ldr	r3, [pc, #72]	; (800093c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008f2:	2204      	movs	r2, #4
 80008f4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80008f6:	4b11      	ldr	r3, [pc, #68]	; (800093c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008f8:	2202      	movs	r2, #2
 80008fa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80008fc:	4b0f      	ldr	r3, [pc, #60]	; (800093c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008fe:	2200      	movs	r2, #0
 8000900:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000902:	4b0e      	ldr	r3, [pc, #56]	; (800093c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000904:	2202      	movs	r2, #2
 8000906:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000908:	4b0c      	ldr	r3, [pc, #48]	; (800093c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800090a:	2201      	movs	r2, #1
 800090c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800090e:	4b0b      	ldr	r3, [pc, #44]	; (800093c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000910:	2200      	movs	r2, #0
 8000912:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000914:	4b09      	ldr	r3, [pc, #36]	; (800093c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000916:	2200      	movs	r2, #0
 8000918:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800091a:	4b08      	ldr	r3, [pc, #32]	; (800093c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800091c:	2201      	movs	r2, #1
 800091e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000920:	4b06      	ldr	r3, [pc, #24]	; (800093c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000922:	2200      	movs	r2, #0
 8000924:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000926:	4805      	ldr	r0, [pc, #20]	; (800093c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000928:	f001 fc6f 	bl	800220a <HAL_PCD_Init>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000932:	f000 f8b3 	bl	8000a9c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	20003d2c 	.word	0x20003d2c

08000940 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b08c      	sub	sp, #48	; 0x30
 8000944:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000946:	f107 031c 	add.w	r3, r7, #28
 800094a:	2200      	movs	r2, #0
 800094c:	601a      	str	r2, [r3, #0]
 800094e:	605a      	str	r2, [r3, #4]
 8000950:	609a      	str	r2, [r3, #8]
 8000952:	60da      	str	r2, [r3, #12]
 8000954:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	61bb      	str	r3, [r7, #24]
 800095a:	4b4c      	ldr	r3, [pc, #304]	; (8000a8c <MX_GPIO_Init+0x14c>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	4a4b      	ldr	r2, [pc, #300]	; (8000a8c <MX_GPIO_Init+0x14c>)
 8000960:	f043 0304 	orr.w	r3, r3, #4
 8000964:	6313      	str	r3, [r2, #48]	; 0x30
 8000966:	4b49      	ldr	r3, [pc, #292]	; (8000a8c <MX_GPIO_Init+0x14c>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	f003 0304 	and.w	r3, r3, #4
 800096e:	61bb      	str	r3, [r7, #24]
 8000970:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	617b      	str	r3, [r7, #20]
 8000976:	4b45      	ldr	r3, [pc, #276]	; (8000a8c <MX_GPIO_Init+0x14c>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	4a44      	ldr	r2, [pc, #272]	; (8000a8c <MX_GPIO_Init+0x14c>)
 800097c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000980:	6313      	str	r3, [r2, #48]	; 0x30
 8000982:	4b42      	ldr	r3, [pc, #264]	; (8000a8c <MX_GPIO_Init+0x14c>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800098a:	617b      	str	r3, [r7, #20]
 800098c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	613b      	str	r3, [r7, #16]
 8000992:	4b3e      	ldr	r3, [pc, #248]	; (8000a8c <MX_GPIO_Init+0x14c>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	4a3d      	ldr	r2, [pc, #244]	; (8000a8c <MX_GPIO_Init+0x14c>)
 8000998:	f043 0301 	orr.w	r3, r3, #1
 800099c:	6313      	str	r3, [r2, #48]	; 0x30
 800099e:	4b3b      	ldr	r3, [pc, #236]	; (8000a8c <MX_GPIO_Init+0x14c>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	f003 0301 	and.w	r3, r3, #1
 80009a6:	613b      	str	r3, [r7, #16]
 80009a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	60fb      	str	r3, [r7, #12]
 80009ae:	4b37      	ldr	r3, [pc, #220]	; (8000a8c <MX_GPIO_Init+0x14c>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	4a36      	ldr	r2, [pc, #216]	; (8000a8c <MX_GPIO_Init+0x14c>)
 80009b4:	f043 0302 	orr.w	r3, r3, #2
 80009b8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ba:	4b34      	ldr	r3, [pc, #208]	; (8000a8c <MX_GPIO_Init+0x14c>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	f003 0302 	and.w	r3, r3, #2
 80009c2:	60fb      	str	r3, [r7, #12]
 80009c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	60bb      	str	r3, [r7, #8]
 80009ca:	4b30      	ldr	r3, [pc, #192]	; (8000a8c <MX_GPIO_Init+0x14c>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	4a2f      	ldr	r2, [pc, #188]	; (8000a8c <MX_GPIO_Init+0x14c>)
 80009d0:	f043 0308 	orr.w	r3, r3, #8
 80009d4:	6313      	str	r3, [r2, #48]	; 0x30
 80009d6:	4b2d      	ldr	r3, [pc, #180]	; (8000a8c <MX_GPIO_Init+0x14c>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	f003 0308 	and.w	r3, r3, #8
 80009de:	60bb      	str	r3, [r7, #8]
 80009e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	607b      	str	r3, [r7, #4]
 80009e6:	4b29      	ldr	r3, [pc, #164]	; (8000a8c <MX_GPIO_Init+0x14c>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	4a28      	ldr	r2, [pc, #160]	; (8000a8c <MX_GPIO_Init+0x14c>)
 80009ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009f0:	6313      	str	r3, [r2, #48]	; 0x30
 80009f2:	4b26      	ldr	r3, [pc, #152]	; (8000a8c <MX_GPIO_Init+0x14c>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009fa:	607b      	str	r3, [r7, #4]
 80009fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80009fe:	2200      	movs	r2, #0
 8000a00:	f244 0181 	movw	r1, #16513	; 0x4081
 8000a04:	4822      	ldr	r0, [pc, #136]	; (8000a90 <MX_GPIO_Init+0x150>)
 8000a06:	f001 fbe7 	bl	80021d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	2140      	movs	r1, #64	; 0x40
 8000a0e:	4821      	ldr	r0, [pc, #132]	; (8000a94 <MX_GPIO_Init+0x154>)
 8000a10:	f001 fbe2 	bl	80021d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a1a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a24:	f107 031c 	add.w	r3, r7, #28
 8000a28:	4619      	mov	r1, r3
 8000a2a:	481b      	ldr	r0, [pc, #108]	; (8000a98 <MX_GPIO_Init+0x158>)
 8000a2c:	f001 fa10 	bl	8001e50 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a30:	f244 0381 	movw	r3, #16513	; 0x4081
 8000a34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a36:	2301      	movs	r3, #1
 8000a38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a42:	f107 031c 	add.w	r3, r7, #28
 8000a46:	4619      	mov	r1, r3
 8000a48:	4811      	ldr	r0, [pc, #68]	; (8000a90 <MX_GPIO_Init+0x150>)
 8000a4a:	f001 fa01 	bl	8001e50 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a4e:	2340      	movs	r3, #64	; 0x40
 8000a50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a52:	2301      	movs	r3, #1
 8000a54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a56:	2300      	movs	r3, #0
 8000a58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a5e:	f107 031c 	add.w	r3, r7, #28
 8000a62:	4619      	mov	r1, r3
 8000a64:	480b      	ldr	r0, [pc, #44]	; (8000a94 <MX_GPIO_Init+0x154>)
 8000a66:	f001 f9f3 	bl	8001e50 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a6a:	2380      	movs	r3, #128	; 0x80
 8000a6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a76:	f107 031c 	add.w	r3, r7, #28
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4805      	ldr	r0, [pc, #20]	; (8000a94 <MX_GPIO_Init+0x154>)
 8000a7e:	f001 f9e7 	bl	8001e50 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a82:	bf00      	nop
 8000a84:	3730      	adds	r7, #48	; 0x30
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40023800 	.word	0x40023800
 8000a90:	40020400 	.word	0x40020400
 8000a94:	40021800 	.word	0x40021800
 8000a98:	40020800 	.word	0x40020800

08000a9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa0:	b672      	cpsid	i
}
 8000aa2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa4:	e7fe      	b.n	8000aa4 <Error_Handler+0x8>
	...

08000aa8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b083      	sub	sp, #12
 8000aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	607b      	str	r3, [r7, #4]
 8000ab2:	4b10      	ldr	r3, [pc, #64]	; (8000af4 <HAL_MspInit+0x4c>)
 8000ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ab6:	4a0f      	ldr	r2, [pc, #60]	; (8000af4 <HAL_MspInit+0x4c>)
 8000ab8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000abc:	6453      	str	r3, [r2, #68]	; 0x44
 8000abe:	4b0d      	ldr	r3, [pc, #52]	; (8000af4 <HAL_MspInit+0x4c>)
 8000ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ac2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ac6:	607b      	str	r3, [r7, #4]
 8000ac8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	603b      	str	r3, [r7, #0]
 8000ace:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <HAL_MspInit+0x4c>)
 8000ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad2:	4a08      	ldr	r2, [pc, #32]	; (8000af4 <HAL_MspInit+0x4c>)
 8000ad4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ad8:	6413      	str	r3, [r2, #64]	; 0x40
 8000ada:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <HAL_MspInit+0x4c>)
 8000adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ae2:	603b      	str	r3, [r7, #0]
 8000ae4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	370c      	adds	r7, #12
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	40023800 	.word	0x40023800

08000af8 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b08e      	sub	sp, #56	; 0x38
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
 8000b0e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a55      	ldr	r2, [pc, #340]	; (8000c6c <HAL_ETH_MspInit+0x174>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	f040 80a4 	bne.w	8000c64 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	623b      	str	r3, [r7, #32]
 8000b20:	4b53      	ldr	r3, [pc, #332]	; (8000c70 <HAL_ETH_MspInit+0x178>)
 8000b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b24:	4a52      	ldr	r2, [pc, #328]	; (8000c70 <HAL_ETH_MspInit+0x178>)
 8000b26:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b2a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2c:	4b50      	ldr	r3, [pc, #320]	; (8000c70 <HAL_ETH_MspInit+0x178>)
 8000b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b34:	623b      	str	r3, [r7, #32]
 8000b36:	6a3b      	ldr	r3, [r7, #32]
 8000b38:	2300      	movs	r3, #0
 8000b3a:	61fb      	str	r3, [r7, #28]
 8000b3c:	4b4c      	ldr	r3, [pc, #304]	; (8000c70 <HAL_ETH_MspInit+0x178>)
 8000b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b40:	4a4b      	ldr	r2, [pc, #300]	; (8000c70 <HAL_ETH_MspInit+0x178>)
 8000b42:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000b46:	6313      	str	r3, [r2, #48]	; 0x30
 8000b48:	4b49      	ldr	r3, [pc, #292]	; (8000c70 <HAL_ETH_MspInit+0x178>)
 8000b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000b50:	61fb      	str	r3, [r7, #28]
 8000b52:	69fb      	ldr	r3, [r7, #28]
 8000b54:	2300      	movs	r3, #0
 8000b56:	61bb      	str	r3, [r7, #24]
 8000b58:	4b45      	ldr	r3, [pc, #276]	; (8000c70 <HAL_ETH_MspInit+0x178>)
 8000b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5c:	4a44      	ldr	r2, [pc, #272]	; (8000c70 <HAL_ETH_MspInit+0x178>)
 8000b5e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000b62:	6313      	str	r3, [r2, #48]	; 0x30
 8000b64:	4b42      	ldr	r3, [pc, #264]	; (8000c70 <HAL_ETH_MspInit+0x178>)
 8000b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000b6c:	61bb      	str	r3, [r7, #24]
 8000b6e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b70:	2300      	movs	r3, #0
 8000b72:	617b      	str	r3, [r7, #20]
 8000b74:	4b3e      	ldr	r3, [pc, #248]	; (8000c70 <HAL_ETH_MspInit+0x178>)
 8000b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b78:	4a3d      	ldr	r2, [pc, #244]	; (8000c70 <HAL_ETH_MspInit+0x178>)
 8000b7a:	f043 0304 	orr.w	r3, r3, #4
 8000b7e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b80:	4b3b      	ldr	r3, [pc, #236]	; (8000c70 <HAL_ETH_MspInit+0x178>)
 8000b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b84:	f003 0304 	and.w	r3, r3, #4
 8000b88:	617b      	str	r3, [r7, #20]
 8000b8a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	613b      	str	r3, [r7, #16]
 8000b90:	4b37      	ldr	r3, [pc, #220]	; (8000c70 <HAL_ETH_MspInit+0x178>)
 8000b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b94:	4a36      	ldr	r2, [pc, #216]	; (8000c70 <HAL_ETH_MspInit+0x178>)
 8000b96:	f043 0301 	orr.w	r3, r3, #1
 8000b9a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9c:	4b34      	ldr	r3, [pc, #208]	; (8000c70 <HAL_ETH_MspInit+0x178>)
 8000b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba0:	f003 0301 	and.w	r3, r3, #1
 8000ba4:	613b      	str	r3, [r7, #16]
 8000ba6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba8:	2300      	movs	r3, #0
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	4b30      	ldr	r3, [pc, #192]	; (8000c70 <HAL_ETH_MspInit+0x178>)
 8000bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb0:	4a2f      	ldr	r2, [pc, #188]	; (8000c70 <HAL_ETH_MspInit+0x178>)
 8000bb2:	f043 0302 	orr.w	r3, r3, #2
 8000bb6:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb8:	4b2d      	ldr	r3, [pc, #180]	; (8000c70 <HAL_ETH_MspInit+0x178>)
 8000bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbc:	f003 0302 	and.w	r3, r3, #2
 8000bc0:	60fb      	str	r3, [r7, #12]
 8000bc2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	60bb      	str	r3, [r7, #8]
 8000bc8:	4b29      	ldr	r3, [pc, #164]	; (8000c70 <HAL_ETH_MspInit+0x178>)
 8000bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bcc:	4a28      	ldr	r2, [pc, #160]	; (8000c70 <HAL_ETH_MspInit+0x178>)
 8000bce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bd2:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd4:	4b26      	ldr	r3, [pc, #152]	; (8000c70 <HAL_ETH_MspInit+0x178>)
 8000bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bdc:	60bb      	str	r3, [r7, #8]
 8000bde:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000be0:	2332      	movs	r3, #50	; 0x32
 8000be2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be4:	2302      	movs	r3, #2
 8000be6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bec:	2303      	movs	r3, #3
 8000bee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bf0:	230b      	movs	r3, #11
 8000bf2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	481e      	ldr	r0, [pc, #120]	; (8000c74 <HAL_ETH_MspInit+0x17c>)
 8000bfc:	f001 f928 	bl	8001e50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000c00:	2386      	movs	r3, #134	; 0x86
 8000c02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c04:	2302      	movs	r3, #2
 8000c06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c0c:	2303      	movs	r3, #3
 8000c0e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c10:	230b      	movs	r3, #11
 8000c12:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4817      	ldr	r0, [pc, #92]	; (8000c78 <HAL_ETH_MspInit+0x180>)
 8000c1c:	f001 f918 	bl	8001e50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000c20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c26:	2302      	movs	r3, #2
 8000c28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c2e:	2303      	movs	r3, #3
 8000c30:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c32:	230b      	movs	r3, #11
 8000c34:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000c36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	480f      	ldr	r0, [pc, #60]	; (8000c7c <HAL_ETH_MspInit+0x184>)
 8000c3e:	f001 f907 	bl	8001e50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000c42:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000c46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c50:	2303      	movs	r3, #3
 8000c52:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c54:	230b      	movs	r3, #11
 8000c56:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4808      	ldr	r0, [pc, #32]	; (8000c80 <HAL_ETH_MspInit+0x188>)
 8000c60:	f001 f8f6 	bl	8001e50 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000c64:	bf00      	nop
 8000c66:	3738      	adds	r7, #56	; 0x38
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	40028000 	.word	0x40028000
 8000c70:	40023800 	.word	0x40023800
 8000c74:	40020800 	.word	0x40020800
 8000c78:	40020000 	.word	0x40020000
 8000c7c:	40020400 	.word	0x40020400
 8000c80:	40021800 	.word	0x40021800

08000c84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b08a      	sub	sp, #40	; 0x28
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8c:	f107 0314 	add.w	r3, r7, #20
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	605a      	str	r2, [r3, #4]
 8000c96:	609a      	str	r2, [r3, #8]
 8000c98:	60da      	str	r2, [r3, #12]
 8000c9a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a19      	ldr	r2, [pc, #100]	; (8000d08 <HAL_UART_MspInit+0x84>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d12c      	bne.n	8000d00 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	613b      	str	r3, [r7, #16]
 8000caa:	4b18      	ldr	r3, [pc, #96]	; (8000d0c <HAL_UART_MspInit+0x88>)
 8000cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cae:	4a17      	ldr	r2, [pc, #92]	; (8000d0c <HAL_UART_MspInit+0x88>)
 8000cb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cb4:	6413      	str	r3, [r2, #64]	; 0x40
 8000cb6:	4b15      	ldr	r3, [pc, #84]	; (8000d0c <HAL_UART_MspInit+0x88>)
 8000cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cbe:	613b      	str	r3, [r7, #16]
 8000cc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	60fb      	str	r3, [r7, #12]
 8000cc6:	4b11      	ldr	r3, [pc, #68]	; (8000d0c <HAL_UART_MspInit+0x88>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	4a10      	ldr	r2, [pc, #64]	; (8000d0c <HAL_UART_MspInit+0x88>)
 8000ccc:	f043 0308 	orr.w	r3, r3, #8
 8000cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd2:	4b0e      	ldr	r3, [pc, #56]	; (8000d0c <HAL_UART_MspInit+0x88>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	f003 0308 	and.w	r3, r3, #8
 8000cda:	60fb      	str	r3, [r7, #12]
 8000cdc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000cde:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ce2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cec:	2303      	movs	r3, #3
 8000cee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000cf0:	2307      	movs	r3, #7
 8000cf2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cf4:	f107 0314 	add.w	r3, r7, #20
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4805      	ldr	r0, [pc, #20]	; (8000d10 <HAL_UART_MspInit+0x8c>)
 8000cfc:	f001 f8a8 	bl	8001e50 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d00:	bf00      	nop
 8000d02:	3728      	adds	r7, #40	; 0x28
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	40004800 	.word	0x40004800
 8000d0c:	40023800 	.word	0x40023800
 8000d10:	40020c00 	.word	0x40020c00

08000d14 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b08a      	sub	sp, #40	; 0x28
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d1c:	f107 0314 	add.w	r3, r7, #20
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	605a      	str	r2, [r3, #4]
 8000d26:	609a      	str	r2, [r3, #8]
 8000d28:	60da      	str	r2, [r3, #12]
 8000d2a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d34:	d13f      	bne.n	8000db6 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	613b      	str	r3, [r7, #16]
 8000d3a:	4b21      	ldr	r3, [pc, #132]	; (8000dc0 <HAL_PCD_MspInit+0xac>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	4a20      	ldr	r2, [pc, #128]	; (8000dc0 <HAL_PCD_MspInit+0xac>)
 8000d40:	f043 0301 	orr.w	r3, r3, #1
 8000d44:	6313      	str	r3, [r2, #48]	; 0x30
 8000d46:	4b1e      	ldr	r3, [pc, #120]	; (8000dc0 <HAL_PCD_MspInit+0xac>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	f003 0301 	and.w	r3, r3, #1
 8000d4e:	613b      	str	r3, [r7, #16]
 8000d50:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000d52:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000d56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d58:	2302      	movs	r3, #2
 8000d5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d60:	2303      	movs	r3, #3
 8000d62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d64:	230a      	movs	r3, #10
 8000d66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d68:	f107 0314 	add.w	r3, r7, #20
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4815      	ldr	r0, [pc, #84]	; (8000dc4 <HAL_PCD_MspInit+0xb0>)
 8000d70:	f001 f86e 	bl	8001e50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000d74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000d82:	f107 0314 	add.w	r3, r7, #20
 8000d86:	4619      	mov	r1, r3
 8000d88:	480e      	ldr	r0, [pc, #56]	; (8000dc4 <HAL_PCD_MspInit+0xb0>)
 8000d8a:	f001 f861 	bl	8001e50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000d8e:	4b0c      	ldr	r3, [pc, #48]	; (8000dc0 <HAL_PCD_MspInit+0xac>)
 8000d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d92:	4a0b      	ldr	r2, [pc, #44]	; (8000dc0 <HAL_PCD_MspInit+0xac>)
 8000d94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d98:	6353      	str	r3, [r2, #52]	; 0x34
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	60fb      	str	r3, [r7, #12]
 8000d9e:	4b08      	ldr	r3, [pc, #32]	; (8000dc0 <HAL_PCD_MspInit+0xac>)
 8000da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da2:	4a07      	ldr	r2, [pc, #28]	; (8000dc0 <HAL_PCD_MspInit+0xac>)
 8000da4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000da8:	6453      	str	r3, [r2, #68]	; 0x44
 8000daa:	4b05      	ldr	r3, [pc, #20]	; (8000dc0 <HAL_PCD_MspInit+0xac>)
 8000dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000db6:	bf00      	nop
 8000db8:	3728      	adds	r7, #40	; 0x28
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	40023800 	.word	0x40023800
 8000dc4:	40020000 	.word	0x40020000

08000dc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dcc:	e7fe      	b.n	8000dcc <NMI_Handler+0x4>

08000dce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dd2:	e7fe      	b.n	8000dd2 <HardFault_Handler+0x4>

08000dd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dd8:	e7fe      	b.n	8000dd8 <MemManage_Handler+0x4>

08000dda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dde:	e7fe      	b.n	8000dde <BusFault_Handler+0x4>

08000de0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000de4:	e7fe      	b.n	8000de4 <UsageFault_Handler+0x4>

08000de6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000de6:	b480      	push	{r7}
 8000de8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dea:	bf00      	nop
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr

08000df4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000df8:	bf00      	nop
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr

08000e02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e02:	b480      	push	{r7}
 8000e04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e06:	bf00      	nop
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr

08000e10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e14:	f000 f8c4 	bl	8000fa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e18:	bf00      	nop
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e20:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <SystemInit+0x20>)
 8000e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e26:	4a05      	ldr	r2, [pc, #20]	; (8000e3c <SystemInit+0x20>)
 8000e28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e30:	bf00      	nop
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	e000ed00 	.word	0xe000ed00

08000e40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000e40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e78 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e44:	480d      	ldr	r0, [pc, #52]	; (8000e7c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e46:	490e      	ldr	r1, [pc, #56]	; (8000e80 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e48:	4a0e      	ldr	r2, [pc, #56]	; (8000e84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e4c:	e002      	b.n	8000e54 <LoopCopyDataInit>

08000e4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e52:	3304      	adds	r3, #4

08000e54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e58:	d3f9      	bcc.n	8000e4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e5a:	4a0b      	ldr	r2, [pc, #44]	; (8000e88 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e5c:	4c0b      	ldr	r4, [pc, #44]	; (8000e8c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e60:	e001      	b.n	8000e66 <LoopFillZerobss>

08000e62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e64:	3204      	adds	r2, #4

08000e66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e68:	d3fb      	bcc.n	8000e62 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e6a:	f7ff ffd7 	bl	8000e1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e6e:	f002 ff4d 	bl	8003d0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e72:	f7ff fc29 	bl	80006c8 <main>
  bx  lr    
 8000e76:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000e78:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000e7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e80:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e84:	08003da4 	.word	0x08003da4
  ldr r2, =_sbss
 8000e88:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e8c:	20004264 	.word	0x20004264

08000e90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e90:	e7fe      	b.n	8000e90 <ADC_IRQHandler>
	...

08000e94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e98:	4b0e      	ldr	r3, [pc, #56]	; (8000ed4 <HAL_Init+0x40>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a0d      	ldr	r2, [pc, #52]	; (8000ed4 <HAL_Init+0x40>)
 8000e9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ea2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ea4:	4b0b      	ldr	r3, [pc, #44]	; (8000ed4 <HAL_Init+0x40>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a0a      	ldr	r2, [pc, #40]	; (8000ed4 <HAL_Init+0x40>)
 8000eaa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000eae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eb0:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <HAL_Init+0x40>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a07      	ldr	r2, [pc, #28]	; (8000ed4 <HAL_Init+0x40>)
 8000eb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ebc:	2003      	movs	r0, #3
 8000ebe:	f000 f965 	bl	800118c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ec2:	2000      	movs	r0, #0
 8000ec4:	f000 f83c 	bl	8000f40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ec8:	f7ff fdee 	bl	8000aa8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ecc:	2300      	movs	r3, #0
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40023c00 	.word	0x40023c00

08000ed8 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8000edc:	4b13      	ldr	r3, [pc, #76]	; (8000f2c <HAL_DeInit+0x54>)
 8000ede:	f04f 32ff 	mov.w	r2, #4294967295
 8000ee2:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8000ee4:	4b11      	ldr	r3, [pc, #68]	; (8000f2c <HAL_DeInit+0x54>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 8000eea:	4b10      	ldr	r3, [pc, #64]	; (8000f2c <HAL_DeInit+0x54>)
 8000eec:	f04f 32ff 	mov.w	r2, #4294967295
 8000ef0:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 8000ef2:	4b0e      	ldr	r3, [pc, #56]	; (8000f2c <HAL_DeInit+0x54>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8000ef8:	4b0c      	ldr	r3, [pc, #48]	; (8000f2c <HAL_DeInit+0x54>)
 8000efa:	f04f 32ff 	mov.w	r2, #4294967295
 8000efe:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8000f00:	4b0a      	ldr	r3, [pc, #40]	; (8000f2c <HAL_DeInit+0x54>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 8000f06:	4b09      	ldr	r3, [pc, #36]	; (8000f2c <HAL_DeInit+0x54>)
 8000f08:	f04f 32ff 	mov.w	r2, #4294967295
 8000f0c:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8000f0e:	4b07      	ldr	r3, [pc, #28]	; (8000f2c <HAL_DeInit+0x54>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8000f14:	4b05      	ldr	r3, [pc, #20]	; (8000f2c <HAL_DeInit+0x54>)
 8000f16:	f04f 32ff 	mov.w	r2, #4294967295
 8000f1a:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8000f1c:	4b03      	ldr	r3, [pc, #12]	; (8000f2c <HAL_DeInit+0x54>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8000f22:	f000 f805 	bl	8000f30 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 8000f26:	2300      	movs	r3, #0
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	40023800 	.word	0x40023800

08000f30 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
	...

08000f40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f48:	4b12      	ldr	r3, [pc, #72]	; (8000f94 <HAL_InitTick+0x54>)
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	4b12      	ldr	r3, [pc, #72]	; (8000f98 <HAL_InitTick+0x58>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	4619      	mov	r1, r3
 8000f52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f000 f93b 	bl	80011da <HAL_SYSTICK_Config>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e00e      	b.n	8000f8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2b0f      	cmp	r3, #15
 8000f72:	d80a      	bhi.n	8000f8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f74:	2200      	movs	r2, #0
 8000f76:	6879      	ldr	r1, [r7, #4]
 8000f78:	f04f 30ff 	mov.w	r0, #4294967295
 8000f7c:	f000 f911 	bl	80011a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f80:	4a06      	ldr	r2, [pc, #24]	; (8000f9c <HAL_InitTick+0x5c>)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f86:	2300      	movs	r3, #0
 8000f88:	e000      	b.n	8000f8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20000000 	.word	0x20000000
 8000f98:	20000008 	.word	0x20000008
 8000f9c:	20000004 	.word	0x20000004

08000fa0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fa4:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <HAL_IncTick+0x20>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	461a      	mov	r2, r3
 8000faa:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <HAL_IncTick+0x24>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4413      	add	r3, r2
 8000fb0:	4a04      	ldr	r2, [pc, #16]	; (8000fc4 <HAL_IncTick+0x24>)
 8000fb2:	6013      	str	r3, [r2, #0]
}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	20000008 	.word	0x20000008
 8000fc4:	20004240 	.word	0x20004240

08000fc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  return uwTick;
 8000fcc:	4b03      	ldr	r3, [pc, #12]	; (8000fdc <HAL_GetTick+0x14>)
 8000fce:	681b      	ldr	r3, [r3, #0]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	20004240 	.word	0x20004240

08000fe0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fe8:	f7ff ffee 	bl	8000fc8 <HAL_GetTick>
 8000fec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ff8:	d005      	beq.n	8001006 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ffa:	4b0a      	ldr	r3, [pc, #40]	; (8001024 <HAL_Delay+0x44>)
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	461a      	mov	r2, r3
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	4413      	add	r3, r2
 8001004:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001006:	bf00      	nop
 8001008:	f7ff ffde 	bl	8000fc8 <HAL_GetTick>
 800100c:	4602      	mov	r2, r0
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	68fa      	ldr	r2, [r7, #12]
 8001014:	429a      	cmp	r2, r3
 8001016:	d8f7      	bhi.n	8001008 <HAL_Delay+0x28>
  {
  }
}
 8001018:	bf00      	nop
 800101a:	bf00      	nop
 800101c:	3710      	adds	r7, #16
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	20000008 	.word	0x20000008

08001028 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001028:	b480      	push	{r7}
 800102a:	b085      	sub	sp, #20
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f003 0307 	and.w	r3, r3, #7
 8001036:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001038:	4b0c      	ldr	r3, [pc, #48]	; (800106c <__NVIC_SetPriorityGrouping+0x44>)
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800103e:	68ba      	ldr	r2, [r7, #8]
 8001040:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001044:	4013      	ands	r3, r2
 8001046:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001050:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001054:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001058:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800105a:	4a04      	ldr	r2, [pc, #16]	; (800106c <__NVIC_SetPriorityGrouping+0x44>)
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	60d3      	str	r3, [r2, #12]
}
 8001060:	bf00      	nop
 8001062:	3714      	adds	r7, #20
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	e000ed00 	.word	0xe000ed00

08001070 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001074:	4b04      	ldr	r3, [pc, #16]	; (8001088 <__NVIC_GetPriorityGrouping+0x18>)
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	0a1b      	lsrs	r3, r3, #8
 800107a:	f003 0307 	and.w	r3, r3, #7
}
 800107e:	4618      	mov	r0, r3
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr
 8001088:	e000ed00 	.word	0xe000ed00

0800108c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	6039      	str	r1, [r7, #0]
 8001096:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001098:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109c:	2b00      	cmp	r3, #0
 800109e:	db0a      	blt.n	80010b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	b2da      	uxtb	r2, r3
 80010a4:	490c      	ldr	r1, [pc, #48]	; (80010d8 <__NVIC_SetPriority+0x4c>)
 80010a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010aa:	0112      	lsls	r2, r2, #4
 80010ac:	b2d2      	uxtb	r2, r2
 80010ae:	440b      	add	r3, r1
 80010b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010b4:	e00a      	b.n	80010cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	b2da      	uxtb	r2, r3
 80010ba:	4908      	ldr	r1, [pc, #32]	; (80010dc <__NVIC_SetPriority+0x50>)
 80010bc:	79fb      	ldrb	r3, [r7, #7]
 80010be:	f003 030f 	and.w	r3, r3, #15
 80010c2:	3b04      	subs	r3, #4
 80010c4:	0112      	lsls	r2, r2, #4
 80010c6:	b2d2      	uxtb	r2, r2
 80010c8:	440b      	add	r3, r1
 80010ca:	761a      	strb	r2, [r3, #24]
}
 80010cc:	bf00      	nop
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	e000e100 	.word	0xe000e100
 80010dc:	e000ed00 	.word	0xe000ed00

080010e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b089      	sub	sp, #36	; 0x24
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	60f8      	str	r0, [r7, #12]
 80010e8:	60b9      	str	r1, [r7, #8]
 80010ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	f003 0307 	and.w	r3, r3, #7
 80010f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	f1c3 0307 	rsb	r3, r3, #7
 80010fa:	2b04      	cmp	r3, #4
 80010fc:	bf28      	it	cs
 80010fe:	2304      	movcs	r3, #4
 8001100:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	3304      	adds	r3, #4
 8001106:	2b06      	cmp	r3, #6
 8001108:	d902      	bls.n	8001110 <NVIC_EncodePriority+0x30>
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	3b03      	subs	r3, #3
 800110e:	e000      	b.n	8001112 <NVIC_EncodePriority+0x32>
 8001110:	2300      	movs	r3, #0
 8001112:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001114:	f04f 32ff 	mov.w	r2, #4294967295
 8001118:	69bb      	ldr	r3, [r7, #24]
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	43da      	mvns	r2, r3
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	401a      	ands	r2, r3
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001128:	f04f 31ff 	mov.w	r1, #4294967295
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	fa01 f303 	lsl.w	r3, r1, r3
 8001132:	43d9      	mvns	r1, r3
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001138:	4313      	orrs	r3, r2
         );
}
 800113a:	4618      	mov	r0, r3
 800113c:	3724      	adds	r7, #36	; 0x24
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
	...

08001148 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	3b01      	subs	r3, #1
 8001154:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001158:	d301      	bcc.n	800115e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800115a:	2301      	movs	r3, #1
 800115c:	e00f      	b.n	800117e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800115e:	4a0a      	ldr	r2, [pc, #40]	; (8001188 <SysTick_Config+0x40>)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	3b01      	subs	r3, #1
 8001164:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001166:	210f      	movs	r1, #15
 8001168:	f04f 30ff 	mov.w	r0, #4294967295
 800116c:	f7ff ff8e 	bl	800108c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001170:	4b05      	ldr	r3, [pc, #20]	; (8001188 <SysTick_Config+0x40>)
 8001172:	2200      	movs	r2, #0
 8001174:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001176:	4b04      	ldr	r3, [pc, #16]	; (8001188 <SysTick_Config+0x40>)
 8001178:	2207      	movs	r2, #7
 800117a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800117c:	2300      	movs	r3, #0
}
 800117e:	4618      	mov	r0, r3
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	e000e010 	.word	0xe000e010

0800118c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001194:	6878      	ldr	r0, [r7, #4]
 8001196:	f7ff ff47 	bl	8001028 <__NVIC_SetPriorityGrouping>
}
 800119a:	bf00      	nop
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b086      	sub	sp, #24
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	4603      	mov	r3, r0
 80011aa:	60b9      	str	r1, [r7, #8]
 80011ac:	607a      	str	r2, [r7, #4]
 80011ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011b0:	2300      	movs	r3, #0
 80011b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011b4:	f7ff ff5c 	bl	8001070 <__NVIC_GetPriorityGrouping>
 80011b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011ba:	687a      	ldr	r2, [r7, #4]
 80011bc:	68b9      	ldr	r1, [r7, #8]
 80011be:	6978      	ldr	r0, [r7, #20]
 80011c0:	f7ff ff8e 	bl	80010e0 <NVIC_EncodePriority>
 80011c4:	4602      	mov	r2, r0
 80011c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ca:	4611      	mov	r1, r2
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff ff5d 	bl	800108c <__NVIC_SetPriority>
}
 80011d2:	bf00      	nop
 80011d4:	3718      	adds	r7, #24
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}

080011da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	b082      	sub	sp, #8
 80011de:	af00      	add	r7, sp, #0
 80011e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f7ff ffb0 	bl	8001148 <SysTick_Config>
 80011e8:	4603      	mov	r3, r0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
	...

080011f4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d101      	bne.n	8001206 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	e06c      	b.n	80012e0 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800120c:	2b00      	cmp	r3, #0
 800120e:	d106      	bne.n	800121e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2223      	movs	r2, #35	; 0x23
 8001214:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f7ff fc6d 	bl	8000af8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	60bb      	str	r3, [r7, #8]
 8001222:	4b31      	ldr	r3, [pc, #196]	; (80012e8 <HAL_ETH_Init+0xf4>)
 8001224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001226:	4a30      	ldr	r2, [pc, #192]	; (80012e8 <HAL_ETH_Init+0xf4>)
 8001228:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800122c:	6453      	str	r3, [r2, #68]	; 0x44
 800122e:	4b2e      	ldr	r3, [pc, #184]	; (80012e8 <HAL_ETH_Init+0xf4>)
 8001230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001232:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001236:	60bb      	str	r3, [r7, #8]
 8001238:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800123a:	4b2c      	ldr	r3, [pc, #176]	; (80012ec <HAL_ETH_Init+0xf8>)
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	4a2b      	ldr	r2, [pc, #172]	; (80012ec <HAL_ETH_Init+0xf8>)
 8001240:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001244:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001246:	4b29      	ldr	r3, [pc, #164]	; (80012ec <HAL_ETH_Init+0xf8>)
 8001248:	685a      	ldr	r2, [r3, #4]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	4927      	ldr	r1, [pc, #156]	; (80012ec <HAL_ETH_Init+0xf8>)
 8001250:	4313      	orrs	r3, r2
 8001252:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001254:	4b25      	ldr	r3, [pc, #148]	; (80012ec <HAL_ETH_Init+0xf8>)
 8001256:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	687a      	ldr	r2, [r7, #4]
 8001264:	6812      	ldr	r2, [r2, #0]
 8001266:	f043 0301 	orr.w	r3, r3, #1
 800126a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800126e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001270:	f7ff feaa 	bl	8000fc8 <HAL_GetTick>
 8001274:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001276:	e011      	b.n	800129c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001278:	f7ff fea6 	bl	8000fc8 <HAL_GetTick>
 800127c:	4602      	mov	r2, r0
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001286:	d909      	bls.n	800129c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2204      	movs	r2, #4
 800128c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	22e0      	movs	r2, #224	; 0xe0
 8001294:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001298:	2301      	movs	r3, #1
 800129a:	e021      	b.n	80012e0 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d1e4      	bne.n	8001278 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f000 f958 	bl	8001564 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f000 f9ff 	bl	80016b8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f000 fa55 	bl	800176a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	461a      	mov	r2, r3
 80012c6:	2100      	movs	r1, #0
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f000 f9bd 	bl	8001648 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2200      	movs	r2, #0
 80012d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2210      	movs	r2, #16
 80012da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80012de:	2300      	movs	r3, #0
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3710      	adds	r7, #16
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	40023800 	.word	0x40023800
 80012ec:	40013800 	.word	0x40013800

080012f0 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001302:	68fa      	ldr	r2, [r7, #12]
 8001304:	4b51      	ldr	r3, [pc, #324]	; (800144c <ETH_SetMACConfig+0x15c>)
 8001306:	4013      	ands	r3, r2
 8001308:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	7c1b      	ldrb	r3, [r3, #16]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d102      	bne.n	8001318 <ETH_SetMACConfig+0x28>
 8001312:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001316:	e000      	b.n	800131a <ETH_SetMACConfig+0x2a>
 8001318:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	7c5b      	ldrb	r3, [r3, #17]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d102      	bne.n	8001328 <ETH_SetMACConfig+0x38>
 8001322:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001326:	e000      	b.n	800132a <ETH_SetMACConfig+0x3a>
 8001328:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800132a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001330:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	7fdb      	ldrb	r3, [r3, #31]
 8001336:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001338:	431a      	orrs	r2, r3
                        macconf->Speed |
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800133e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001340:	683a      	ldr	r2, [r7, #0]
 8001342:	7f92      	ldrb	r2, [r2, #30]
 8001344:	2a00      	cmp	r2, #0
 8001346:	d102      	bne.n	800134e <ETH_SetMACConfig+0x5e>
 8001348:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800134c:	e000      	b.n	8001350 <ETH_SetMACConfig+0x60>
 800134e:	2200      	movs	r2, #0
                        macconf->Speed |
 8001350:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	7f1b      	ldrb	r3, [r3, #28]
 8001356:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001358:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800135e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	791b      	ldrb	r3, [r3, #4]
 8001364:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001366:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001368:	683a      	ldr	r2, [r7, #0]
 800136a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800136e:	2a00      	cmp	r2, #0
 8001370:	d102      	bne.n	8001378 <ETH_SetMACConfig+0x88>
 8001372:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001376:	e000      	b.n	800137a <ETH_SetMACConfig+0x8a>
 8001378:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800137a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	7bdb      	ldrb	r3, [r3, #15]
 8001380:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001382:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001388:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001390:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001392:	4313      	orrs	r3, r2
 8001394:	68fa      	ldr	r2, [r7, #12]
 8001396:	4313      	orrs	r3, r2
 8001398:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	68fa      	ldr	r2, [r7, #12]
 80013a0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80013aa:	2001      	movs	r0, #1
 80013ac:	f7ff fe18 	bl	8000fe0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	68fa      	ldr	r2, [r7, #12]
 80013b6:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	699b      	ldr	r3, [r3, #24]
 80013be:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80013c0:	68fa      	ldr	r2, [r7, #12]
 80013c2:	f64f 7341 	movw	r3, #65345	; 0xff41
 80013c6:	4013      	ands	r3, r2
 80013c8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013ce:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80013d0:	683a      	ldr	r2, [r7, #0]
 80013d2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80013d6:	2a00      	cmp	r2, #0
 80013d8:	d101      	bne.n	80013de <ETH_SetMACConfig+0xee>
 80013da:	2280      	movs	r2, #128	; 0x80
 80013dc:	e000      	b.n	80013e0 <ETH_SetMACConfig+0xf0>
 80013de:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80013e0:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80013e6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80013e8:	683a      	ldr	r2, [r7, #0]
 80013ea:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80013ee:	2a01      	cmp	r2, #1
 80013f0:	d101      	bne.n	80013f6 <ETH_SetMACConfig+0x106>
 80013f2:	2208      	movs	r2, #8
 80013f4:	e000      	b.n	80013f8 <ETH_SetMACConfig+0x108>
 80013f6:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80013f8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80013fa:	683a      	ldr	r2, [r7, #0]
 80013fc:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001400:	2a01      	cmp	r2, #1
 8001402:	d101      	bne.n	8001408 <ETH_SetMACConfig+0x118>
 8001404:	2204      	movs	r2, #4
 8001406:	e000      	b.n	800140a <ETH_SetMACConfig+0x11a>
 8001408:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800140a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800140c:	683a      	ldr	r2, [r7, #0]
 800140e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001412:	2a01      	cmp	r2, #1
 8001414:	d101      	bne.n	800141a <ETH_SetMACConfig+0x12a>
 8001416:	2202      	movs	r2, #2
 8001418:	e000      	b.n	800141c <ETH_SetMACConfig+0x12c>
 800141a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800141c:	4313      	orrs	r3, r2
 800141e:	68fa      	ldr	r2, [r7, #12]
 8001420:	4313      	orrs	r3, r2
 8001422:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	68fa      	ldr	r2, [r7, #12]
 800142a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	699b      	ldr	r3, [r3, #24]
 8001432:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001434:	2001      	movs	r0, #1
 8001436:	f7ff fdd3 	bl	8000fe0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	68fa      	ldr	r2, [r7, #12]
 8001440:	619a      	str	r2, [r3, #24]
}
 8001442:	bf00      	nop
 8001444:	3710      	adds	r7, #16
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	ff20810f 	.word	0xff20810f

08001450 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001462:	699b      	ldr	r3, [r3, #24]
 8001464:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001466:	68fa      	ldr	r2, [r7, #12]
 8001468:	4b3d      	ldr	r3, [pc, #244]	; (8001560 <ETH_SetDMAConfig+0x110>)
 800146a:	4013      	ands	r3, r2
 800146c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	7b1b      	ldrb	r3, [r3, #12]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d102      	bne.n	800147c <ETH_SetDMAConfig+0x2c>
 8001476:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800147a:	e000      	b.n	800147e <ETH_SetDMAConfig+0x2e>
 800147c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	7b5b      	ldrb	r3, [r3, #13]
 8001482:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001484:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001486:	683a      	ldr	r2, [r7, #0]
 8001488:	7f52      	ldrb	r2, [r2, #29]
 800148a:	2a00      	cmp	r2, #0
 800148c:	d102      	bne.n	8001494 <ETH_SetDMAConfig+0x44>
 800148e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001492:	e000      	b.n	8001496 <ETH_SetDMAConfig+0x46>
 8001494:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001496:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	7b9b      	ldrb	r3, [r3, #14]
 800149c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800149e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80014a4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	7f1b      	ldrb	r3, [r3, #28]
 80014aa:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80014ac:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	7f9b      	ldrb	r3, [r3, #30]
 80014b2:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80014b4:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80014ba:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80014c2:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80014c4:	4313      	orrs	r3, r2
 80014c6:	68fa      	ldr	r2, [r7, #12]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014d4:	461a      	mov	r2, r3
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014e2:	699b      	ldr	r3, [r3, #24]
 80014e4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80014e6:	2001      	movs	r0, #1
 80014e8:	f7ff fd7a 	bl	8000fe0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014f4:	461a      	mov	r2, r3
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	791b      	ldrb	r3, [r3, #4]
 80014fe:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001504:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800150a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001510:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001518:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800151a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001520:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001522:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001528:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800152a:	687a      	ldr	r2, [r7, #4]
 800152c:	6812      	ldr	r2, [r2, #0]
 800152e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001532:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001536:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001544:	2001      	movs	r0, #1
 8001546:	f7ff fd4b 	bl	8000fe0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001552:	461a      	mov	r2, r3
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	6013      	str	r3, [r2, #0]
}
 8001558:	bf00      	nop
 800155a:	3710      	adds	r7, #16
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	f8de3f23 	.word	0xf8de3f23

08001564 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b0a6      	sub	sp, #152	; 0x98
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800156c:	2301      	movs	r3, #1
 800156e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001572:	2301      	movs	r3, #1
 8001574:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001578:	2300      	movs	r3, #0
 800157a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800157c:	2300      	movs	r3, #0
 800157e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001582:	2301      	movs	r3, #1
 8001584:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001588:	2300      	movs	r3, #0
 800158a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800158e:	2301      	movs	r3, #1
 8001590:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001594:	2300      	movs	r3, #0
 8001596:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800159a:	2300      	movs	r3, #0
 800159c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80015a0:	2300      	movs	r3, #0
 80015a2:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80015a4:	2300      	movs	r3, #0
 80015a6:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80015aa:	2300      	movs	r3, #0
 80015ac:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80015ae:	2300      	movs	r3, #0
 80015b0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80015b4:	2300      	movs	r3, #0
 80015b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80015ba:	2300      	movs	r3, #0
 80015bc:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80015c0:	2300      	movs	r3, #0
 80015c2:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80015c6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80015ca:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80015cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80015d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80015d2:	2300      	movs	r3, #0
 80015d4:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80015d8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80015dc:	4619      	mov	r1, r3
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f7ff fe86 	bl	80012f0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80015e4:	2301      	movs	r3, #1
 80015e6:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80015e8:	2301      	movs	r3, #1
 80015ea:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80015ec:	2301      	movs	r3, #1
 80015ee:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80015f2:	2301      	movs	r3, #1
 80015f4:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80015f6:	2300      	movs	r3, #0
 80015f8:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80015fa:	2300      	movs	r3, #0
 80015fc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001600:	2300      	movs	r3, #0
 8001602:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001606:	2300      	movs	r3, #0
 8001608:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800160a:	2301      	movs	r3, #1
 800160c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001610:	2301      	movs	r3, #1
 8001612:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001614:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001618:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800161a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800161e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001620:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001624:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001626:	2301      	movs	r3, #1
 8001628:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800162c:	2300      	movs	r3, #0
 800162e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001630:	2300      	movs	r3, #0
 8001632:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001634:	f107 0308 	add.w	r3, r7, #8
 8001638:	4619      	mov	r1, r3
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f7ff ff08 	bl	8001450 <ETH_SetDMAConfig>
}
 8001640:	bf00      	nop
 8001642:	3798      	adds	r7, #152	; 0x98
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}

08001648 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001648:	b480      	push	{r7}
 800164a:	b087      	sub	sp, #28
 800164c:	af00      	add	r7, sp, #0
 800164e:	60f8      	str	r0, [r7, #12]
 8001650:	60b9      	str	r1, [r7, #8]
 8001652:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	3305      	adds	r3, #5
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	021b      	lsls	r3, r3, #8
 800165c:	687a      	ldr	r2, [r7, #4]
 800165e:	3204      	adds	r2, #4
 8001660:	7812      	ldrb	r2, [r2, #0]
 8001662:	4313      	orrs	r3, r2
 8001664:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001666:	68ba      	ldr	r2, [r7, #8]
 8001668:	4b11      	ldr	r3, [pc, #68]	; (80016b0 <ETH_MACAddressConfig+0x68>)
 800166a:	4413      	add	r3, r2
 800166c:	461a      	mov	r2, r3
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	3303      	adds	r3, #3
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	061a      	lsls	r2, r3, #24
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	3302      	adds	r3, #2
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	041b      	lsls	r3, r3, #16
 8001682:	431a      	orrs	r2, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	3301      	adds	r3, #1
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	021b      	lsls	r3, r3, #8
 800168c:	4313      	orrs	r3, r2
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	7812      	ldrb	r2, [r2, #0]
 8001692:	4313      	orrs	r3, r2
 8001694:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001696:	68ba      	ldr	r2, [r7, #8]
 8001698:	4b06      	ldr	r3, [pc, #24]	; (80016b4 <ETH_MACAddressConfig+0x6c>)
 800169a:	4413      	add	r3, r2
 800169c:	461a      	mov	r2, r3
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	6013      	str	r3, [r2, #0]
}
 80016a2:	bf00      	nop
 80016a4:	371c      	adds	r7, #28
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	40028040 	.word	0x40028040
 80016b4:	40028044 	.word	0x40028044

080016b8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b085      	sub	sp, #20
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80016c0:	2300      	movs	r3, #0
 80016c2:	60fb      	str	r3, [r7, #12]
 80016c4:	e03e      	b.n	8001744 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	68d9      	ldr	r1, [r3, #12]
 80016ca:	68fa      	ldr	r2, [r7, #12]
 80016cc:	4613      	mov	r3, r2
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	4413      	add	r3, r2
 80016d2:	00db      	lsls	r3, r3, #3
 80016d4:	440b      	add	r3, r1
 80016d6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	2200      	movs	r2, #0
 80016dc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	2200      	movs	r2, #0
 80016e2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	2200      	movs	r2, #0
 80016e8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	2200      	movs	r2, #0
 80016ee:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80016f0:	68b9      	ldr	r1, [r7, #8]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	68fa      	ldr	r2, [r7, #12]
 80016f6:	3206      	adds	r2, #6
 80016f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	2b02      	cmp	r3, #2
 800170c:	d80c      	bhi.n	8001728 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	68d9      	ldr	r1, [r3, #12]
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	1c5a      	adds	r2, r3, #1
 8001716:	4613      	mov	r3, r2
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	4413      	add	r3, r2
 800171c:	00db      	lsls	r3, r3, #3
 800171e:	440b      	add	r3, r1
 8001720:	461a      	mov	r2, r3
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	60da      	str	r2, [r3, #12]
 8001726:	e004      	b.n	8001732 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	461a      	mov	r2, r3
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	3301      	adds	r3, #1
 8001742:	60fb      	str	r3, [r7, #12]
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	2b03      	cmp	r3, #3
 8001748:	d9bd      	bls.n	80016c6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2200      	movs	r2, #0
 800174e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	68da      	ldr	r2, [r3, #12]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800175c:	611a      	str	r2, [r3, #16]
}
 800175e:	bf00      	nop
 8001760:	3714      	adds	r7, #20
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr

0800176a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800176a:	b480      	push	{r7}
 800176c:	b085      	sub	sp, #20
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001772:	2300      	movs	r3, #0
 8001774:	60fb      	str	r3, [r7, #12]
 8001776:	e046      	b.n	8001806 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6919      	ldr	r1, [r3, #16]
 800177c:	68fa      	ldr	r2, [r7, #12]
 800177e:	4613      	mov	r3, r2
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	4413      	add	r3, r2
 8001784:	00db      	lsls	r3, r3, #3
 8001786:	440b      	add	r3, r1
 8001788:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	2200      	movs	r2, #0
 8001794:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	2200      	movs	r2, #0
 800179a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	2200      	movs	r2, #0
 80017a0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	2200      	movs	r2, #0
 80017a6:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	2200      	movs	r2, #0
 80017ac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80017b4:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80017bc:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80017ca:	68b9      	ldr	r1, [r7, #8]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	68fa      	ldr	r2, [r7, #12]
 80017d0:	3212      	adds	r2, #18
 80017d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d80c      	bhi.n	80017f6 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6919      	ldr	r1, [r3, #16]
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	1c5a      	adds	r2, r3, #1
 80017e4:	4613      	mov	r3, r2
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	4413      	add	r3, r2
 80017ea:	00db      	lsls	r3, r3, #3
 80017ec:	440b      	add	r3, r1
 80017ee:	461a      	mov	r2, r3
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	60da      	str	r2, [r3, #12]
 80017f4:	e004      	b.n	8001800 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	691b      	ldr	r3, [r3, #16]
 80017fa:	461a      	mov	r2, r3
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	3301      	adds	r3, #1
 8001804:	60fb      	str	r3, [r7, #12]
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	2b03      	cmp	r3, #3
 800180a:	d9b5      	bls.n	8001778 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2200      	movs	r2, #0
 8001810:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2200      	movs	r2, #0
 8001816:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2200      	movs	r2, #0
 800181c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2200      	movs	r2, #0
 8001822:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2200      	movs	r2, #0
 8001828:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	691a      	ldr	r2, [r3, #16]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001836:	60da      	str	r2, [r3, #12]
}
 8001838:	bf00      	nop
 800183a:	3714      	adds	r7, #20
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b086      	sub	sp, #24
 8001848:	af00      	add	r7, sp, #0
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001856:	4b23      	ldr	r3, [pc, #140]	; (80018e4 <HAL_FLASH_Program+0xa0>)
 8001858:	7e1b      	ldrb	r3, [r3, #24]
 800185a:	2b01      	cmp	r3, #1
 800185c:	d101      	bne.n	8001862 <HAL_FLASH_Program+0x1e>
 800185e:	2302      	movs	r3, #2
 8001860:	e03b      	b.n	80018da <HAL_FLASH_Program+0x96>
 8001862:	4b20      	ldr	r3, [pc, #128]	; (80018e4 <HAL_FLASH_Program+0xa0>)
 8001864:	2201      	movs	r2, #1
 8001866:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001868:	f24c 3050 	movw	r0, #50000	; 0xc350
 800186c:	f000 f870 	bl	8001950 <FLASH_WaitForLastOperation>
 8001870:	4603      	mov	r3, r0
 8001872:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001874:	7dfb      	ldrb	r3, [r7, #23]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d12b      	bne.n	80018d2 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d105      	bne.n	800188c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001880:	783b      	ldrb	r3, [r7, #0]
 8001882:	4619      	mov	r1, r3
 8001884:	68b8      	ldr	r0, [r7, #8]
 8001886:	f000 f91b 	bl	8001ac0 <FLASH_Program_Byte>
 800188a:	e016      	b.n	80018ba <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	2b01      	cmp	r3, #1
 8001890:	d105      	bne.n	800189e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001892:	883b      	ldrh	r3, [r7, #0]
 8001894:	4619      	mov	r1, r3
 8001896:	68b8      	ldr	r0, [r7, #8]
 8001898:	f000 f8ee 	bl	8001a78 <FLASH_Program_HalfWord>
 800189c:	e00d      	b.n	80018ba <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	d105      	bne.n	80018b0 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	4619      	mov	r1, r3
 80018a8:	68b8      	ldr	r0, [r7, #8]
 80018aa:	f000 f8c3 	bl	8001a34 <FLASH_Program_Word>
 80018ae:	e004      	b.n	80018ba <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80018b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80018b4:	68b8      	ldr	r0, [r7, #8]
 80018b6:	f000 f88b 	bl	80019d0 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80018ba:	f24c 3050 	movw	r0, #50000	; 0xc350
 80018be:	f000 f847 	bl	8001950 <FLASH_WaitForLastOperation>
 80018c2:	4603      	mov	r3, r0
 80018c4:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80018c6:	4b08      	ldr	r3, [pc, #32]	; (80018e8 <HAL_FLASH_Program+0xa4>)
 80018c8:	691b      	ldr	r3, [r3, #16]
 80018ca:	4a07      	ldr	r2, [pc, #28]	; (80018e8 <HAL_FLASH_Program+0xa4>)
 80018cc:	f023 0301 	bic.w	r3, r3, #1
 80018d0:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80018d2:	4b04      	ldr	r3, [pc, #16]	; (80018e4 <HAL_FLASH_Program+0xa0>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	761a      	strb	r2, [r3, #24]
  
  return status;
 80018d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3718      	adds	r7, #24
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	20004244 	.word	0x20004244
 80018e8:	40023c00 	.word	0x40023c00

080018ec <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80018f2:	2300      	movs	r3, #0
 80018f4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80018f6:	4b0b      	ldr	r3, [pc, #44]	; (8001924 <HAL_FLASH_Unlock+0x38>)
 80018f8:	691b      	ldr	r3, [r3, #16]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	da0b      	bge.n	8001916 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80018fe:	4b09      	ldr	r3, [pc, #36]	; (8001924 <HAL_FLASH_Unlock+0x38>)
 8001900:	4a09      	ldr	r2, [pc, #36]	; (8001928 <HAL_FLASH_Unlock+0x3c>)
 8001902:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001904:	4b07      	ldr	r3, [pc, #28]	; (8001924 <HAL_FLASH_Unlock+0x38>)
 8001906:	4a09      	ldr	r2, [pc, #36]	; (800192c <HAL_FLASH_Unlock+0x40>)
 8001908:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800190a:	4b06      	ldr	r3, [pc, #24]	; (8001924 <HAL_FLASH_Unlock+0x38>)
 800190c:	691b      	ldr	r3, [r3, #16]
 800190e:	2b00      	cmp	r3, #0
 8001910:	da01      	bge.n	8001916 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001916:	79fb      	ldrb	r3, [r7, #7]
}
 8001918:	4618      	mov	r0, r3
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr
 8001924:	40023c00 	.word	0x40023c00
 8001928:	45670123 	.word	0x45670123
 800192c:	cdef89ab 	.word	0xcdef89ab

08001930 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001934:	4b05      	ldr	r3, [pc, #20]	; (800194c <HAL_FLASH_Lock+0x1c>)
 8001936:	691b      	ldr	r3, [r3, #16]
 8001938:	4a04      	ldr	r2, [pc, #16]	; (800194c <HAL_FLASH_Lock+0x1c>)
 800193a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800193e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001940:	2300      	movs	r3, #0
}
 8001942:	4618      	mov	r0, r3
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr
 800194c:	40023c00 	.word	0x40023c00

08001950 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001958:	2300      	movs	r3, #0
 800195a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800195c:	4b1a      	ldr	r3, [pc, #104]	; (80019c8 <FLASH_WaitForLastOperation+0x78>)
 800195e:	2200      	movs	r2, #0
 8001960:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001962:	f7ff fb31 	bl	8000fc8 <HAL_GetTick>
 8001966:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001968:	e010      	b.n	800198c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001970:	d00c      	beq.n	800198c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d007      	beq.n	8001988 <FLASH_WaitForLastOperation+0x38>
 8001978:	f7ff fb26 	bl	8000fc8 <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	429a      	cmp	r2, r3
 8001986:	d201      	bcs.n	800198c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001988:	2303      	movs	r3, #3
 800198a:	e019      	b.n	80019c0 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800198c:	4b0f      	ldr	r3, [pc, #60]	; (80019cc <FLASH_WaitForLastOperation+0x7c>)
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d1e8      	bne.n	800196a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001998:	4b0c      	ldr	r3, [pc, #48]	; (80019cc <FLASH_WaitForLastOperation+0x7c>)
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	f003 0301 	and.w	r3, r3, #1
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d002      	beq.n	80019aa <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80019a4:	4b09      	ldr	r3, [pc, #36]	; (80019cc <FLASH_WaitForLastOperation+0x7c>)
 80019a6:	2201      	movs	r2, #1
 80019a8:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80019aa:	4b08      	ldr	r3, [pc, #32]	; (80019cc <FLASH_WaitForLastOperation+0x7c>)
 80019ac:	68db      	ldr	r3, [r3, #12]
 80019ae:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d003      	beq.n	80019be <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80019b6:	f000 f8a5 	bl	8001b04 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e000      	b.n	80019c0 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80019be:	2300      	movs	r3, #0
  
}  
 80019c0:	4618      	mov	r0, r3
 80019c2:	3710      	adds	r7, #16
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	20004244 	.word	0x20004244
 80019cc:	40023c00 	.word	0x40023c00

080019d0 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b085      	sub	sp, #20
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	60f8      	str	r0, [r7, #12]
 80019d8:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80019dc:	4b14      	ldr	r3, [pc, #80]	; (8001a30 <FLASH_Program_DoubleWord+0x60>)
 80019de:	691b      	ldr	r3, [r3, #16]
 80019e0:	4a13      	ldr	r2, [pc, #76]	; (8001a30 <FLASH_Program_DoubleWord+0x60>)
 80019e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019e6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80019e8:	4b11      	ldr	r3, [pc, #68]	; (8001a30 <FLASH_Program_DoubleWord+0x60>)
 80019ea:	691b      	ldr	r3, [r3, #16]
 80019ec:	4a10      	ldr	r2, [pc, #64]	; (8001a30 <FLASH_Program_DoubleWord+0x60>)
 80019ee:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80019f2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80019f4:	4b0e      	ldr	r3, [pc, #56]	; (8001a30 <FLASH_Program_DoubleWord+0x60>)
 80019f6:	691b      	ldr	r3, [r3, #16]
 80019f8:	4a0d      	ldr	r2, [pc, #52]	; (8001a30 <FLASH_Program_DoubleWord+0x60>)
 80019fa:	f043 0301 	orr.w	r3, r3, #1
 80019fe:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	683a      	ldr	r2, [r7, #0]
 8001a04:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8001a06:	f3bf 8f6f 	isb	sy
}
 8001a0a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001a0c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a10:	f04f 0200 	mov.w	r2, #0
 8001a14:	f04f 0300 	mov.w	r3, #0
 8001a18:	000a      	movs	r2, r1
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	68f9      	ldr	r1, [r7, #12]
 8001a1e:	3104      	adds	r1, #4
 8001a20:	4613      	mov	r3, r2
 8001a22:	600b      	str	r3, [r1, #0]
}
 8001a24:	bf00      	nop
 8001a26:	3714      	adds	r7, #20
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr
 8001a30:	40023c00 	.word	0x40023c00

08001a34 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001a3e:	4b0d      	ldr	r3, [pc, #52]	; (8001a74 <FLASH_Program_Word+0x40>)
 8001a40:	691b      	ldr	r3, [r3, #16]
 8001a42:	4a0c      	ldr	r2, [pc, #48]	; (8001a74 <FLASH_Program_Word+0x40>)
 8001a44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a48:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001a4a:	4b0a      	ldr	r3, [pc, #40]	; (8001a74 <FLASH_Program_Word+0x40>)
 8001a4c:	691b      	ldr	r3, [r3, #16]
 8001a4e:	4a09      	ldr	r2, [pc, #36]	; (8001a74 <FLASH_Program_Word+0x40>)
 8001a50:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a54:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001a56:	4b07      	ldr	r3, [pc, #28]	; (8001a74 <FLASH_Program_Word+0x40>)
 8001a58:	691b      	ldr	r3, [r3, #16]
 8001a5a:	4a06      	ldr	r2, [pc, #24]	; (8001a74 <FLASH_Program_Word+0x40>)
 8001a5c:	f043 0301 	orr.w	r3, r3, #1
 8001a60:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	683a      	ldr	r2, [r7, #0]
 8001a66:	601a      	str	r2, [r3, #0]
}
 8001a68:	bf00      	nop
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr
 8001a74:	40023c00 	.word	0x40023c00

08001a78 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	460b      	mov	r3, r1
 8001a82:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001a84:	4b0d      	ldr	r3, [pc, #52]	; (8001abc <FLASH_Program_HalfWord+0x44>)
 8001a86:	691b      	ldr	r3, [r3, #16]
 8001a88:	4a0c      	ldr	r2, [pc, #48]	; (8001abc <FLASH_Program_HalfWord+0x44>)
 8001a8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a8e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001a90:	4b0a      	ldr	r3, [pc, #40]	; (8001abc <FLASH_Program_HalfWord+0x44>)
 8001a92:	691b      	ldr	r3, [r3, #16]
 8001a94:	4a09      	ldr	r2, [pc, #36]	; (8001abc <FLASH_Program_HalfWord+0x44>)
 8001a96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a9a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001a9c:	4b07      	ldr	r3, [pc, #28]	; (8001abc <FLASH_Program_HalfWord+0x44>)
 8001a9e:	691b      	ldr	r3, [r3, #16]
 8001aa0:	4a06      	ldr	r2, [pc, #24]	; (8001abc <FLASH_Program_HalfWord+0x44>)
 8001aa2:	f043 0301 	orr.w	r3, r3, #1
 8001aa6:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	887a      	ldrh	r2, [r7, #2]
 8001aac:	801a      	strh	r2, [r3, #0]
}
 8001aae:	bf00      	nop
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	40023c00 	.word	0x40023c00

08001ac0 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	460b      	mov	r3, r1
 8001aca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001acc:	4b0c      	ldr	r3, [pc, #48]	; (8001b00 <FLASH_Program_Byte+0x40>)
 8001ace:	691b      	ldr	r3, [r3, #16]
 8001ad0:	4a0b      	ldr	r2, [pc, #44]	; (8001b00 <FLASH_Program_Byte+0x40>)
 8001ad2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ad6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001ad8:	4b09      	ldr	r3, [pc, #36]	; (8001b00 <FLASH_Program_Byte+0x40>)
 8001ada:	4a09      	ldr	r2, [pc, #36]	; (8001b00 <FLASH_Program_Byte+0x40>)
 8001adc:	691b      	ldr	r3, [r3, #16]
 8001ade:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001ae0:	4b07      	ldr	r3, [pc, #28]	; (8001b00 <FLASH_Program_Byte+0x40>)
 8001ae2:	691b      	ldr	r3, [r3, #16]
 8001ae4:	4a06      	ldr	r2, [pc, #24]	; (8001b00 <FLASH_Program_Byte+0x40>)
 8001ae6:	f043 0301 	orr.w	r3, r3, #1
 8001aea:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	78fa      	ldrb	r2, [r7, #3]
 8001af0:	701a      	strb	r2, [r3, #0]
}
 8001af2:	bf00      	nop
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	40023c00 	.word	0x40023c00

08001b04 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001b08:	4b2f      	ldr	r3, [pc, #188]	; (8001bc8 <FLASH_SetErrorCode+0xc4>)
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	f003 0310 	and.w	r3, r3, #16
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d008      	beq.n	8001b26 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001b14:	4b2d      	ldr	r3, [pc, #180]	; (8001bcc <FLASH_SetErrorCode+0xc8>)
 8001b16:	69db      	ldr	r3, [r3, #28]
 8001b18:	f043 0310 	orr.w	r3, r3, #16
 8001b1c:	4a2b      	ldr	r2, [pc, #172]	; (8001bcc <FLASH_SetErrorCode+0xc8>)
 8001b1e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001b20:	4b29      	ldr	r3, [pc, #164]	; (8001bc8 <FLASH_SetErrorCode+0xc4>)
 8001b22:	2210      	movs	r2, #16
 8001b24:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001b26:	4b28      	ldr	r3, [pc, #160]	; (8001bc8 <FLASH_SetErrorCode+0xc4>)
 8001b28:	68db      	ldr	r3, [r3, #12]
 8001b2a:	f003 0320 	and.w	r3, r3, #32
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d008      	beq.n	8001b44 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001b32:	4b26      	ldr	r3, [pc, #152]	; (8001bcc <FLASH_SetErrorCode+0xc8>)
 8001b34:	69db      	ldr	r3, [r3, #28]
 8001b36:	f043 0308 	orr.w	r3, r3, #8
 8001b3a:	4a24      	ldr	r2, [pc, #144]	; (8001bcc <FLASH_SetErrorCode+0xc8>)
 8001b3c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001b3e:	4b22      	ldr	r3, [pc, #136]	; (8001bc8 <FLASH_SetErrorCode+0xc4>)
 8001b40:	2220      	movs	r2, #32
 8001b42:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001b44:	4b20      	ldr	r3, [pc, #128]	; (8001bc8 <FLASH_SetErrorCode+0xc4>)
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d008      	beq.n	8001b62 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001b50:	4b1e      	ldr	r3, [pc, #120]	; (8001bcc <FLASH_SetErrorCode+0xc8>)
 8001b52:	69db      	ldr	r3, [r3, #28]
 8001b54:	f043 0304 	orr.w	r3, r3, #4
 8001b58:	4a1c      	ldr	r2, [pc, #112]	; (8001bcc <FLASH_SetErrorCode+0xc8>)
 8001b5a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001b5c:	4b1a      	ldr	r3, [pc, #104]	; (8001bc8 <FLASH_SetErrorCode+0xc4>)
 8001b5e:	2240      	movs	r2, #64	; 0x40
 8001b60:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001b62:	4b19      	ldr	r3, [pc, #100]	; (8001bc8 <FLASH_SetErrorCode+0xc4>)
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d008      	beq.n	8001b80 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001b6e:	4b17      	ldr	r3, [pc, #92]	; (8001bcc <FLASH_SetErrorCode+0xc8>)
 8001b70:	69db      	ldr	r3, [r3, #28]
 8001b72:	f043 0302 	orr.w	r3, r3, #2
 8001b76:	4a15      	ldr	r2, [pc, #84]	; (8001bcc <FLASH_SetErrorCode+0xc8>)
 8001b78:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001b7a:	4b13      	ldr	r3, [pc, #76]	; (8001bc8 <FLASH_SetErrorCode+0xc4>)
 8001b7c:	2280      	movs	r2, #128	; 0x80
 8001b7e:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8001b80:	4b11      	ldr	r3, [pc, #68]	; (8001bc8 <FLASH_SetErrorCode+0xc4>)
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d009      	beq.n	8001ba0 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8001b8c:	4b0f      	ldr	r3, [pc, #60]	; (8001bcc <FLASH_SetErrorCode+0xc8>)
 8001b8e:	69db      	ldr	r3, [r3, #28]
 8001b90:	f043 0301 	orr.w	r3, r3, #1
 8001b94:	4a0d      	ldr	r2, [pc, #52]	; (8001bcc <FLASH_SetErrorCode+0xc8>)
 8001b96:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8001b98:	4b0b      	ldr	r3, [pc, #44]	; (8001bc8 <FLASH_SetErrorCode+0xc4>)
 8001b9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b9e:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001ba0:	4b09      	ldr	r3, [pc, #36]	; (8001bc8 <FLASH_SetErrorCode+0xc4>)
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	f003 0302 	and.w	r3, r3, #2
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d008      	beq.n	8001bbe <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001bac:	4b07      	ldr	r3, [pc, #28]	; (8001bcc <FLASH_SetErrorCode+0xc8>)
 8001bae:	69db      	ldr	r3, [r3, #28]
 8001bb0:	f043 0320 	orr.w	r3, r3, #32
 8001bb4:	4a05      	ldr	r2, [pc, #20]	; (8001bcc <FLASH_SetErrorCode+0xc8>)
 8001bb6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001bb8:	4b03      	ldr	r3, [pc, #12]	; (8001bc8 <FLASH_SetErrorCode+0xc4>)
 8001bba:	2202      	movs	r2, #2
 8001bbc:	60da      	str	r2, [r3, #12]
  }
}
 8001bbe:	bf00      	nop
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr
 8001bc8:	40023c00 	.word	0x40023c00
 8001bcc:	20004244 	.word	0x20004244

08001bd0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8001bde:	2300      	movs	r3, #0
 8001be0:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001be2:	4b32      	ldr	r3, [pc, #200]	; (8001cac <HAL_FLASHEx_Erase+0xdc>)
 8001be4:	7e1b      	ldrb	r3, [r3, #24]
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d101      	bne.n	8001bee <HAL_FLASHEx_Erase+0x1e>
 8001bea:	2302      	movs	r3, #2
 8001bec:	e05a      	b.n	8001ca4 <HAL_FLASHEx_Erase+0xd4>
 8001bee:	4b2f      	ldr	r3, [pc, #188]	; (8001cac <HAL_FLASHEx_Erase+0xdc>)
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001bf4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001bf8:	f7ff feaa 	bl	8001950 <FLASH_WaitForLastOperation>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001c00:	7bfb      	ldrb	r3, [r7, #15]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d14a      	bne.n	8001c9c <HAL_FLASHEx_Erase+0xcc>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	f04f 32ff 	mov.w	r2, #4294967295
 8001c0c:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d117      	bne.n	8001c46 <HAL_FLASHEx_Erase+0x76>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	691b      	ldr	r3, [r3, #16]
 8001c1a:	b2da      	uxtb	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	4619      	mov	r1, r3
 8001c22:	4610      	mov	r0, r2
 8001c24:	f000 f846 	bl	8001cb4 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001c28:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001c2c:	f7ff fe90 	bl	8001950 <FLASH_WaitForLastOperation>
 8001c30:	4603      	mov	r3, r0
 8001c32:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001c34:	4b1e      	ldr	r3, [pc, #120]	; (8001cb0 <HAL_FLASHEx_Erase+0xe0>)
 8001c36:	691b      	ldr	r3, [r3, #16]
 8001c38:	4a1d      	ldr	r2, [pc, #116]	; (8001cb0 <HAL_FLASHEx_Erase+0xe0>)
 8001c3a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001c3e:	f023 0304 	bic.w	r3, r3, #4
 8001c42:	6113      	str	r3, [r2, #16]
 8001c44:	e028      	b.n	8001c98 <HAL_FLASHEx_Erase+0xc8>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	60bb      	str	r3, [r7, #8]
 8001c4c:	e01c      	b.n	8001c88 <HAL_FLASHEx_Erase+0xb8>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	691b      	ldr	r3, [r3, #16]
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	4619      	mov	r1, r3
 8001c56:	68b8      	ldr	r0, [r7, #8]
 8001c58:	f000 f866 	bl	8001d28 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001c5c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001c60:	f7ff fe76 	bl	8001950 <FLASH_WaitForLastOperation>
 8001c64:	4603      	mov	r3, r0
 8001c66:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001c68:	4b11      	ldr	r3, [pc, #68]	; (8001cb0 <HAL_FLASHEx_Erase+0xe0>)
 8001c6a:	691b      	ldr	r3, [r3, #16]
 8001c6c:	4a10      	ldr	r2, [pc, #64]	; (8001cb0 <HAL_FLASHEx_Erase+0xe0>)
 8001c6e:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8001c72:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8001c74:	7bfb      	ldrb	r3, [r7, #15]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d003      	beq.n	8001c82 <HAL_FLASHEx_Erase+0xb2>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	68ba      	ldr	r2, [r7, #8]
 8001c7e:	601a      	str	r2, [r3, #0]
          break;
 8001c80:	e00a      	b.n	8001c98 <HAL_FLASHEx_Erase+0xc8>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	3301      	adds	r3, #1
 8001c86:	60bb      	str	r3, [r7, #8]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	68da      	ldr	r2, [r3, #12]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	4413      	add	r3, r2
 8001c92:	68ba      	ldr	r2, [r7, #8]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d3da      	bcc.n	8001c4e <HAL_FLASHEx_Erase+0x7e>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8001c98:	f000 f894 	bl	8001dc4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001c9c:	4b03      	ldr	r3, [pc, #12]	; (8001cac <HAL_FLASHEx_Erase+0xdc>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	761a      	strb	r2, [r3, #24]

  return status;
 8001ca2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3710      	adds	r7, #16
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	20004244 	.word	0x20004244
 8001cb0:	40023c00 	.word	0x40023c00

08001cb4 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	4603      	mov	r3, r0
 8001cbc:	6039      	str	r1, [r7, #0]
 8001cbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001cc0:	4b18      	ldr	r3, [pc, #96]	; (8001d24 <FLASH_MassErase+0x70>)
 8001cc2:	691b      	ldr	r3, [r3, #16]
 8001cc4:	4a17      	ldr	r2, [pc, #92]	; (8001d24 <FLASH_MassErase+0x70>)
 8001cc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001cca:	6113      	str	r3, [r2, #16]

  if (Banks == FLASH_BANK_BOTH)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	2b03      	cmp	r3, #3
 8001cd0:	d108      	bne.n	8001ce4 <FLASH_MassErase+0x30>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 8001cd2:	4b14      	ldr	r3, [pc, #80]	; (8001d24 <FLASH_MassErase+0x70>)
 8001cd4:	691b      	ldr	r3, [r3, #16]
 8001cd6:	4a13      	ldr	r2, [pc, #76]	; (8001d24 <FLASH_MassErase+0x70>)
 8001cd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cdc:	f043 0304 	orr.w	r3, r3, #4
 8001ce0:	6113      	str	r3, [r2, #16]
 8001ce2:	e00f      	b.n	8001d04 <FLASH_MassErase+0x50>
  }
  else if (Banks == FLASH_BANK_1)
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d106      	bne.n	8001cf8 <FLASH_MassErase+0x44>
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;
 8001cea:	4b0e      	ldr	r3, [pc, #56]	; (8001d24 <FLASH_MassErase+0x70>)
 8001cec:	691b      	ldr	r3, [r3, #16]
 8001cee:	4a0d      	ldr	r2, [pc, #52]	; (8001d24 <FLASH_MassErase+0x70>)
 8001cf0:	f043 0304 	orr.w	r3, r3, #4
 8001cf4:	6113      	str	r3, [r2, #16]
 8001cf6:	e005      	b.n	8001d04 <FLASH_MassErase+0x50>
  }
  else
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 8001cf8:	4b0a      	ldr	r3, [pc, #40]	; (8001d24 <FLASH_MassErase+0x70>)
 8001cfa:	691b      	ldr	r3, [r3, #16]
 8001cfc:	4a09      	ldr	r2, [pc, #36]	; (8001d24 <FLASH_MassErase+0x70>)
 8001cfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d02:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8001d04:	4b07      	ldr	r3, [pc, #28]	; (8001d24 <FLASH_MassErase+0x70>)
 8001d06:	691a      	ldr	r2, [r3, #16]
 8001d08:	79fb      	ldrb	r3, [r7, #7]
 8001d0a:	021b      	lsls	r3, r3, #8
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	4a05      	ldr	r2, [pc, #20]	; (8001d24 <FLASH_MassErase+0x70>)
 8001d10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d14:	6113      	str	r3, [r2, #16]
}
 8001d16:	bf00      	nop
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	40023c00 	.word	0x40023c00

08001d28 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b085      	sub	sp, #20
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	460b      	mov	r3, r1
 8001d32:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001d34:	2300      	movs	r3, #0
 8001d36:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001d38:	78fb      	ldrb	r3, [r7, #3]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d102      	bne.n	8001d44 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	60fb      	str	r3, [r7, #12]
 8001d42:	e010      	b.n	8001d66 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001d44:	78fb      	ldrb	r3, [r7, #3]
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d103      	bne.n	8001d52 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001d4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d4e:	60fb      	str	r3, [r7, #12]
 8001d50:	e009      	b.n	8001d66 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001d52:	78fb      	ldrb	r3, [r7, #3]
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d103      	bne.n	8001d60 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001d58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d5c:	60fb      	str	r3, [r7, #12]
 8001d5e:	e002      	b.n	8001d66 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001d60:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d64:	60fb      	str	r3, [r7, #12]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if (Sector > FLASH_SECTOR_11)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2b0b      	cmp	r3, #11
 8001d6a:	d902      	bls.n	8001d72 <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	3304      	adds	r3, #4
 8001d70:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001d72:	4b13      	ldr	r3, [pc, #76]	; (8001dc0 <FLASH_Erase_Sector+0x98>)
 8001d74:	691b      	ldr	r3, [r3, #16]
 8001d76:	4a12      	ldr	r2, [pc, #72]	; (8001dc0 <FLASH_Erase_Sector+0x98>)
 8001d78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d7c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8001d7e:	4b10      	ldr	r3, [pc, #64]	; (8001dc0 <FLASH_Erase_Sector+0x98>)
 8001d80:	691a      	ldr	r2, [r3, #16]
 8001d82:	490f      	ldr	r1, [pc, #60]	; (8001dc0 <FLASH_Erase_Sector+0x98>)
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001d8a:	4b0d      	ldr	r3, [pc, #52]	; (8001dc0 <FLASH_Erase_Sector+0x98>)
 8001d8c:	691b      	ldr	r3, [r3, #16]
 8001d8e:	4a0c      	ldr	r2, [pc, #48]	; (8001dc0 <FLASH_Erase_Sector+0x98>)
 8001d90:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001d94:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001d96:	4b0a      	ldr	r3, [pc, #40]	; (8001dc0 <FLASH_Erase_Sector+0x98>)
 8001d98:	691a      	ldr	r2, [r3, #16]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	00db      	lsls	r3, r3, #3
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	4a07      	ldr	r2, [pc, #28]	; (8001dc0 <FLASH_Erase_Sector+0x98>)
 8001da2:	f043 0302 	orr.w	r3, r3, #2
 8001da6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001da8:	4b05      	ldr	r3, [pc, #20]	; (8001dc0 <FLASH_Erase_Sector+0x98>)
 8001daa:	691b      	ldr	r3, [r3, #16]
 8001dac:	4a04      	ldr	r2, [pc, #16]	; (8001dc0 <FLASH_Erase_Sector+0x98>)
 8001dae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001db2:	6113      	str	r3, [r2, #16]
}
 8001db4:	bf00      	nop
 8001db6:	3714      	adds	r7, #20
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr
 8001dc0:	40023c00 	.word	0x40023c00

08001dc4 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8001dc8:	4b20      	ldr	r3, [pc, #128]	; (8001e4c <FLASH_FlushCaches+0x88>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d017      	beq.n	8001e04 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001dd4:	4b1d      	ldr	r3, [pc, #116]	; (8001e4c <FLASH_FlushCaches+0x88>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a1c      	ldr	r2, [pc, #112]	; (8001e4c <FLASH_FlushCaches+0x88>)
 8001dda:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001dde:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001de0:	4b1a      	ldr	r3, [pc, #104]	; (8001e4c <FLASH_FlushCaches+0x88>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a19      	ldr	r2, [pc, #100]	; (8001e4c <FLASH_FlushCaches+0x88>)
 8001de6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001dea:	6013      	str	r3, [r2, #0]
 8001dec:	4b17      	ldr	r3, [pc, #92]	; (8001e4c <FLASH_FlushCaches+0x88>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a16      	ldr	r2, [pc, #88]	; (8001e4c <FLASH_FlushCaches+0x88>)
 8001df2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001df6:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001df8:	4b14      	ldr	r3, [pc, #80]	; (8001e4c <FLASH_FlushCaches+0x88>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a13      	ldr	r2, [pc, #76]	; (8001e4c <FLASH_FlushCaches+0x88>)
 8001dfe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e02:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8001e04:	4b11      	ldr	r3, [pc, #68]	; (8001e4c <FLASH_FlushCaches+0x88>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d017      	beq.n	8001e40 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001e10:	4b0e      	ldr	r3, [pc, #56]	; (8001e4c <FLASH_FlushCaches+0x88>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a0d      	ldr	r2, [pc, #52]	; (8001e4c <FLASH_FlushCaches+0x88>)
 8001e16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001e1a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001e1c:	4b0b      	ldr	r3, [pc, #44]	; (8001e4c <FLASH_FlushCaches+0x88>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a0a      	ldr	r2, [pc, #40]	; (8001e4c <FLASH_FlushCaches+0x88>)
 8001e22:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e26:	6013      	str	r3, [r2, #0]
 8001e28:	4b08      	ldr	r3, [pc, #32]	; (8001e4c <FLASH_FlushCaches+0x88>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a07      	ldr	r2, [pc, #28]	; (8001e4c <FLASH_FlushCaches+0x88>)
 8001e2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001e32:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e34:	4b05      	ldr	r3, [pc, #20]	; (8001e4c <FLASH_FlushCaches+0x88>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a04      	ldr	r2, [pc, #16]	; (8001e4c <FLASH_FlushCaches+0x88>)
 8001e3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e3e:	6013      	str	r3, [r2, #0]
  }
}
 8001e40:	bf00      	nop
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	40023c00 	.word	0x40023c00

08001e50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b089      	sub	sp, #36	; 0x24
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e62:	2300      	movs	r3, #0
 8001e64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e66:	2300      	movs	r3, #0
 8001e68:	61fb      	str	r3, [r7, #28]
 8001e6a:	e177      	b.n	800215c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	697a      	ldr	r2, [r7, #20]
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e80:	693a      	ldr	r2, [r7, #16]
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	f040 8166 	bne.w	8002156 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f003 0303 	and.w	r3, r3, #3
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d005      	beq.n	8001ea2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d130      	bne.n	8001f04 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	2203      	movs	r2, #3
 8001eae:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb2:	43db      	mvns	r3, r3
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	68da      	ldr	r2, [r3, #12]
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	69ba      	ldr	r2, [r7, #24]
 8001ed0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ed8:	2201      	movs	r2, #1
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	43db      	mvns	r3, r3
 8001ee2:	69ba      	ldr	r2, [r7, #24]
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	091b      	lsrs	r3, r3, #4
 8001eee:	f003 0201 	and.w	r2, r3, #1
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f003 0303 	and.w	r3, r3, #3
 8001f0c:	2b03      	cmp	r3, #3
 8001f0e:	d017      	beq.n	8001f40 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	2203      	movs	r2, #3
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	43db      	mvns	r3, r3
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	4013      	ands	r3, r2
 8001f26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	689a      	ldr	r2, [r3, #8]
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f003 0303 	and.w	r3, r3, #3
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d123      	bne.n	8001f94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	08da      	lsrs	r2, r3, #3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	3208      	adds	r2, #8
 8001f54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	f003 0307 	and.w	r3, r3, #7
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	220f      	movs	r2, #15
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	43db      	mvns	r3, r3
 8001f6a:	69ba      	ldr	r2, [r7, #24]
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	691a      	ldr	r2, [r3, #16]
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	f003 0307 	and.w	r3, r3, #7
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	08da      	lsrs	r2, r3, #3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	3208      	adds	r2, #8
 8001f8e:	69b9      	ldr	r1, [r7, #24]
 8001f90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	2203      	movs	r2, #3
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	43db      	mvns	r3, r3
 8001fa6:	69ba      	ldr	r2, [r7, #24]
 8001fa8:	4013      	ands	r3, r2
 8001faa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f003 0203 	and.w	r2, r3, #3
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	005b      	lsls	r3, r3, #1
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	f000 80c0 	beq.w	8002156 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	60fb      	str	r3, [r7, #12]
 8001fda:	4b66      	ldr	r3, [pc, #408]	; (8002174 <HAL_GPIO_Init+0x324>)
 8001fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fde:	4a65      	ldr	r2, [pc, #404]	; (8002174 <HAL_GPIO_Init+0x324>)
 8001fe0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fe4:	6453      	str	r3, [r2, #68]	; 0x44
 8001fe6:	4b63      	ldr	r3, [pc, #396]	; (8002174 <HAL_GPIO_Init+0x324>)
 8001fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fee:	60fb      	str	r3, [r7, #12]
 8001ff0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ff2:	4a61      	ldr	r2, [pc, #388]	; (8002178 <HAL_GPIO_Init+0x328>)
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	089b      	lsrs	r3, r3, #2
 8001ff8:	3302      	adds	r3, #2
 8001ffa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	f003 0303 	and.w	r3, r3, #3
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	220f      	movs	r2, #15
 800200a:	fa02 f303 	lsl.w	r3, r2, r3
 800200e:	43db      	mvns	r3, r3
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	4013      	ands	r3, r2
 8002014:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a58      	ldr	r2, [pc, #352]	; (800217c <HAL_GPIO_Init+0x32c>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d037      	beq.n	800208e <HAL_GPIO_Init+0x23e>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a57      	ldr	r2, [pc, #348]	; (8002180 <HAL_GPIO_Init+0x330>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d031      	beq.n	800208a <HAL_GPIO_Init+0x23a>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a56      	ldr	r2, [pc, #344]	; (8002184 <HAL_GPIO_Init+0x334>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d02b      	beq.n	8002086 <HAL_GPIO_Init+0x236>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a55      	ldr	r2, [pc, #340]	; (8002188 <HAL_GPIO_Init+0x338>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d025      	beq.n	8002082 <HAL_GPIO_Init+0x232>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a54      	ldr	r2, [pc, #336]	; (800218c <HAL_GPIO_Init+0x33c>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d01f      	beq.n	800207e <HAL_GPIO_Init+0x22e>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a53      	ldr	r2, [pc, #332]	; (8002190 <HAL_GPIO_Init+0x340>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d019      	beq.n	800207a <HAL_GPIO_Init+0x22a>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a52      	ldr	r2, [pc, #328]	; (8002194 <HAL_GPIO_Init+0x344>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d013      	beq.n	8002076 <HAL_GPIO_Init+0x226>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a51      	ldr	r2, [pc, #324]	; (8002198 <HAL_GPIO_Init+0x348>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d00d      	beq.n	8002072 <HAL_GPIO_Init+0x222>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a50      	ldr	r2, [pc, #320]	; (800219c <HAL_GPIO_Init+0x34c>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d007      	beq.n	800206e <HAL_GPIO_Init+0x21e>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a4f      	ldr	r2, [pc, #316]	; (80021a0 <HAL_GPIO_Init+0x350>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d101      	bne.n	800206a <HAL_GPIO_Init+0x21a>
 8002066:	2309      	movs	r3, #9
 8002068:	e012      	b.n	8002090 <HAL_GPIO_Init+0x240>
 800206a:	230a      	movs	r3, #10
 800206c:	e010      	b.n	8002090 <HAL_GPIO_Init+0x240>
 800206e:	2308      	movs	r3, #8
 8002070:	e00e      	b.n	8002090 <HAL_GPIO_Init+0x240>
 8002072:	2307      	movs	r3, #7
 8002074:	e00c      	b.n	8002090 <HAL_GPIO_Init+0x240>
 8002076:	2306      	movs	r3, #6
 8002078:	e00a      	b.n	8002090 <HAL_GPIO_Init+0x240>
 800207a:	2305      	movs	r3, #5
 800207c:	e008      	b.n	8002090 <HAL_GPIO_Init+0x240>
 800207e:	2304      	movs	r3, #4
 8002080:	e006      	b.n	8002090 <HAL_GPIO_Init+0x240>
 8002082:	2303      	movs	r3, #3
 8002084:	e004      	b.n	8002090 <HAL_GPIO_Init+0x240>
 8002086:	2302      	movs	r3, #2
 8002088:	e002      	b.n	8002090 <HAL_GPIO_Init+0x240>
 800208a:	2301      	movs	r3, #1
 800208c:	e000      	b.n	8002090 <HAL_GPIO_Init+0x240>
 800208e:	2300      	movs	r3, #0
 8002090:	69fa      	ldr	r2, [r7, #28]
 8002092:	f002 0203 	and.w	r2, r2, #3
 8002096:	0092      	lsls	r2, r2, #2
 8002098:	4093      	lsls	r3, r2
 800209a:	69ba      	ldr	r2, [r7, #24]
 800209c:	4313      	orrs	r3, r2
 800209e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020a0:	4935      	ldr	r1, [pc, #212]	; (8002178 <HAL_GPIO_Init+0x328>)
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	089b      	lsrs	r3, r3, #2
 80020a6:	3302      	adds	r3, #2
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020ae:	4b3d      	ldr	r3, [pc, #244]	; (80021a4 <HAL_GPIO_Init+0x354>)
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	43db      	mvns	r3, r3
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	4013      	ands	r3, r2
 80020bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d003      	beq.n	80020d2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020d2:	4a34      	ldr	r2, [pc, #208]	; (80021a4 <HAL_GPIO_Init+0x354>)
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020d8:	4b32      	ldr	r3, [pc, #200]	; (80021a4 <HAL_GPIO_Init+0x354>)
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	43db      	mvns	r3, r3
 80020e2:	69ba      	ldr	r2, [r7, #24]
 80020e4:	4013      	ands	r3, r2
 80020e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d003      	beq.n	80020fc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020fc:	4a29      	ldr	r2, [pc, #164]	; (80021a4 <HAL_GPIO_Init+0x354>)
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002102:	4b28      	ldr	r3, [pc, #160]	; (80021a4 <HAL_GPIO_Init+0x354>)
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	43db      	mvns	r3, r3
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	4013      	ands	r3, r2
 8002110:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d003      	beq.n	8002126 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800211e:	69ba      	ldr	r2, [r7, #24]
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	4313      	orrs	r3, r2
 8002124:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002126:	4a1f      	ldr	r2, [pc, #124]	; (80021a4 <HAL_GPIO_Init+0x354>)
 8002128:	69bb      	ldr	r3, [r7, #24]
 800212a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800212c:	4b1d      	ldr	r3, [pc, #116]	; (80021a4 <HAL_GPIO_Init+0x354>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	43db      	mvns	r3, r3
 8002136:	69ba      	ldr	r2, [r7, #24]
 8002138:	4013      	ands	r3, r2
 800213a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d003      	beq.n	8002150 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	4313      	orrs	r3, r2
 800214e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002150:	4a14      	ldr	r2, [pc, #80]	; (80021a4 <HAL_GPIO_Init+0x354>)
 8002152:	69bb      	ldr	r3, [r7, #24]
 8002154:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	3301      	adds	r3, #1
 800215a:	61fb      	str	r3, [r7, #28]
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	2b0f      	cmp	r3, #15
 8002160:	f67f ae84 	bls.w	8001e6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002164:	bf00      	nop
 8002166:	bf00      	nop
 8002168:	3724      	adds	r7, #36	; 0x24
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	40023800 	.word	0x40023800
 8002178:	40013800 	.word	0x40013800
 800217c:	40020000 	.word	0x40020000
 8002180:	40020400 	.word	0x40020400
 8002184:	40020800 	.word	0x40020800
 8002188:	40020c00 	.word	0x40020c00
 800218c:	40021000 	.word	0x40021000
 8002190:	40021400 	.word	0x40021400
 8002194:	40021800 	.word	0x40021800
 8002198:	40021c00 	.word	0x40021c00
 800219c:	40022000 	.word	0x40022000
 80021a0:	40022400 	.word	0x40022400
 80021a4:	40013c00 	.word	0x40013c00

080021a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b085      	sub	sp, #20
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	460b      	mov	r3, r1
 80021b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	691a      	ldr	r2, [r3, #16]
 80021b8:	887b      	ldrh	r3, [r7, #2]
 80021ba:	4013      	ands	r3, r2
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d002      	beq.n	80021c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021c0:	2301      	movs	r3, #1
 80021c2:	73fb      	strb	r3, [r7, #15]
 80021c4:	e001      	b.n	80021ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021c6:	2300      	movs	r3, #0
 80021c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3714      	adds	r7, #20
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	460b      	mov	r3, r1
 80021e2:	807b      	strh	r3, [r7, #2]
 80021e4:	4613      	mov	r3, r2
 80021e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021e8:	787b      	ldrb	r3, [r7, #1]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d003      	beq.n	80021f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021ee:	887a      	ldrh	r2, [r7, #2]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021f4:	e003      	b.n	80021fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021f6:	887b      	ldrh	r3, [r7, #2]
 80021f8:	041a      	lsls	r2, r3, #16
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	619a      	str	r2, [r3, #24]
}
 80021fe:	bf00      	nop
 8002200:	370c      	adds	r7, #12
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr

0800220a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800220a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800220c:	b08f      	sub	sp, #60	; 0x3c
 800220e:	af0a      	add	r7, sp, #40	; 0x28
 8002210:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d101      	bne.n	800221c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e10f      	b.n	800243c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002228:	b2db      	uxtb	r3, r3
 800222a:	2b00      	cmp	r3, #0
 800222c:	d106      	bne.n	800223c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f7fe fd6c 	bl	8000d14 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2203      	movs	r2, #3
 8002240:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800224c:	2b00      	cmp	r3, #0
 800224e:	d102      	bne.n	8002256 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2200      	movs	r2, #0
 8002254:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4618      	mov	r0, r3
 800225c:	f001 fab5 	bl	80037ca <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	603b      	str	r3, [r7, #0]
 8002266:	687e      	ldr	r6, [r7, #4]
 8002268:	466d      	mov	r5, sp
 800226a:	f106 0410 	add.w	r4, r6, #16
 800226e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002270:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002272:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002274:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002276:	e894 0003 	ldmia.w	r4, {r0, r1}
 800227a:	e885 0003 	stmia.w	r5, {r0, r1}
 800227e:	1d33      	adds	r3, r6, #4
 8002280:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002282:	6838      	ldr	r0, [r7, #0]
 8002284:	f001 fa40 	bl	8003708 <USB_CoreInit>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d005      	beq.n	800229a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2202      	movs	r2, #2
 8002292:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e0d0      	b.n	800243c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2100      	movs	r1, #0
 80022a0:	4618      	mov	r0, r3
 80022a2:	f001 faa3 	bl	80037ec <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022a6:	2300      	movs	r3, #0
 80022a8:	73fb      	strb	r3, [r7, #15]
 80022aa:	e04a      	b.n	8002342 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80022ac:	7bfa      	ldrb	r2, [r7, #15]
 80022ae:	6879      	ldr	r1, [r7, #4]
 80022b0:	4613      	mov	r3, r2
 80022b2:	00db      	lsls	r3, r3, #3
 80022b4:	4413      	add	r3, r2
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	440b      	add	r3, r1
 80022ba:	333d      	adds	r3, #61	; 0x3d
 80022bc:	2201      	movs	r2, #1
 80022be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80022c0:	7bfa      	ldrb	r2, [r7, #15]
 80022c2:	6879      	ldr	r1, [r7, #4]
 80022c4:	4613      	mov	r3, r2
 80022c6:	00db      	lsls	r3, r3, #3
 80022c8:	4413      	add	r3, r2
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	440b      	add	r3, r1
 80022ce:	333c      	adds	r3, #60	; 0x3c
 80022d0:	7bfa      	ldrb	r2, [r7, #15]
 80022d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80022d4:	7bfa      	ldrb	r2, [r7, #15]
 80022d6:	7bfb      	ldrb	r3, [r7, #15]
 80022d8:	b298      	uxth	r0, r3
 80022da:	6879      	ldr	r1, [r7, #4]
 80022dc:	4613      	mov	r3, r2
 80022de:	00db      	lsls	r3, r3, #3
 80022e0:	4413      	add	r3, r2
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	440b      	add	r3, r1
 80022e6:	3344      	adds	r3, #68	; 0x44
 80022e8:	4602      	mov	r2, r0
 80022ea:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80022ec:	7bfa      	ldrb	r2, [r7, #15]
 80022ee:	6879      	ldr	r1, [r7, #4]
 80022f0:	4613      	mov	r3, r2
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	4413      	add	r3, r2
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	440b      	add	r3, r1
 80022fa:	3340      	adds	r3, #64	; 0x40
 80022fc:	2200      	movs	r2, #0
 80022fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002300:	7bfa      	ldrb	r2, [r7, #15]
 8002302:	6879      	ldr	r1, [r7, #4]
 8002304:	4613      	mov	r3, r2
 8002306:	00db      	lsls	r3, r3, #3
 8002308:	4413      	add	r3, r2
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	440b      	add	r3, r1
 800230e:	3348      	adds	r3, #72	; 0x48
 8002310:	2200      	movs	r2, #0
 8002312:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002314:	7bfa      	ldrb	r2, [r7, #15]
 8002316:	6879      	ldr	r1, [r7, #4]
 8002318:	4613      	mov	r3, r2
 800231a:	00db      	lsls	r3, r3, #3
 800231c:	4413      	add	r3, r2
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	440b      	add	r3, r1
 8002322:	334c      	adds	r3, #76	; 0x4c
 8002324:	2200      	movs	r2, #0
 8002326:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002328:	7bfa      	ldrb	r2, [r7, #15]
 800232a:	6879      	ldr	r1, [r7, #4]
 800232c:	4613      	mov	r3, r2
 800232e:	00db      	lsls	r3, r3, #3
 8002330:	4413      	add	r3, r2
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	440b      	add	r3, r1
 8002336:	3354      	adds	r3, #84	; 0x54
 8002338:	2200      	movs	r2, #0
 800233a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800233c:	7bfb      	ldrb	r3, [r7, #15]
 800233e:	3301      	adds	r3, #1
 8002340:	73fb      	strb	r3, [r7, #15]
 8002342:	7bfa      	ldrb	r2, [r7, #15]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	429a      	cmp	r2, r3
 800234a:	d3af      	bcc.n	80022ac <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800234c:	2300      	movs	r3, #0
 800234e:	73fb      	strb	r3, [r7, #15]
 8002350:	e044      	b.n	80023dc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002352:	7bfa      	ldrb	r2, [r7, #15]
 8002354:	6879      	ldr	r1, [r7, #4]
 8002356:	4613      	mov	r3, r2
 8002358:	00db      	lsls	r3, r3, #3
 800235a:	4413      	add	r3, r2
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	440b      	add	r3, r1
 8002360:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002364:	2200      	movs	r2, #0
 8002366:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002368:	7bfa      	ldrb	r2, [r7, #15]
 800236a:	6879      	ldr	r1, [r7, #4]
 800236c:	4613      	mov	r3, r2
 800236e:	00db      	lsls	r3, r3, #3
 8002370:	4413      	add	r3, r2
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	440b      	add	r3, r1
 8002376:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800237a:	7bfa      	ldrb	r2, [r7, #15]
 800237c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800237e:	7bfa      	ldrb	r2, [r7, #15]
 8002380:	6879      	ldr	r1, [r7, #4]
 8002382:	4613      	mov	r3, r2
 8002384:	00db      	lsls	r3, r3, #3
 8002386:	4413      	add	r3, r2
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	440b      	add	r3, r1
 800238c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002390:	2200      	movs	r2, #0
 8002392:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002394:	7bfa      	ldrb	r2, [r7, #15]
 8002396:	6879      	ldr	r1, [r7, #4]
 8002398:	4613      	mov	r3, r2
 800239a:	00db      	lsls	r3, r3, #3
 800239c:	4413      	add	r3, r2
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	440b      	add	r3, r1
 80023a2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80023a6:	2200      	movs	r2, #0
 80023a8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80023aa:	7bfa      	ldrb	r2, [r7, #15]
 80023ac:	6879      	ldr	r1, [r7, #4]
 80023ae:	4613      	mov	r3, r2
 80023b0:	00db      	lsls	r3, r3, #3
 80023b2:	4413      	add	r3, r2
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	440b      	add	r3, r1
 80023b8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80023bc:	2200      	movs	r2, #0
 80023be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80023c0:	7bfa      	ldrb	r2, [r7, #15]
 80023c2:	6879      	ldr	r1, [r7, #4]
 80023c4:	4613      	mov	r3, r2
 80023c6:	00db      	lsls	r3, r3, #3
 80023c8:	4413      	add	r3, r2
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	440b      	add	r3, r1
 80023ce:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80023d2:	2200      	movs	r2, #0
 80023d4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023d6:	7bfb      	ldrb	r3, [r7, #15]
 80023d8:	3301      	adds	r3, #1
 80023da:	73fb      	strb	r3, [r7, #15]
 80023dc:	7bfa      	ldrb	r2, [r7, #15]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d3b5      	bcc.n	8002352 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	603b      	str	r3, [r7, #0]
 80023ec:	687e      	ldr	r6, [r7, #4]
 80023ee:	466d      	mov	r5, sp
 80023f0:	f106 0410 	add.w	r4, r6, #16
 80023f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023fc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002400:	e885 0003 	stmia.w	r5, {r0, r1}
 8002404:	1d33      	adds	r3, r6, #4
 8002406:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002408:	6838      	ldr	r0, [r7, #0]
 800240a:	f001 fa3b 	bl	8003884 <USB_DevInit>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d005      	beq.n	8002420 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2202      	movs	r2, #2
 8002418:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e00d      	b.n	800243c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4618      	mov	r0, r3
 8002436:	f001 fc06 	bl	8003c46 <USB_DevDisconnect>

  return HAL_OK;
 800243a:	2300      	movs	r3, #0
}
 800243c:	4618      	mov	r0, r3
 800243e:	3714      	adds	r7, #20
 8002440:	46bd      	mov	sp, r7
 8002442:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002444 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b086      	sub	sp, #24
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d101      	bne.n	8002456 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e267      	b.n	8002926 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0301 	and.w	r3, r3, #1
 800245e:	2b00      	cmp	r3, #0
 8002460:	d075      	beq.n	800254e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002462:	4b88      	ldr	r3, [pc, #544]	; (8002684 <HAL_RCC_OscConfig+0x240>)
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f003 030c 	and.w	r3, r3, #12
 800246a:	2b04      	cmp	r3, #4
 800246c:	d00c      	beq.n	8002488 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800246e:	4b85      	ldr	r3, [pc, #532]	; (8002684 <HAL_RCC_OscConfig+0x240>)
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002476:	2b08      	cmp	r3, #8
 8002478:	d112      	bne.n	80024a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800247a:	4b82      	ldr	r3, [pc, #520]	; (8002684 <HAL_RCC_OscConfig+0x240>)
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002482:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002486:	d10b      	bne.n	80024a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002488:	4b7e      	ldr	r3, [pc, #504]	; (8002684 <HAL_RCC_OscConfig+0x240>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d05b      	beq.n	800254c <HAL_RCC_OscConfig+0x108>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d157      	bne.n	800254c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e242      	b.n	8002926 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024a8:	d106      	bne.n	80024b8 <HAL_RCC_OscConfig+0x74>
 80024aa:	4b76      	ldr	r3, [pc, #472]	; (8002684 <HAL_RCC_OscConfig+0x240>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a75      	ldr	r2, [pc, #468]	; (8002684 <HAL_RCC_OscConfig+0x240>)
 80024b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024b4:	6013      	str	r3, [r2, #0]
 80024b6:	e01d      	b.n	80024f4 <HAL_RCC_OscConfig+0xb0>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024c0:	d10c      	bne.n	80024dc <HAL_RCC_OscConfig+0x98>
 80024c2:	4b70      	ldr	r3, [pc, #448]	; (8002684 <HAL_RCC_OscConfig+0x240>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a6f      	ldr	r2, [pc, #444]	; (8002684 <HAL_RCC_OscConfig+0x240>)
 80024c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024cc:	6013      	str	r3, [r2, #0]
 80024ce:	4b6d      	ldr	r3, [pc, #436]	; (8002684 <HAL_RCC_OscConfig+0x240>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a6c      	ldr	r2, [pc, #432]	; (8002684 <HAL_RCC_OscConfig+0x240>)
 80024d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024d8:	6013      	str	r3, [r2, #0]
 80024da:	e00b      	b.n	80024f4 <HAL_RCC_OscConfig+0xb0>
 80024dc:	4b69      	ldr	r3, [pc, #420]	; (8002684 <HAL_RCC_OscConfig+0x240>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a68      	ldr	r2, [pc, #416]	; (8002684 <HAL_RCC_OscConfig+0x240>)
 80024e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024e6:	6013      	str	r3, [r2, #0]
 80024e8:	4b66      	ldr	r3, [pc, #408]	; (8002684 <HAL_RCC_OscConfig+0x240>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a65      	ldr	r2, [pc, #404]	; (8002684 <HAL_RCC_OscConfig+0x240>)
 80024ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d013      	beq.n	8002524 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024fc:	f7fe fd64 	bl	8000fc8 <HAL_GetTick>
 8002500:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002502:	e008      	b.n	8002516 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002504:	f7fe fd60 	bl	8000fc8 <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	2b64      	cmp	r3, #100	; 0x64
 8002510:	d901      	bls.n	8002516 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e207      	b.n	8002926 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002516:	4b5b      	ldr	r3, [pc, #364]	; (8002684 <HAL_RCC_OscConfig+0x240>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d0f0      	beq.n	8002504 <HAL_RCC_OscConfig+0xc0>
 8002522:	e014      	b.n	800254e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002524:	f7fe fd50 	bl	8000fc8 <HAL_GetTick>
 8002528:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800252a:	e008      	b.n	800253e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800252c:	f7fe fd4c 	bl	8000fc8 <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	2b64      	cmp	r3, #100	; 0x64
 8002538:	d901      	bls.n	800253e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e1f3      	b.n	8002926 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800253e:	4b51      	ldr	r3, [pc, #324]	; (8002684 <HAL_RCC_OscConfig+0x240>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d1f0      	bne.n	800252c <HAL_RCC_OscConfig+0xe8>
 800254a:	e000      	b.n	800254e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800254c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0302 	and.w	r3, r3, #2
 8002556:	2b00      	cmp	r3, #0
 8002558:	d063      	beq.n	8002622 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800255a:	4b4a      	ldr	r3, [pc, #296]	; (8002684 <HAL_RCC_OscConfig+0x240>)
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f003 030c 	and.w	r3, r3, #12
 8002562:	2b00      	cmp	r3, #0
 8002564:	d00b      	beq.n	800257e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002566:	4b47      	ldr	r3, [pc, #284]	; (8002684 <HAL_RCC_OscConfig+0x240>)
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800256e:	2b08      	cmp	r3, #8
 8002570:	d11c      	bne.n	80025ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002572:	4b44      	ldr	r3, [pc, #272]	; (8002684 <HAL_RCC_OscConfig+0x240>)
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d116      	bne.n	80025ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800257e:	4b41      	ldr	r3, [pc, #260]	; (8002684 <HAL_RCC_OscConfig+0x240>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	2b00      	cmp	r3, #0
 8002588:	d005      	beq.n	8002596 <HAL_RCC_OscConfig+0x152>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	2b01      	cmp	r3, #1
 8002590:	d001      	beq.n	8002596 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e1c7      	b.n	8002926 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002596:	4b3b      	ldr	r3, [pc, #236]	; (8002684 <HAL_RCC_OscConfig+0x240>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	691b      	ldr	r3, [r3, #16]
 80025a2:	00db      	lsls	r3, r3, #3
 80025a4:	4937      	ldr	r1, [pc, #220]	; (8002684 <HAL_RCC_OscConfig+0x240>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025aa:	e03a      	b.n	8002622 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d020      	beq.n	80025f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025b4:	4b34      	ldr	r3, [pc, #208]	; (8002688 <HAL_RCC_OscConfig+0x244>)
 80025b6:	2201      	movs	r2, #1
 80025b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ba:	f7fe fd05 	bl	8000fc8 <HAL_GetTick>
 80025be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025c0:	e008      	b.n	80025d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025c2:	f7fe fd01 	bl	8000fc8 <HAL_GetTick>
 80025c6:	4602      	mov	r2, r0
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d901      	bls.n	80025d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80025d0:	2303      	movs	r3, #3
 80025d2:	e1a8      	b.n	8002926 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025d4:	4b2b      	ldr	r3, [pc, #172]	; (8002684 <HAL_RCC_OscConfig+0x240>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0302 	and.w	r3, r3, #2
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d0f0      	beq.n	80025c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025e0:	4b28      	ldr	r3, [pc, #160]	; (8002684 <HAL_RCC_OscConfig+0x240>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	691b      	ldr	r3, [r3, #16]
 80025ec:	00db      	lsls	r3, r3, #3
 80025ee:	4925      	ldr	r1, [pc, #148]	; (8002684 <HAL_RCC_OscConfig+0x240>)
 80025f0:	4313      	orrs	r3, r2
 80025f2:	600b      	str	r3, [r1, #0]
 80025f4:	e015      	b.n	8002622 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025f6:	4b24      	ldr	r3, [pc, #144]	; (8002688 <HAL_RCC_OscConfig+0x244>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025fc:	f7fe fce4 	bl	8000fc8 <HAL_GetTick>
 8002600:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002602:	e008      	b.n	8002616 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002604:	f7fe fce0 	bl	8000fc8 <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	2b02      	cmp	r3, #2
 8002610:	d901      	bls.n	8002616 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e187      	b.n	8002926 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002616:	4b1b      	ldr	r3, [pc, #108]	; (8002684 <HAL_RCC_OscConfig+0x240>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0302 	and.w	r3, r3, #2
 800261e:	2b00      	cmp	r3, #0
 8002620:	d1f0      	bne.n	8002604 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0308 	and.w	r3, r3, #8
 800262a:	2b00      	cmp	r3, #0
 800262c:	d036      	beq.n	800269c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	695b      	ldr	r3, [r3, #20]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d016      	beq.n	8002664 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002636:	4b15      	ldr	r3, [pc, #84]	; (800268c <HAL_RCC_OscConfig+0x248>)
 8002638:	2201      	movs	r2, #1
 800263a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800263c:	f7fe fcc4 	bl	8000fc8 <HAL_GetTick>
 8002640:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002642:	e008      	b.n	8002656 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002644:	f7fe fcc0 	bl	8000fc8 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b02      	cmp	r3, #2
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e167      	b.n	8002926 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002656:	4b0b      	ldr	r3, [pc, #44]	; (8002684 <HAL_RCC_OscConfig+0x240>)
 8002658:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d0f0      	beq.n	8002644 <HAL_RCC_OscConfig+0x200>
 8002662:	e01b      	b.n	800269c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002664:	4b09      	ldr	r3, [pc, #36]	; (800268c <HAL_RCC_OscConfig+0x248>)
 8002666:	2200      	movs	r2, #0
 8002668:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800266a:	f7fe fcad 	bl	8000fc8 <HAL_GetTick>
 800266e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002670:	e00e      	b.n	8002690 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002672:	f7fe fca9 	bl	8000fc8 <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	2b02      	cmp	r3, #2
 800267e:	d907      	bls.n	8002690 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002680:	2303      	movs	r3, #3
 8002682:	e150      	b.n	8002926 <HAL_RCC_OscConfig+0x4e2>
 8002684:	40023800 	.word	0x40023800
 8002688:	42470000 	.word	0x42470000
 800268c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002690:	4b88      	ldr	r3, [pc, #544]	; (80028b4 <HAL_RCC_OscConfig+0x470>)
 8002692:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002694:	f003 0302 	and.w	r3, r3, #2
 8002698:	2b00      	cmp	r3, #0
 800269a:	d1ea      	bne.n	8002672 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0304 	and.w	r3, r3, #4
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	f000 8097 	beq.w	80027d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026aa:	2300      	movs	r3, #0
 80026ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026ae:	4b81      	ldr	r3, [pc, #516]	; (80028b4 <HAL_RCC_OscConfig+0x470>)
 80026b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d10f      	bne.n	80026da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026ba:	2300      	movs	r3, #0
 80026bc:	60bb      	str	r3, [r7, #8]
 80026be:	4b7d      	ldr	r3, [pc, #500]	; (80028b4 <HAL_RCC_OscConfig+0x470>)
 80026c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c2:	4a7c      	ldr	r2, [pc, #496]	; (80028b4 <HAL_RCC_OscConfig+0x470>)
 80026c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026c8:	6413      	str	r3, [r2, #64]	; 0x40
 80026ca:	4b7a      	ldr	r3, [pc, #488]	; (80028b4 <HAL_RCC_OscConfig+0x470>)
 80026cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026d2:	60bb      	str	r3, [r7, #8]
 80026d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026d6:	2301      	movs	r3, #1
 80026d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026da:	4b77      	ldr	r3, [pc, #476]	; (80028b8 <HAL_RCC_OscConfig+0x474>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d118      	bne.n	8002718 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026e6:	4b74      	ldr	r3, [pc, #464]	; (80028b8 <HAL_RCC_OscConfig+0x474>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a73      	ldr	r2, [pc, #460]	; (80028b8 <HAL_RCC_OscConfig+0x474>)
 80026ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026f2:	f7fe fc69 	bl	8000fc8 <HAL_GetTick>
 80026f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026f8:	e008      	b.n	800270c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026fa:	f7fe fc65 	bl	8000fc8 <HAL_GetTick>
 80026fe:	4602      	mov	r2, r0
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	2b02      	cmp	r3, #2
 8002706:	d901      	bls.n	800270c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002708:	2303      	movs	r3, #3
 800270a:	e10c      	b.n	8002926 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800270c:	4b6a      	ldr	r3, [pc, #424]	; (80028b8 <HAL_RCC_OscConfig+0x474>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002714:	2b00      	cmp	r3, #0
 8002716:	d0f0      	beq.n	80026fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	2b01      	cmp	r3, #1
 800271e:	d106      	bne.n	800272e <HAL_RCC_OscConfig+0x2ea>
 8002720:	4b64      	ldr	r3, [pc, #400]	; (80028b4 <HAL_RCC_OscConfig+0x470>)
 8002722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002724:	4a63      	ldr	r2, [pc, #396]	; (80028b4 <HAL_RCC_OscConfig+0x470>)
 8002726:	f043 0301 	orr.w	r3, r3, #1
 800272a:	6713      	str	r3, [r2, #112]	; 0x70
 800272c:	e01c      	b.n	8002768 <HAL_RCC_OscConfig+0x324>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	2b05      	cmp	r3, #5
 8002734:	d10c      	bne.n	8002750 <HAL_RCC_OscConfig+0x30c>
 8002736:	4b5f      	ldr	r3, [pc, #380]	; (80028b4 <HAL_RCC_OscConfig+0x470>)
 8002738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800273a:	4a5e      	ldr	r2, [pc, #376]	; (80028b4 <HAL_RCC_OscConfig+0x470>)
 800273c:	f043 0304 	orr.w	r3, r3, #4
 8002740:	6713      	str	r3, [r2, #112]	; 0x70
 8002742:	4b5c      	ldr	r3, [pc, #368]	; (80028b4 <HAL_RCC_OscConfig+0x470>)
 8002744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002746:	4a5b      	ldr	r2, [pc, #364]	; (80028b4 <HAL_RCC_OscConfig+0x470>)
 8002748:	f043 0301 	orr.w	r3, r3, #1
 800274c:	6713      	str	r3, [r2, #112]	; 0x70
 800274e:	e00b      	b.n	8002768 <HAL_RCC_OscConfig+0x324>
 8002750:	4b58      	ldr	r3, [pc, #352]	; (80028b4 <HAL_RCC_OscConfig+0x470>)
 8002752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002754:	4a57      	ldr	r2, [pc, #348]	; (80028b4 <HAL_RCC_OscConfig+0x470>)
 8002756:	f023 0301 	bic.w	r3, r3, #1
 800275a:	6713      	str	r3, [r2, #112]	; 0x70
 800275c:	4b55      	ldr	r3, [pc, #340]	; (80028b4 <HAL_RCC_OscConfig+0x470>)
 800275e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002760:	4a54      	ldr	r2, [pc, #336]	; (80028b4 <HAL_RCC_OscConfig+0x470>)
 8002762:	f023 0304 	bic.w	r3, r3, #4
 8002766:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d015      	beq.n	800279c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002770:	f7fe fc2a 	bl	8000fc8 <HAL_GetTick>
 8002774:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002776:	e00a      	b.n	800278e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002778:	f7fe fc26 	bl	8000fc8 <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	f241 3288 	movw	r2, #5000	; 0x1388
 8002786:	4293      	cmp	r3, r2
 8002788:	d901      	bls.n	800278e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e0cb      	b.n	8002926 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800278e:	4b49      	ldr	r3, [pc, #292]	; (80028b4 <HAL_RCC_OscConfig+0x470>)
 8002790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002792:	f003 0302 	and.w	r3, r3, #2
 8002796:	2b00      	cmp	r3, #0
 8002798:	d0ee      	beq.n	8002778 <HAL_RCC_OscConfig+0x334>
 800279a:	e014      	b.n	80027c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800279c:	f7fe fc14 	bl	8000fc8 <HAL_GetTick>
 80027a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027a2:	e00a      	b.n	80027ba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027a4:	f7fe fc10 	bl	8000fc8 <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e0b5      	b.n	8002926 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027ba:	4b3e      	ldr	r3, [pc, #248]	; (80028b4 <HAL_RCC_OscConfig+0x470>)
 80027bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027be:	f003 0302 	and.w	r3, r3, #2
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d1ee      	bne.n	80027a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027c6:	7dfb      	ldrb	r3, [r7, #23]
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d105      	bne.n	80027d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027cc:	4b39      	ldr	r3, [pc, #228]	; (80028b4 <HAL_RCC_OscConfig+0x470>)
 80027ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d0:	4a38      	ldr	r2, [pc, #224]	; (80028b4 <HAL_RCC_OscConfig+0x470>)
 80027d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027d6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	699b      	ldr	r3, [r3, #24]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	f000 80a1 	beq.w	8002924 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027e2:	4b34      	ldr	r3, [pc, #208]	; (80028b4 <HAL_RCC_OscConfig+0x470>)
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	f003 030c 	and.w	r3, r3, #12
 80027ea:	2b08      	cmp	r3, #8
 80027ec:	d05c      	beq.n	80028a8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	699b      	ldr	r3, [r3, #24]
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d141      	bne.n	800287a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027f6:	4b31      	ldr	r3, [pc, #196]	; (80028bc <HAL_RCC_OscConfig+0x478>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027fc:	f7fe fbe4 	bl	8000fc8 <HAL_GetTick>
 8002800:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002802:	e008      	b.n	8002816 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002804:	f7fe fbe0 	bl	8000fc8 <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	2b02      	cmp	r3, #2
 8002810:	d901      	bls.n	8002816 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e087      	b.n	8002926 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002816:	4b27      	ldr	r3, [pc, #156]	; (80028b4 <HAL_RCC_OscConfig+0x470>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d1f0      	bne.n	8002804 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	69da      	ldr	r2, [r3, #28]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a1b      	ldr	r3, [r3, #32]
 800282a:	431a      	orrs	r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002830:	019b      	lsls	r3, r3, #6
 8002832:	431a      	orrs	r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002838:	085b      	lsrs	r3, r3, #1
 800283a:	3b01      	subs	r3, #1
 800283c:	041b      	lsls	r3, r3, #16
 800283e:	431a      	orrs	r2, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002844:	061b      	lsls	r3, r3, #24
 8002846:	491b      	ldr	r1, [pc, #108]	; (80028b4 <HAL_RCC_OscConfig+0x470>)
 8002848:	4313      	orrs	r3, r2
 800284a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800284c:	4b1b      	ldr	r3, [pc, #108]	; (80028bc <HAL_RCC_OscConfig+0x478>)
 800284e:	2201      	movs	r2, #1
 8002850:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002852:	f7fe fbb9 	bl	8000fc8 <HAL_GetTick>
 8002856:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002858:	e008      	b.n	800286c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800285a:	f7fe fbb5 	bl	8000fc8 <HAL_GetTick>
 800285e:	4602      	mov	r2, r0
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	2b02      	cmp	r3, #2
 8002866:	d901      	bls.n	800286c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	e05c      	b.n	8002926 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800286c:	4b11      	ldr	r3, [pc, #68]	; (80028b4 <HAL_RCC_OscConfig+0x470>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d0f0      	beq.n	800285a <HAL_RCC_OscConfig+0x416>
 8002878:	e054      	b.n	8002924 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800287a:	4b10      	ldr	r3, [pc, #64]	; (80028bc <HAL_RCC_OscConfig+0x478>)
 800287c:	2200      	movs	r2, #0
 800287e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002880:	f7fe fba2 	bl	8000fc8 <HAL_GetTick>
 8002884:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002886:	e008      	b.n	800289a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002888:	f7fe fb9e 	bl	8000fc8 <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	2b02      	cmp	r3, #2
 8002894:	d901      	bls.n	800289a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e045      	b.n	8002926 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800289a:	4b06      	ldr	r3, [pc, #24]	; (80028b4 <HAL_RCC_OscConfig+0x470>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d1f0      	bne.n	8002888 <HAL_RCC_OscConfig+0x444>
 80028a6:	e03d      	b.n	8002924 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	699b      	ldr	r3, [r3, #24]
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d107      	bne.n	80028c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e038      	b.n	8002926 <HAL_RCC_OscConfig+0x4e2>
 80028b4:	40023800 	.word	0x40023800
 80028b8:	40007000 	.word	0x40007000
 80028bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028c0:	4b1b      	ldr	r3, [pc, #108]	; (8002930 <HAL_RCC_OscConfig+0x4ec>)
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	699b      	ldr	r3, [r3, #24]
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d028      	beq.n	8002920 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028d8:	429a      	cmp	r2, r3
 80028da:	d121      	bne.n	8002920 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d11a      	bne.n	8002920 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028ea:	68fa      	ldr	r2, [r7, #12]
 80028ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80028f0:	4013      	ands	r3, r2
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d111      	bne.n	8002920 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002906:	085b      	lsrs	r3, r3, #1
 8002908:	3b01      	subs	r3, #1
 800290a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800290c:	429a      	cmp	r2, r3
 800290e:	d107      	bne.n	8002920 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800291a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800291c:	429a      	cmp	r2, r3
 800291e:	d001      	beq.n	8002924 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e000      	b.n	8002926 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002924:	2300      	movs	r3, #0
}
 8002926:	4618      	mov	r0, r3
 8002928:	3718      	adds	r7, #24
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	40023800 	.word	0x40023800

08002934 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d101      	bne.n	8002948 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e0cc      	b.n	8002ae2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002948:	4b68      	ldr	r3, [pc, #416]	; (8002aec <HAL_RCC_ClockConfig+0x1b8>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 030f 	and.w	r3, r3, #15
 8002950:	683a      	ldr	r2, [r7, #0]
 8002952:	429a      	cmp	r2, r3
 8002954:	d90c      	bls.n	8002970 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002956:	4b65      	ldr	r3, [pc, #404]	; (8002aec <HAL_RCC_ClockConfig+0x1b8>)
 8002958:	683a      	ldr	r2, [r7, #0]
 800295a:	b2d2      	uxtb	r2, r2
 800295c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800295e:	4b63      	ldr	r3, [pc, #396]	; (8002aec <HAL_RCC_ClockConfig+0x1b8>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 030f 	and.w	r3, r3, #15
 8002966:	683a      	ldr	r2, [r7, #0]
 8002968:	429a      	cmp	r2, r3
 800296a:	d001      	beq.n	8002970 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e0b8      	b.n	8002ae2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0302 	and.w	r3, r3, #2
 8002978:	2b00      	cmp	r3, #0
 800297a:	d020      	beq.n	80029be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0304 	and.w	r3, r3, #4
 8002984:	2b00      	cmp	r3, #0
 8002986:	d005      	beq.n	8002994 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002988:	4b59      	ldr	r3, [pc, #356]	; (8002af0 <HAL_RCC_ClockConfig+0x1bc>)
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	4a58      	ldr	r2, [pc, #352]	; (8002af0 <HAL_RCC_ClockConfig+0x1bc>)
 800298e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002992:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0308 	and.w	r3, r3, #8
 800299c:	2b00      	cmp	r3, #0
 800299e:	d005      	beq.n	80029ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029a0:	4b53      	ldr	r3, [pc, #332]	; (8002af0 <HAL_RCC_ClockConfig+0x1bc>)
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	4a52      	ldr	r2, [pc, #328]	; (8002af0 <HAL_RCC_ClockConfig+0x1bc>)
 80029a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80029aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029ac:	4b50      	ldr	r3, [pc, #320]	; (8002af0 <HAL_RCC_ClockConfig+0x1bc>)
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	494d      	ldr	r1, [pc, #308]	; (8002af0 <HAL_RCC_ClockConfig+0x1bc>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0301 	and.w	r3, r3, #1
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d044      	beq.n	8002a54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d107      	bne.n	80029e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029d2:	4b47      	ldr	r3, [pc, #284]	; (8002af0 <HAL_RCC_ClockConfig+0x1bc>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d119      	bne.n	8002a12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e07f      	b.n	8002ae2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d003      	beq.n	80029f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029ee:	2b03      	cmp	r3, #3
 80029f0:	d107      	bne.n	8002a02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029f2:	4b3f      	ldr	r3, [pc, #252]	; (8002af0 <HAL_RCC_ClockConfig+0x1bc>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d109      	bne.n	8002a12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e06f      	b.n	8002ae2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a02:	4b3b      	ldr	r3, [pc, #236]	; (8002af0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d101      	bne.n	8002a12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e067      	b.n	8002ae2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a12:	4b37      	ldr	r3, [pc, #220]	; (8002af0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f023 0203 	bic.w	r2, r3, #3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	4934      	ldr	r1, [pc, #208]	; (8002af0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a20:	4313      	orrs	r3, r2
 8002a22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a24:	f7fe fad0 	bl	8000fc8 <HAL_GetTick>
 8002a28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a2a:	e00a      	b.n	8002a42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a2c:	f7fe facc 	bl	8000fc8 <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d901      	bls.n	8002a42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e04f      	b.n	8002ae2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a42:	4b2b      	ldr	r3, [pc, #172]	; (8002af0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f003 020c 	and.w	r2, r3, #12
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d1eb      	bne.n	8002a2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a54:	4b25      	ldr	r3, [pc, #148]	; (8002aec <HAL_RCC_ClockConfig+0x1b8>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 030f 	and.w	r3, r3, #15
 8002a5c:	683a      	ldr	r2, [r7, #0]
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d20c      	bcs.n	8002a7c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a62:	4b22      	ldr	r3, [pc, #136]	; (8002aec <HAL_RCC_ClockConfig+0x1b8>)
 8002a64:	683a      	ldr	r2, [r7, #0]
 8002a66:	b2d2      	uxtb	r2, r2
 8002a68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a6a:	4b20      	ldr	r3, [pc, #128]	; (8002aec <HAL_RCC_ClockConfig+0x1b8>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 030f 	and.w	r3, r3, #15
 8002a72:	683a      	ldr	r2, [r7, #0]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d001      	beq.n	8002a7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e032      	b.n	8002ae2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0304 	and.w	r3, r3, #4
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d008      	beq.n	8002a9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a88:	4b19      	ldr	r3, [pc, #100]	; (8002af0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	4916      	ldr	r1, [pc, #88]	; (8002af0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a96:	4313      	orrs	r3, r2
 8002a98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0308 	and.w	r3, r3, #8
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d009      	beq.n	8002aba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002aa6:	4b12      	ldr	r3, [pc, #72]	; (8002af0 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	691b      	ldr	r3, [r3, #16]
 8002ab2:	00db      	lsls	r3, r3, #3
 8002ab4:	490e      	ldr	r1, [pc, #56]	; (8002af0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002aba:	f000 f821 	bl	8002b00 <HAL_RCC_GetSysClockFreq>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	4b0b      	ldr	r3, [pc, #44]	; (8002af0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	091b      	lsrs	r3, r3, #4
 8002ac6:	f003 030f 	and.w	r3, r3, #15
 8002aca:	490a      	ldr	r1, [pc, #40]	; (8002af4 <HAL_RCC_ClockConfig+0x1c0>)
 8002acc:	5ccb      	ldrb	r3, [r1, r3]
 8002ace:	fa22 f303 	lsr.w	r3, r2, r3
 8002ad2:	4a09      	ldr	r2, [pc, #36]	; (8002af8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ad4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ad6:	4b09      	ldr	r3, [pc, #36]	; (8002afc <HAL_RCC_ClockConfig+0x1c8>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4618      	mov	r0, r3
 8002adc:	f7fe fa30 	bl	8000f40 <HAL_InitTick>

  return HAL_OK;
 8002ae0:	2300      	movs	r3, #0
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3710      	adds	r7, #16
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	40023c00 	.word	0x40023c00
 8002af0:	40023800 	.word	0x40023800
 8002af4:	08003d7c 	.word	0x08003d7c
 8002af8:	20000000 	.word	0x20000000
 8002afc:	20000004 	.word	0x20000004

08002b00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b04:	b094      	sub	sp, #80	; 0x50
 8002b06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	647b      	str	r3, [r7, #68]	; 0x44
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b10:	2300      	movs	r3, #0
 8002b12:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002b14:	2300      	movs	r3, #0
 8002b16:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b18:	4b79      	ldr	r3, [pc, #484]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f003 030c 	and.w	r3, r3, #12
 8002b20:	2b08      	cmp	r3, #8
 8002b22:	d00d      	beq.n	8002b40 <HAL_RCC_GetSysClockFreq+0x40>
 8002b24:	2b08      	cmp	r3, #8
 8002b26:	f200 80e1 	bhi.w	8002cec <HAL_RCC_GetSysClockFreq+0x1ec>
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d002      	beq.n	8002b34 <HAL_RCC_GetSysClockFreq+0x34>
 8002b2e:	2b04      	cmp	r3, #4
 8002b30:	d003      	beq.n	8002b3a <HAL_RCC_GetSysClockFreq+0x3a>
 8002b32:	e0db      	b.n	8002cec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b34:	4b73      	ldr	r3, [pc, #460]	; (8002d04 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b36:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002b38:	e0db      	b.n	8002cf2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b3a:	4b73      	ldr	r3, [pc, #460]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x208>)
 8002b3c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b3e:	e0d8      	b.n	8002cf2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b40:	4b6f      	ldr	r3, [pc, #444]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b48:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b4a:	4b6d      	ldr	r3, [pc, #436]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d063      	beq.n	8002c1e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b56:	4b6a      	ldr	r3, [pc, #424]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	099b      	lsrs	r3, r3, #6
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b60:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b68:	633b      	str	r3, [r7, #48]	; 0x30
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	637b      	str	r3, [r7, #52]	; 0x34
 8002b6e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002b72:	4622      	mov	r2, r4
 8002b74:	462b      	mov	r3, r5
 8002b76:	f04f 0000 	mov.w	r0, #0
 8002b7a:	f04f 0100 	mov.w	r1, #0
 8002b7e:	0159      	lsls	r1, r3, #5
 8002b80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b84:	0150      	lsls	r0, r2, #5
 8002b86:	4602      	mov	r2, r0
 8002b88:	460b      	mov	r3, r1
 8002b8a:	4621      	mov	r1, r4
 8002b8c:	1a51      	subs	r1, r2, r1
 8002b8e:	6139      	str	r1, [r7, #16]
 8002b90:	4629      	mov	r1, r5
 8002b92:	eb63 0301 	sbc.w	r3, r3, r1
 8002b96:	617b      	str	r3, [r7, #20]
 8002b98:	f04f 0200 	mov.w	r2, #0
 8002b9c:	f04f 0300 	mov.w	r3, #0
 8002ba0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ba4:	4659      	mov	r1, fp
 8002ba6:	018b      	lsls	r3, r1, #6
 8002ba8:	4651      	mov	r1, sl
 8002baa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002bae:	4651      	mov	r1, sl
 8002bb0:	018a      	lsls	r2, r1, #6
 8002bb2:	4651      	mov	r1, sl
 8002bb4:	ebb2 0801 	subs.w	r8, r2, r1
 8002bb8:	4659      	mov	r1, fp
 8002bba:	eb63 0901 	sbc.w	r9, r3, r1
 8002bbe:	f04f 0200 	mov.w	r2, #0
 8002bc2:	f04f 0300 	mov.w	r3, #0
 8002bc6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002bca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002bce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002bd2:	4690      	mov	r8, r2
 8002bd4:	4699      	mov	r9, r3
 8002bd6:	4623      	mov	r3, r4
 8002bd8:	eb18 0303 	adds.w	r3, r8, r3
 8002bdc:	60bb      	str	r3, [r7, #8]
 8002bde:	462b      	mov	r3, r5
 8002be0:	eb49 0303 	adc.w	r3, r9, r3
 8002be4:	60fb      	str	r3, [r7, #12]
 8002be6:	f04f 0200 	mov.w	r2, #0
 8002bea:	f04f 0300 	mov.w	r3, #0
 8002bee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002bf2:	4629      	mov	r1, r5
 8002bf4:	024b      	lsls	r3, r1, #9
 8002bf6:	4621      	mov	r1, r4
 8002bf8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002bfc:	4621      	mov	r1, r4
 8002bfe:	024a      	lsls	r2, r1, #9
 8002c00:	4610      	mov	r0, r2
 8002c02:	4619      	mov	r1, r3
 8002c04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c06:	2200      	movs	r2, #0
 8002c08:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c0a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c0c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002c10:	f7fd faec 	bl	80001ec <__aeabi_uldivmod>
 8002c14:	4602      	mov	r2, r0
 8002c16:	460b      	mov	r3, r1
 8002c18:	4613      	mov	r3, r2
 8002c1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c1c:	e058      	b.n	8002cd0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c1e:	4b38      	ldr	r3, [pc, #224]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	099b      	lsrs	r3, r3, #6
 8002c24:	2200      	movs	r2, #0
 8002c26:	4618      	mov	r0, r3
 8002c28:	4611      	mov	r1, r2
 8002c2a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c2e:	623b      	str	r3, [r7, #32]
 8002c30:	2300      	movs	r3, #0
 8002c32:	627b      	str	r3, [r7, #36]	; 0x24
 8002c34:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002c38:	4642      	mov	r2, r8
 8002c3a:	464b      	mov	r3, r9
 8002c3c:	f04f 0000 	mov.w	r0, #0
 8002c40:	f04f 0100 	mov.w	r1, #0
 8002c44:	0159      	lsls	r1, r3, #5
 8002c46:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c4a:	0150      	lsls	r0, r2, #5
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	460b      	mov	r3, r1
 8002c50:	4641      	mov	r1, r8
 8002c52:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c56:	4649      	mov	r1, r9
 8002c58:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c5c:	f04f 0200 	mov.w	r2, #0
 8002c60:	f04f 0300 	mov.w	r3, #0
 8002c64:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002c68:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c6c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002c70:	ebb2 040a 	subs.w	r4, r2, sl
 8002c74:	eb63 050b 	sbc.w	r5, r3, fp
 8002c78:	f04f 0200 	mov.w	r2, #0
 8002c7c:	f04f 0300 	mov.w	r3, #0
 8002c80:	00eb      	lsls	r3, r5, #3
 8002c82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c86:	00e2      	lsls	r2, r4, #3
 8002c88:	4614      	mov	r4, r2
 8002c8a:	461d      	mov	r5, r3
 8002c8c:	4643      	mov	r3, r8
 8002c8e:	18e3      	adds	r3, r4, r3
 8002c90:	603b      	str	r3, [r7, #0]
 8002c92:	464b      	mov	r3, r9
 8002c94:	eb45 0303 	adc.w	r3, r5, r3
 8002c98:	607b      	str	r3, [r7, #4]
 8002c9a:	f04f 0200 	mov.w	r2, #0
 8002c9e:	f04f 0300 	mov.w	r3, #0
 8002ca2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ca6:	4629      	mov	r1, r5
 8002ca8:	028b      	lsls	r3, r1, #10
 8002caa:	4621      	mov	r1, r4
 8002cac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002cb0:	4621      	mov	r1, r4
 8002cb2:	028a      	lsls	r2, r1, #10
 8002cb4:	4610      	mov	r0, r2
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cba:	2200      	movs	r2, #0
 8002cbc:	61bb      	str	r3, [r7, #24]
 8002cbe:	61fa      	str	r2, [r7, #28]
 8002cc0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cc4:	f7fd fa92 	bl	80001ec <__aeabi_uldivmod>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	460b      	mov	r3, r1
 8002ccc:	4613      	mov	r3, r2
 8002cce:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002cd0:	4b0b      	ldr	r3, [pc, #44]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	0c1b      	lsrs	r3, r3, #16
 8002cd6:	f003 0303 	and.w	r3, r3, #3
 8002cda:	3301      	adds	r3, #1
 8002cdc:	005b      	lsls	r3, r3, #1
 8002cde:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002ce0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ce2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ce8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002cea:	e002      	b.n	8002cf2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002cec:	4b05      	ldr	r3, [pc, #20]	; (8002d04 <HAL_RCC_GetSysClockFreq+0x204>)
 8002cee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002cf0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3750      	adds	r7, #80	; 0x50
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002cfe:	bf00      	nop
 8002d00:	40023800 	.word	0x40023800
 8002d04:	00f42400 	.word	0x00f42400
 8002d08:	007a1200 	.word	0x007a1200

08002d0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d10:	4b03      	ldr	r3, [pc, #12]	; (8002d20 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d12:	681b      	ldr	r3, [r3, #0]
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	20000000 	.word	0x20000000

08002d24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002d28:	f7ff fff0 	bl	8002d0c <HAL_RCC_GetHCLKFreq>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	4b05      	ldr	r3, [pc, #20]	; (8002d44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	0a9b      	lsrs	r3, r3, #10
 8002d34:	f003 0307 	and.w	r3, r3, #7
 8002d38:	4903      	ldr	r1, [pc, #12]	; (8002d48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d3a:	5ccb      	ldrb	r3, [r1, r3]
 8002d3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	40023800 	.word	0x40023800
 8002d48:	08003d8c 	.word	0x08003d8c

08002d4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002d50:	f7ff ffdc 	bl	8002d0c <HAL_RCC_GetHCLKFreq>
 8002d54:	4602      	mov	r2, r0
 8002d56:	4b05      	ldr	r3, [pc, #20]	; (8002d6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	0b5b      	lsrs	r3, r3, #13
 8002d5c:	f003 0307 	and.w	r3, r3, #7
 8002d60:	4903      	ldr	r1, [pc, #12]	; (8002d70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d62:	5ccb      	ldrb	r3, [r1, r3]
 8002d64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	40023800 	.word	0x40023800
 8002d70:	08003d8c 	.word	0x08003d8c

08002d74 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002d7a:	f7fe f925 	bl	8000fc8 <HAL_GetTick>
 8002d7e:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002d80:	4b72      	ldr	r3, [pc, #456]	; (8002f4c <HAL_RCC_DeInit+0x1d8>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a71      	ldr	r2, [pc, #452]	; (8002f4c <HAL_RCC_DeInit+0x1d8>)
 8002d86:	f043 0301 	orr.w	r3, r3, #1
 8002d8a:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8002d8c:	e008      	b.n	8002da0 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d8e:	f7fe f91b 	bl	8000fc8 <HAL_GetTick>
 8002d92:	4602      	mov	r2, r0
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d901      	bls.n	8002da0 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e0d0      	b.n	8002f42 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8002da0:	4b6a      	ldr	r3, [pc, #424]	; (8002f4c <HAL_RCC_DeInit+0x1d8>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0302 	and.w	r3, r3, #2
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d0f0      	beq.n	8002d8e <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 8002dac:	4b67      	ldr	r3, [pc, #412]	; (8002f4c <HAL_RCC_DeInit+0x1d8>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a66      	ldr	r2, [pc, #408]	; (8002f4c <HAL_RCC_DeInit+0x1d8>)
 8002db2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002db6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002db8:	f7fe f906 	bl	8000fc8 <HAL_GetTick>
 8002dbc:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8002dbe:	4b63      	ldr	r3, [pc, #396]	; (8002f4c <HAL_RCC_DeInit+0x1d8>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8002dc4:	e00a      	b.n	8002ddc <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dc6:	f7fe f8ff 	bl	8000fc8 <HAL_GetTick>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d901      	bls.n	8002ddc <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	e0b2      	b.n	8002f42 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8002ddc:	4b5b      	ldr	r3, [pc, #364]	; (8002f4c <HAL_RCC_DeInit+0x1d8>)
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	f003 030c 	and.w	r3, r3, #12
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d1ee      	bne.n	8002dc6 <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002de8:	f7fe f8ee 	bl	8000fc8 <HAL_GetTick>
 8002dec:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 8002dee:	4b57      	ldr	r3, [pc, #348]	; (8002f4c <HAL_RCC_DeInit+0x1d8>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a56      	ldr	r2, [pc, #344]	; (8002f4c <HAL_RCC_DeInit+0x1d8>)
 8002df4:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 8002df8:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8002dfa:	e008      	b.n	8002e0e <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dfc:	f7fe f8e4 	bl	8000fc8 <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	2b64      	cmp	r3, #100	; 0x64
 8002e08:	d901      	bls.n	8002e0e <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e099      	b.n	8002f42 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8002e0e:	4b4f      	ldr	r3, [pc, #316]	; (8002f4c <HAL_RCC_DeInit+0x1d8>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d1f0      	bne.n	8002dfc <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002e1a:	f7fe f8d5 	bl	8000fc8 <HAL_GetTick>
 8002e1e:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002e20:	4b4a      	ldr	r3, [pc, #296]	; (8002f4c <HAL_RCC_DeInit+0x1d8>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a49      	ldr	r2, [pc, #292]	; (8002f4c <HAL_RCC_DeInit+0x1d8>)
 8002e26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e2a:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8002e2c:	e008      	b.n	8002e40 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e2e:	f7fe f8cb 	bl	8000fc8 <HAL_GetTick>
 8002e32:	4602      	mov	r2, r0
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d901      	bls.n	8002e40 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	e080      	b.n	8002f42 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8002e40:	4b42      	ldr	r3, [pc, #264]	; (8002f4c <HAL_RCC_DeInit+0x1d8>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d1f0      	bne.n	8002e2e <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002e4c:	f7fe f8bc 	bl	8000fc8 <HAL_GetTick>
 8002e50:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 8002e52:	4b3e      	ldr	r3, [pc, #248]	; (8002f4c <HAL_RCC_DeInit+0x1d8>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a3d      	ldr	r2, [pc, #244]	; (8002f4c <HAL_RCC_DeInit+0x1d8>)
 8002e58:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002e5c:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8002e5e:	e008      	b.n	8002e72 <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002e60:	f7fe f8b2 	bl	8000fc8 <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e067      	b.n	8002f42 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8002e72:	4b36      	ldr	r3, [pc, #216]	; (8002f4c <HAL_RCC_DeInit+0x1d8>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d1f0      	bne.n	8002e60 <HAL_RCC_DeInit+0xec>
  }
#endif /* RCC_PLLI2S_SUPPORT */

#if defined(RCC_PLLSAI_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002e7e:	f7fe f8a3 	bl	8000fc8 <HAL_GetTick>
 8002e82:	6078      	str	r0, [r7, #4]

  /* Reset PLLSAI bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAION);
 8002e84:	4b31      	ldr	r3, [pc, #196]	; (8002f4c <HAL_RCC_DeInit+0x1d8>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a30      	ldr	r2, [pc, #192]	; (8002f4c <HAL_RCC_DeInit+0x1d8>)
 8002e8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e8e:	6013      	str	r3, [r2, #0]

  /* Wait till PLLSAI is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 8002e90:	e008      	b.n	8002ea4 <HAL_RCC_DeInit+0x130>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002e92:	f7fe f899 	bl	8000fc8 <HAL_GetTick>
 8002e96:	4602      	mov	r2, r0
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d901      	bls.n	8002ea4 <HAL_RCC_DeInit+0x130>
    {
      return HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	e04e      	b.n	8002f42 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 8002ea4:	4b29      	ldr	r3, [pc, #164]	; (8002f4c <HAL_RCC_DeInit+0x1d8>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d1f0      	bne.n	8002e92 <HAL_RCC_DeInit+0x11e>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 8002eb0:	4b26      	ldr	r3, [pc, #152]	; (8002f4c <HAL_RCC_DeInit+0x1d8>)
 8002eb2:	4a27      	ldr	r2, [pc, #156]	; (8002f50 <HAL_RCC_DeInit+0x1dc>)
 8002eb4:	605a      	str	r2, [r3, #4]
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
 8002eb6:	4b25      	ldr	r3, [pc, #148]	; (8002f4c <HAL_RCC_DeInit+0x1d8>)
 8002eb8:	4a26      	ldr	r2, [pc, #152]	; (8002f54 <HAL_RCC_DeInit+0x1e0>)
 8002eba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
#endif /* STM32F412Cx || STM32F412Rx || STM32F412Vx || STM32F412Zx || STM32F413xx || STM32F423xx || STM32F446xx */

  /* Reset PLLSAICFGR register */
#if defined(STM32F427xx) || defined(STM32F429xx) || defined(STM32F437xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2 | RCC_PLLSAICFGR_PLLSAIR_1;
 8002ebe:	4b23      	ldr	r3, [pc, #140]	; (8002f4c <HAL_RCC_DeInit+0x1d8>)
 8002ec0:	4a24      	ldr	r2, [pc, #144]	; (8002f54 <HAL_RCC_DeInit+0x1e0>)
 8002ec2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 8002ec6:	4b21      	ldr	r3, [pc, #132]	; (8002f4c <HAL_RCC_DeInit+0x1d8>)
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	4a20      	ldr	r2, [pc, #128]	; (8002f4c <HAL_RCC_DeInit+0x1d8>)
 8002ecc:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8002ed0:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 8002ed2:	4b1e      	ldr	r3, [pc, #120]	; (8002f4c <HAL_RCC_DeInit+0x1d8>)
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	4a1d      	ldr	r2, [pc, #116]	; (8002f4c <HAL_RCC_DeInit+0x1d8>)
 8002ed8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002edc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYIE */

#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
 8002ede:	4b1b      	ldr	r3, [pc, #108]	; (8002f4c <HAL_RCC_DeInit+0x1d8>)
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	4a1a      	ldr	r2, [pc, #104]	; (8002f4c <HAL_RCC_DeInit+0x1d8>)
 8002ee4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ee8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 8002eea:	4b18      	ldr	r3, [pc, #96]	; (8002f4c <HAL_RCC_DeInit+0x1d8>)
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	4a17      	ldr	r2, [pc, #92]	; (8002f4c <HAL_RCC_DeInit+0x1d8>)
 8002ef0:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 8002ef4:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 8002ef6:	4b15      	ldr	r3, [pc, #84]	; (8002f4c <HAL_RCC_DeInit+0x1d8>)
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	4a14      	ldr	r2, [pc, #80]	; (8002f4c <HAL_RCC_DeInit+0x1d8>)
 8002efc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002f00:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYC */

#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
 8002f02:	4b12      	ldr	r3, [pc, #72]	; (8002f4c <HAL_RCC_DeInit+0x1d8>)
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	4a11      	ldr	r2, [pc, #68]	; (8002f4c <HAL_RCC_DeInit+0x1d8>)
 8002f08:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f0c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8002f0e:	4b0f      	ldr	r3, [pc, #60]	; (8002f4c <HAL_RCC_DeInit+0x1d8>)
 8002f10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f12:	4a0e      	ldr	r2, [pc, #56]	; (8002f4c <HAL_RCC_DeInit+0x1d8>)
 8002f14:	f023 0301 	bic.w	r3, r3, #1
 8002f18:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8002f1a:	4b0c      	ldr	r3, [pc, #48]	; (8002f4c <HAL_RCC_DeInit+0x1d8>)
 8002f1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f1e:	4a0b      	ldr	r2, [pc, #44]	; (8002f4c <HAL_RCC_DeInit+0x1d8>)
 8002f20:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f24:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8002f26:	4b0c      	ldr	r3, [pc, #48]	; (8002f58 <HAL_RCC_DeInit+0x1e4>)
 8002f28:	4a0c      	ldr	r2, [pc, #48]	; (8002f5c <HAL_RCC_DeInit+0x1e8>)
 8002f2a:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 8002f2c:	4b0c      	ldr	r3, [pc, #48]	; (8002f60 <HAL_RCC_DeInit+0x1ec>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4618      	mov	r0, r3
 8002f32:	f7fe f805 	bl	8000f40 <HAL_InitTick>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d001      	beq.n	8002f40 <HAL_RCC_DeInit+0x1cc>
  {
    return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e000      	b.n	8002f42 <HAL_RCC_DeInit+0x1ce>
  }
  else
  {
    return HAL_OK;
 8002f40:	2300      	movs	r3, #0
  }
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3708      	adds	r7, #8
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	40023800 	.word	0x40023800
 8002f50:	04003010 	.word	0x04003010
 8002f54:	24003000 	.word	0x24003000
 8002f58:	20000000 	.word	0x20000000
 8002f5c:	00f42400 	.word	0x00f42400
 8002f60:	20000004 	.word	0x20000004

08002f64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d101      	bne.n	8002f76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e03f      	b.n	8002ff6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d106      	bne.n	8002f90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f7fd fe7a 	bl	8000c84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2224      	movs	r2, #36	; 0x24
 8002f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	68da      	ldr	r2, [r3, #12]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002fa6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f000 f939 	bl	8003220 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	691a      	ldr	r2, [r3, #16]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002fbc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	695a      	ldr	r2, [r3, #20]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002fcc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	68da      	ldr	r2, [r3, #12]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002fdc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2220      	movs	r2, #32
 8002fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2220      	movs	r2, #32
 8002ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ff4:	2300      	movs	r3, #0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3708      	adds	r7, #8
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}

08002ffe <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ffe:	b580      	push	{r7, lr}
 8003000:	b08a      	sub	sp, #40	; 0x28
 8003002:	af02      	add	r7, sp, #8
 8003004:	60f8      	str	r0, [r7, #12]
 8003006:	60b9      	str	r1, [r7, #8]
 8003008:	603b      	str	r3, [r7, #0]
 800300a:	4613      	mov	r3, r2
 800300c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800300e:	2300      	movs	r3, #0
 8003010:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003018:	b2db      	uxtb	r3, r3
 800301a:	2b20      	cmp	r3, #32
 800301c:	f040 808c 	bne.w	8003138 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d002      	beq.n	800302c <HAL_UART_Receive+0x2e>
 8003026:	88fb      	ldrh	r3, [r7, #6]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d101      	bne.n	8003030 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e084      	b.n	800313a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003036:	2b01      	cmp	r3, #1
 8003038:	d101      	bne.n	800303e <HAL_UART_Receive+0x40>
 800303a:	2302      	movs	r3, #2
 800303c:	e07d      	b.n	800313a <HAL_UART_Receive+0x13c>
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2201      	movs	r2, #1
 8003042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2200      	movs	r2, #0
 800304a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2222      	movs	r2, #34	; 0x22
 8003050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2200      	movs	r2, #0
 8003058:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800305a:	f7fd ffb5 	bl	8000fc8 <HAL_GetTick>
 800305e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	88fa      	ldrh	r2, [r7, #6]
 8003064:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	88fa      	ldrh	r2, [r7, #6]
 800306a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003074:	d108      	bne.n	8003088 <HAL_UART_Receive+0x8a>
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	691b      	ldr	r3, [r3, #16]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d104      	bne.n	8003088 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800307e:	2300      	movs	r3, #0
 8003080:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	61bb      	str	r3, [r7, #24]
 8003086:	e003      	b.n	8003090 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800308c:	2300      	movs	r3, #0
 800308e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2200      	movs	r2, #0
 8003094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003098:	e043      	b.n	8003122 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	9300      	str	r3, [sp, #0]
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	2200      	movs	r2, #0
 80030a2:	2120      	movs	r1, #32
 80030a4:	68f8      	ldr	r0, [r7, #12]
 80030a6:	f000 f84c 	bl	8003142 <UART_WaitOnFlagUntilTimeout>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d001      	beq.n	80030b4 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80030b0:	2303      	movs	r3, #3
 80030b2:	e042      	b.n	800313a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d10c      	bne.n	80030d4 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030c6:	b29a      	uxth	r2, r3
 80030c8:	69bb      	ldr	r3, [r7, #24]
 80030ca:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80030cc:	69bb      	ldr	r3, [r7, #24]
 80030ce:	3302      	adds	r3, #2
 80030d0:	61bb      	str	r3, [r7, #24]
 80030d2:	e01f      	b.n	8003114 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030dc:	d007      	beq.n	80030ee <HAL_UART_Receive+0xf0>
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d10a      	bne.n	80030fc <HAL_UART_Receive+0xfe>
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d106      	bne.n	80030fc <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	b2da      	uxtb	r2, r3
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	701a      	strb	r2, [r3, #0]
 80030fa:	e008      	b.n	800310e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	b2db      	uxtb	r3, r3
 8003104:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003108:	b2da      	uxtb	r2, r3
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	3301      	adds	r3, #1
 8003112:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003118:	b29b      	uxth	r3, r3
 800311a:	3b01      	subs	r3, #1
 800311c:	b29a      	uxth	r2, r3
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003126:	b29b      	uxth	r3, r3
 8003128:	2b00      	cmp	r3, #0
 800312a:	d1b6      	bne.n	800309a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2220      	movs	r2, #32
 8003130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003134:	2300      	movs	r3, #0
 8003136:	e000      	b.n	800313a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003138:	2302      	movs	r3, #2
  }
}
 800313a:	4618      	mov	r0, r3
 800313c:	3720      	adds	r7, #32
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}

08003142 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003142:	b580      	push	{r7, lr}
 8003144:	b090      	sub	sp, #64	; 0x40
 8003146:	af00      	add	r7, sp, #0
 8003148:	60f8      	str	r0, [r7, #12]
 800314a:	60b9      	str	r1, [r7, #8]
 800314c:	603b      	str	r3, [r7, #0]
 800314e:	4613      	mov	r3, r2
 8003150:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003152:	e050      	b.n	80031f6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003154:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003156:	f1b3 3fff 	cmp.w	r3, #4294967295
 800315a:	d04c      	beq.n	80031f6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800315c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800315e:	2b00      	cmp	r3, #0
 8003160:	d007      	beq.n	8003172 <UART_WaitOnFlagUntilTimeout+0x30>
 8003162:	f7fd ff31 	bl	8000fc8 <HAL_GetTick>
 8003166:	4602      	mov	r2, r0
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800316e:	429a      	cmp	r2, r3
 8003170:	d241      	bcs.n	80031f6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	330c      	adds	r3, #12
 8003178:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800317a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800317c:	e853 3f00 	ldrex	r3, [r3]
 8003180:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003184:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003188:	63fb      	str	r3, [r7, #60]	; 0x3c
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	330c      	adds	r3, #12
 8003190:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003192:	637a      	str	r2, [r7, #52]	; 0x34
 8003194:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003196:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003198:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800319a:	e841 2300 	strex	r3, r2, [r1]
 800319e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80031a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1e5      	bne.n	8003172 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	3314      	adds	r3, #20
 80031ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	e853 3f00 	ldrex	r3, [r3]
 80031b4:	613b      	str	r3, [r7, #16]
   return(result);
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	f023 0301 	bic.w	r3, r3, #1
 80031bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	3314      	adds	r3, #20
 80031c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031c6:	623a      	str	r2, [r7, #32]
 80031c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ca:	69f9      	ldr	r1, [r7, #28]
 80031cc:	6a3a      	ldr	r2, [r7, #32]
 80031ce:	e841 2300 	strex	r3, r2, [r1]
 80031d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d1e5      	bne.n	80031a6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2220      	movs	r2, #32
 80031de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2220      	movs	r2, #32
 80031e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e00f      	b.n	8003216 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	4013      	ands	r3, r2
 8003200:	68ba      	ldr	r2, [r7, #8]
 8003202:	429a      	cmp	r2, r3
 8003204:	bf0c      	ite	eq
 8003206:	2301      	moveq	r3, #1
 8003208:	2300      	movne	r3, #0
 800320a:	b2db      	uxtb	r3, r3
 800320c:	461a      	mov	r2, r3
 800320e:	79fb      	ldrb	r3, [r7, #7]
 8003210:	429a      	cmp	r2, r3
 8003212:	d09f      	beq.n	8003154 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003214:	2300      	movs	r3, #0
}
 8003216:	4618      	mov	r0, r3
 8003218:	3740      	adds	r7, #64	; 0x40
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
	...

08003220 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003220:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003224:	b0c0      	sub	sp, #256	; 0x100
 8003226:	af00      	add	r7, sp, #0
 8003228:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800322c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	691b      	ldr	r3, [r3, #16]
 8003234:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800323c:	68d9      	ldr	r1, [r3, #12]
 800323e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	ea40 0301 	orr.w	r3, r0, r1
 8003248:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800324a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800324e:	689a      	ldr	r2, [r3, #8]
 8003250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	431a      	orrs	r2, r3
 8003258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800325c:	695b      	ldr	r3, [r3, #20]
 800325e:	431a      	orrs	r2, r3
 8003260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003264:	69db      	ldr	r3, [r3, #28]
 8003266:	4313      	orrs	r3, r2
 8003268:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800326c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003278:	f021 010c 	bic.w	r1, r1, #12
 800327c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003286:	430b      	orrs	r3, r1
 8003288:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800328a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	695b      	ldr	r3, [r3, #20]
 8003292:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003296:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800329a:	6999      	ldr	r1, [r3, #24]
 800329c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	ea40 0301 	orr.w	r3, r0, r1
 80032a6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80032a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	4b8f      	ldr	r3, [pc, #572]	; (80034ec <UART_SetConfig+0x2cc>)
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d005      	beq.n	80032c0 <UART_SetConfig+0xa0>
 80032b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	4b8d      	ldr	r3, [pc, #564]	; (80034f0 <UART_SetConfig+0x2d0>)
 80032bc:	429a      	cmp	r2, r3
 80032be:	d104      	bne.n	80032ca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80032c0:	f7ff fd44 	bl	8002d4c <HAL_RCC_GetPCLK2Freq>
 80032c4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80032c8:	e003      	b.n	80032d2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80032ca:	f7ff fd2b 	bl	8002d24 <HAL_RCC_GetPCLK1Freq>
 80032ce:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032d6:	69db      	ldr	r3, [r3, #28]
 80032d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032dc:	f040 810c 	bne.w	80034f8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80032e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032e4:	2200      	movs	r2, #0
 80032e6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80032ea:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80032ee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80032f2:	4622      	mov	r2, r4
 80032f4:	462b      	mov	r3, r5
 80032f6:	1891      	adds	r1, r2, r2
 80032f8:	65b9      	str	r1, [r7, #88]	; 0x58
 80032fa:	415b      	adcs	r3, r3
 80032fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80032fe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003302:	4621      	mov	r1, r4
 8003304:	eb12 0801 	adds.w	r8, r2, r1
 8003308:	4629      	mov	r1, r5
 800330a:	eb43 0901 	adc.w	r9, r3, r1
 800330e:	f04f 0200 	mov.w	r2, #0
 8003312:	f04f 0300 	mov.w	r3, #0
 8003316:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800331a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800331e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003322:	4690      	mov	r8, r2
 8003324:	4699      	mov	r9, r3
 8003326:	4623      	mov	r3, r4
 8003328:	eb18 0303 	adds.w	r3, r8, r3
 800332c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003330:	462b      	mov	r3, r5
 8003332:	eb49 0303 	adc.w	r3, r9, r3
 8003336:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800333a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003346:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800334a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800334e:	460b      	mov	r3, r1
 8003350:	18db      	adds	r3, r3, r3
 8003352:	653b      	str	r3, [r7, #80]	; 0x50
 8003354:	4613      	mov	r3, r2
 8003356:	eb42 0303 	adc.w	r3, r2, r3
 800335a:	657b      	str	r3, [r7, #84]	; 0x54
 800335c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003360:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003364:	f7fc ff42 	bl	80001ec <__aeabi_uldivmod>
 8003368:	4602      	mov	r2, r0
 800336a:	460b      	mov	r3, r1
 800336c:	4b61      	ldr	r3, [pc, #388]	; (80034f4 <UART_SetConfig+0x2d4>)
 800336e:	fba3 2302 	umull	r2, r3, r3, r2
 8003372:	095b      	lsrs	r3, r3, #5
 8003374:	011c      	lsls	r4, r3, #4
 8003376:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800337a:	2200      	movs	r2, #0
 800337c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003380:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003384:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003388:	4642      	mov	r2, r8
 800338a:	464b      	mov	r3, r9
 800338c:	1891      	adds	r1, r2, r2
 800338e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003390:	415b      	adcs	r3, r3
 8003392:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003394:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003398:	4641      	mov	r1, r8
 800339a:	eb12 0a01 	adds.w	sl, r2, r1
 800339e:	4649      	mov	r1, r9
 80033a0:	eb43 0b01 	adc.w	fp, r3, r1
 80033a4:	f04f 0200 	mov.w	r2, #0
 80033a8:	f04f 0300 	mov.w	r3, #0
 80033ac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80033b0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80033b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80033b8:	4692      	mov	sl, r2
 80033ba:	469b      	mov	fp, r3
 80033bc:	4643      	mov	r3, r8
 80033be:	eb1a 0303 	adds.w	r3, sl, r3
 80033c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80033c6:	464b      	mov	r3, r9
 80033c8:	eb4b 0303 	adc.w	r3, fp, r3
 80033cc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80033d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80033dc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80033e0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80033e4:	460b      	mov	r3, r1
 80033e6:	18db      	adds	r3, r3, r3
 80033e8:	643b      	str	r3, [r7, #64]	; 0x40
 80033ea:	4613      	mov	r3, r2
 80033ec:	eb42 0303 	adc.w	r3, r2, r3
 80033f0:	647b      	str	r3, [r7, #68]	; 0x44
 80033f2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80033f6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80033fa:	f7fc fef7 	bl	80001ec <__aeabi_uldivmod>
 80033fe:	4602      	mov	r2, r0
 8003400:	460b      	mov	r3, r1
 8003402:	4611      	mov	r1, r2
 8003404:	4b3b      	ldr	r3, [pc, #236]	; (80034f4 <UART_SetConfig+0x2d4>)
 8003406:	fba3 2301 	umull	r2, r3, r3, r1
 800340a:	095b      	lsrs	r3, r3, #5
 800340c:	2264      	movs	r2, #100	; 0x64
 800340e:	fb02 f303 	mul.w	r3, r2, r3
 8003412:	1acb      	subs	r3, r1, r3
 8003414:	00db      	lsls	r3, r3, #3
 8003416:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800341a:	4b36      	ldr	r3, [pc, #216]	; (80034f4 <UART_SetConfig+0x2d4>)
 800341c:	fba3 2302 	umull	r2, r3, r3, r2
 8003420:	095b      	lsrs	r3, r3, #5
 8003422:	005b      	lsls	r3, r3, #1
 8003424:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003428:	441c      	add	r4, r3
 800342a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800342e:	2200      	movs	r2, #0
 8003430:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003434:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003438:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800343c:	4642      	mov	r2, r8
 800343e:	464b      	mov	r3, r9
 8003440:	1891      	adds	r1, r2, r2
 8003442:	63b9      	str	r1, [r7, #56]	; 0x38
 8003444:	415b      	adcs	r3, r3
 8003446:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003448:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800344c:	4641      	mov	r1, r8
 800344e:	1851      	adds	r1, r2, r1
 8003450:	6339      	str	r1, [r7, #48]	; 0x30
 8003452:	4649      	mov	r1, r9
 8003454:	414b      	adcs	r3, r1
 8003456:	637b      	str	r3, [r7, #52]	; 0x34
 8003458:	f04f 0200 	mov.w	r2, #0
 800345c:	f04f 0300 	mov.w	r3, #0
 8003460:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003464:	4659      	mov	r1, fp
 8003466:	00cb      	lsls	r3, r1, #3
 8003468:	4651      	mov	r1, sl
 800346a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800346e:	4651      	mov	r1, sl
 8003470:	00ca      	lsls	r2, r1, #3
 8003472:	4610      	mov	r0, r2
 8003474:	4619      	mov	r1, r3
 8003476:	4603      	mov	r3, r0
 8003478:	4642      	mov	r2, r8
 800347a:	189b      	adds	r3, r3, r2
 800347c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003480:	464b      	mov	r3, r9
 8003482:	460a      	mov	r2, r1
 8003484:	eb42 0303 	adc.w	r3, r2, r3
 8003488:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800348c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003498:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800349c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80034a0:	460b      	mov	r3, r1
 80034a2:	18db      	adds	r3, r3, r3
 80034a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80034a6:	4613      	mov	r3, r2
 80034a8:	eb42 0303 	adc.w	r3, r2, r3
 80034ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80034b2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80034b6:	f7fc fe99 	bl	80001ec <__aeabi_uldivmod>
 80034ba:	4602      	mov	r2, r0
 80034bc:	460b      	mov	r3, r1
 80034be:	4b0d      	ldr	r3, [pc, #52]	; (80034f4 <UART_SetConfig+0x2d4>)
 80034c0:	fba3 1302 	umull	r1, r3, r3, r2
 80034c4:	095b      	lsrs	r3, r3, #5
 80034c6:	2164      	movs	r1, #100	; 0x64
 80034c8:	fb01 f303 	mul.w	r3, r1, r3
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	00db      	lsls	r3, r3, #3
 80034d0:	3332      	adds	r3, #50	; 0x32
 80034d2:	4a08      	ldr	r2, [pc, #32]	; (80034f4 <UART_SetConfig+0x2d4>)
 80034d4:	fba2 2303 	umull	r2, r3, r2, r3
 80034d8:	095b      	lsrs	r3, r3, #5
 80034da:	f003 0207 	and.w	r2, r3, #7
 80034de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4422      	add	r2, r4
 80034e6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80034e8:	e105      	b.n	80036f6 <UART_SetConfig+0x4d6>
 80034ea:	bf00      	nop
 80034ec:	40011000 	.word	0x40011000
 80034f0:	40011400 	.word	0x40011400
 80034f4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80034f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034fc:	2200      	movs	r2, #0
 80034fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003502:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003506:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800350a:	4642      	mov	r2, r8
 800350c:	464b      	mov	r3, r9
 800350e:	1891      	adds	r1, r2, r2
 8003510:	6239      	str	r1, [r7, #32]
 8003512:	415b      	adcs	r3, r3
 8003514:	627b      	str	r3, [r7, #36]	; 0x24
 8003516:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800351a:	4641      	mov	r1, r8
 800351c:	1854      	adds	r4, r2, r1
 800351e:	4649      	mov	r1, r9
 8003520:	eb43 0501 	adc.w	r5, r3, r1
 8003524:	f04f 0200 	mov.w	r2, #0
 8003528:	f04f 0300 	mov.w	r3, #0
 800352c:	00eb      	lsls	r3, r5, #3
 800352e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003532:	00e2      	lsls	r2, r4, #3
 8003534:	4614      	mov	r4, r2
 8003536:	461d      	mov	r5, r3
 8003538:	4643      	mov	r3, r8
 800353a:	18e3      	adds	r3, r4, r3
 800353c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003540:	464b      	mov	r3, r9
 8003542:	eb45 0303 	adc.w	r3, r5, r3
 8003546:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800354a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003556:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800355a:	f04f 0200 	mov.w	r2, #0
 800355e:	f04f 0300 	mov.w	r3, #0
 8003562:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003566:	4629      	mov	r1, r5
 8003568:	008b      	lsls	r3, r1, #2
 800356a:	4621      	mov	r1, r4
 800356c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003570:	4621      	mov	r1, r4
 8003572:	008a      	lsls	r2, r1, #2
 8003574:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003578:	f7fc fe38 	bl	80001ec <__aeabi_uldivmod>
 800357c:	4602      	mov	r2, r0
 800357e:	460b      	mov	r3, r1
 8003580:	4b60      	ldr	r3, [pc, #384]	; (8003704 <UART_SetConfig+0x4e4>)
 8003582:	fba3 2302 	umull	r2, r3, r3, r2
 8003586:	095b      	lsrs	r3, r3, #5
 8003588:	011c      	lsls	r4, r3, #4
 800358a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800358e:	2200      	movs	r2, #0
 8003590:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003594:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003598:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800359c:	4642      	mov	r2, r8
 800359e:	464b      	mov	r3, r9
 80035a0:	1891      	adds	r1, r2, r2
 80035a2:	61b9      	str	r1, [r7, #24]
 80035a4:	415b      	adcs	r3, r3
 80035a6:	61fb      	str	r3, [r7, #28]
 80035a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035ac:	4641      	mov	r1, r8
 80035ae:	1851      	adds	r1, r2, r1
 80035b0:	6139      	str	r1, [r7, #16]
 80035b2:	4649      	mov	r1, r9
 80035b4:	414b      	adcs	r3, r1
 80035b6:	617b      	str	r3, [r7, #20]
 80035b8:	f04f 0200 	mov.w	r2, #0
 80035bc:	f04f 0300 	mov.w	r3, #0
 80035c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80035c4:	4659      	mov	r1, fp
 80035c6:	00cb      	lsls	r3, r1, #3
 80035c8:	4651      	mov	r1, sl
 80035ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035ce:	4651      	mov	r1, sl
 80035d0:	00ca      	lsls	r2, r1, #3
 80035d2:	4610      	mov	r0, r2
 80035d4:	4619      	mov	r1, r3
 80035d6:	4603      	mov	r3, r0
 80035d8:	4642      	mov	r2, r8
 80035da:	189b      	adds	r3, r3, r2
 80035dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80035e0:	464b      	mov	r3, r9
 80035e2:	460a      	mov	r2, r1
 80035e4:	eb42 0303 	adc.w	r3, r2, r3
 80035e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80035ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	2200      	movs	r2, #0
 80035f4:	67bb      	str	r3, [r7, #120]	; 0x78
 80035f6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80035f8:	f04f 0200 	mov.w	r2, #0
 80035fc:	f04f 0300 	mov.w	r3, #0
 8003600:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003604:	4649      	mov	r1, r9
 8003606:	008b      	lsls	r3, r1, #2
 8003608:	4641      	mov	r1, r8
 800360a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800360e:	4641      	mov	r1, r8
 8003610:	008a      	lsls	r2, r1, #2
 8003612:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003616:	f7fc fde9 	bl	80001ec <__aeabi_uldivmod>
 800361a:	4602      	mov	r2, r0
 800361c:	460b      	mov	r3, r1
 800361e:	4b39      	ldr	r3, [pc, #228]	; (8003704 <UART_SetConfig+0x4e4>)
 8003620:	fba3 1302 	umull	r1, r3, r3, r2
 8003624:	095b      	lsrs	r3, r3, #5
 8003626:	2164      	movs	r1, #100	; 0x64
 8003628:	fb01 f303 	mul.w	r3, r1, r3
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	011b      	lsls	r3, r3, #4
 8003630:	3332      	adds	r3, #50	; 0x32
 8003632:	4a34      	ldr	r2, [pc, #208]	; (8003704 <UART_SetConfig+0x4e4>)
 8003634:	fba2 2303 	umull	r2, r3, r2, r3
 8003638:	095b      	lsrs	r3, r3, #5
 800363a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800363e:	441c      	add	r4, r3
 8003640:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003644:	2200      	movs	r2, #0
 8003646:	673b      	str	r3, [r7, #112]	; 0x70
 8003648:	677a      	str	r2, [r7, #116]	; 0x74
 800364a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800364e:	4642      	mov	r2, r8
 8003650:	464b      	mov	r3, r9
 8003652:	1891      	adds	r1, r2, r2
 8003654:	60b9      	str	r1, [r7, #8]
 8003656:	415b      	adcs	r3, r3
 8003658:	60fb      	str	r3, [r7, #12]
 800365a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800365e:	4641      	mov	r1, r8
 8003660:	1851      	adds	r1, r2, r1
 8003662:	6039      	str	r1, [r7, #0]
 8003664:	4649      	mov	r1, r9
 8003666:	414b      	adcs	r3, r1
 8003668:	607b      	str	r3, [r7, #4]
 800366a:	f04f 0200 	mov.w	r2, #0
 800366e:	f04f 0300 	mov.w	r3, #0
 8003672:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003676:	4659      	mov	r1, fp
 8003678:	00cb      	lsls	r3, r1, #3
 800367a:	4651      	mov	r1, sl
 800367c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003680:	4651      	mov	r1, sl
 8003682:	00ca      	lsls	r2, r1, #3
 8003684:	4610      	mov	r0, r2
 8003686:	4619      	mov	r1, r3
 8003688:	4603      	mov	r3, r0
 800368a:	4642      	mov	r2, r8
 800368c:	189b      	adds	r3, r3, r2
 800368e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003690:	464b      	mov	r3, r9
 8003692:	460a      	mov	r2, r1
 8003694:	eb42 0303 	adc.w	r3, r2, r3
 8003698:	66fb      	str	r3, [r7, #108]	; 0x6c
 800369a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	663b      	str	r3, [r7, #96]	; 0x60
 80036a4:	667a      	str	r2, [r7, #100]	; 0x64
 80036a6:	f04f 0200 	mov.w	r2, #0
 80036aa:	f04f 0300 	mov.w	r3, #0
 80036ae:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80036b2:	4649      	mov	r1, r9
 80036b4:	008b      	lsls	r3, r1, #2
 80036b6:	4641      	mov	r1, r8
 80036b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80036bc:	4641      	mov	r1, r8
 80036be:	008a      	lsls	r2, r1, #2
 80036c0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80036c4:	f7fc fd92 	bl	80001ec <__aeabi_uldivmod>
 80036c8:	4602      	mov	r2, r0
 80036ca:	460b      	mov	r3, r1
 80036cc:	4b0d      	ldr	r3, [pc, #52]	; (8003704 <UART_SetConfig+0x4e4>)
 80036ce:	fba3 1302 	umull	r1, r3, r3, r2
 80036d2:	095b      	lsrs	r3, r3, #5
 80036d4:	2164      	movs	r1, #100	; 0x64
 80036d6:	fb01 f303 	mul.w	r3, r1, r3
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	011b      	lsls	r3, r3, #4
 80036de:	3332      	adds	r3, #50	; 0x32
 80036e0:	4a08      	ldr	r2, [pc, #32]	; (8003704 <UART_SetConfig+0x4e4>)
 80036e2:	fba2 2303 	umull	r2, r3, r2, r3
 80036e6:	095b      	lsrs	r3, r3, #5
 80036e8:	f003 020f 	and.w	r2, r3, #15
 80036ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4422      	add	r2, r4
 80036f4:	609a      	str	r2, [r3, #8]
}
 80036f6:	bf00      	nop
 80036f8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80036fc:	46bd      	mov	sp, r7
 80036fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003702:	bf00      	nop
 8003704:	51eb851f 	.word	0x51eb851f

08003708 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003708:	b084      	sub	sp, #16
 800370a:	b580      	push	{r7, lr}
 800370c:	b084      	sub	sp, #16
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]
 8003712:	f107 001c 	add.w	r0, r7, #28
 8003716:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800371a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800371c:	2b01      	cmp	r3, #1
 800371e:	d122      	bne.n	8003766 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003724:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003734:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003748:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800374a:	2b01      	cmp	r3, #1
 800374c:	d105      	bne.n	800375a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f000 faa2 	bl	8003ca4 <USB_CoreReset>
 8003760:	4603      	mov	r3, r0
 8003762:	73fb      	strb	r3, [r7, #15]
 8003764:	e01a      	b.n	800379c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f000 fa96 	bl	8003ca4 <USB_CoreReset>
 8003778:	4603      	mov	r3, r0
 800377a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800377c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800377e:	2b00      	cmp	r3, #0
 8003780:	d106      	bne.n	8003790 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003786:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	639a      	str	r2, [r3, #56]	; 0x38
 800378e:	e005      	b.n	800379c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003794:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800379c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d10b      	bne.n	80037ba <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	f043 0206 	orr.w	r2, r3, #6
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	f043 0220 	orr.w	r2, r3, #32
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80037ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3710      	adds	r7, #16
 80037c0:	46bd      	mov	sp, r7
 80037c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80037c6:	b004      	add	sp, #16
 80037c8:	4770      	bx	lr

080037ca <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80037ca:	b480      	push	{r7}
 80037cc:	b083      	sub	sp, #12
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	f023 0201 	bic.w	r2, r3, #1
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80037de:	2300      	movs	r3, #0
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	370c      	adds	r7, #12
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr

080037ec <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	460b      	mov	r3, r1
 80037f6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80037f8:	2300      	movs	r3, #0
 80037fa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003808:	78fb      	ldrb	r3, [r7, #3]
 800380a:	2b01      	cmp	r3, #1
 800380c:	d115      	bne.n	800383a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800381a:	2001      	movs	r0, #1
 800381c:	f7fd fbe0 	bl	8000fe0 <HAL_Delay>
      ms++;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	3301      	adds	r3, #1
 8003824:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 fa2e 	bl	8003c88 <USB_GetMode>
 800382c:	4603      	mov	r3, r0
 800382e:	2b01      	cmp	r3, #1
 8003830:	d01e      	beq.n	8003870 <USB_SetCurrentMode+0x84>
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2b31      	cmp	r3, #49	; 0x31
 8003836:	d9f0      	bls.n	800381a <USB_SetCurrentMode+0x2e>
 8003838:	e01a      	b.n	8003870 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800383a:	78fb      	ldrb	r3, [r7, #3]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d115      	bne.n	800386c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800384c:	2001      	movs	r0, #1
 800384e:	f7fd fbc7 	bl	8000fe0 <HAL_Delay>
      ms++;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	3301      	adds	r3, #1
 8003856:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f000 fa15 	bl	8003c88 <USB_GetMode>
 800385e:	4603      	mov	r3, r0
 8003860:	2b00      	cmp	r3, #0
 8003862:	d005      	beq.n	8003870 <USB_SetCurrentMode+0x84>
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2b31      	cmp	r3, #49	; 0x31
 8003868:	d9f0      	bls.n	800384c <USB_SetCurrentMode+0x60>
 800386a:	e001      	b.n	8003870 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e005      	b.n	800387c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2b32      	cmp	r3, #50	; 0x32
 8003874:	d101      	bne.n	800387a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e000      	b.n	800387c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800387a:	2300      	movs	r3, #0
}
 800387c:	4618      	mov	r0, r3
 800387e:	3710      	adds	r7, #16
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}

08003884 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003884:	b084      	sub	sp, #16
 8003886:	b580      	push	{r7, lr}
 8003888:	b086      	sub	sp, #24
 800388a:	af00      	add	r7, sp, #0
 800388c:	6078      	str	r0, [r7, #4]
 800388e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003892:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003896:	2300      	movs	r3, #0
 8003898:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800389e:	2300      	movs	r3, #0
 80038a0:	613b      	str	r3, [r7, #16]
 80038a2:	e009      	b.n	80038b8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	3340      	adds	r3, #64	; 0x40
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	4413      	add	r3, r2
 80038ae:	2200      	movs	r2, #0
 80038b0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	3301      	adds	r3, #1
 80038b6:	613b      	str	r3, [r7, #16]
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	2b0e      	cmp	r3, #14
 80038bc:	d9f2      	bls.n	80038a4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80038be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d11c      	bne.n	80038fe <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	68fa      	ldr	r2, [r7, #12]
 80038ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038d2:	f043 0302 	orr.w	r3, r3, #2
 80038d6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038dc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	639a      	str	r2, [r3, #56]	; 0x38
 80038fc:	e00b      	b.n	8003916 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003902:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800390e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800391c:	461a      	mov	r2, r3
 800391e:	2300      	movs	r3, #0
 8003920:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003928:	4619      	mov	r1, r3
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003930:	461a      	mov	r2, r3
 8003932:	680b      	ldr	r3, [r1, #0]
 8003934:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003938:	2b01      	cmp	r3, #1
 800393a:	d10c      	bne.n	8003956 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800393c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800393e:	2b00      	cmp	r3, #0
 8003940:	d104      	bne.n	800394c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003942:	2100      	movs	r1, #0
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f000 f965 	bl	8003c14 <USB_SetDevSpeed>
 800394a:	e008      	b.n	800395e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800394c:	2101      	movs	r1, #1
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f000 f960 	bl	8003c14 <USB_SetDevSpeed>
 8003954:	e003      	b.n	800395e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003956:	2103      	movs	r1, #3
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f000 f95b 	bl	8003c14 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800395e:	2110      	movs	r1, #16
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f000 f8f3 	bl	8003b4c <USB_FlushTxFifo>
 8003966:	4603      	mov	r3, r0
 8003968:	2b00      	cmp	r3, #0
 800396a:	d001      	beq.n	8003970 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f000 f91f 	bl	8003bb4 <USB_FlushRxFifo>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d001      	beq.n	8003980 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003986:	461a      	mov	r2, r3
 8003988:	2300      	movs	r3, #0
 800398a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003992:	461a      	mov	r2, r3
 8003994:	2300      	movs	r3, #0
 8003996:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800399e:	461a      	mov	r2, r3
 80039a0:	2300      	movs	r3, #0
 80039a2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80039a4:	2300      	movs	r3, #0
 80039a6:	613b      	str	r3, [r7, #16]
 80039a8:	e043      	b.n	8003a32 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	015a      	lsls	r2, r3, #5
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	4413      	add	r3, r2
 80039b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80039bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80039c0:	d118      	bne.n	80039f4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d10a      	bne.n	80039de <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	015a      	lsls	r2, r3, #5
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	4413      	add	r3, r2
 80039d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039d4:	461a      	mov	r2, r3
 80039d6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80039da:	6013      	str	r3, [r2, #0]
 80039dc:	e013      	b.n	8003a06 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	015a      	lsls	r2, r3, #5
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	4413      	add	r3, r2
 80039e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039ea:	461a      	mov	r2, r3
 80039ec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80039f0:	6013      	str	r3, [r2, #0]
 80039f2:	e008      	b.n	8003a06 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	015a      	lsls	r2, r3, #5
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	4413      	add	r3, r2
 80039fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a00:	461a      	mov	r2, r3
 8003a02:	2300      	movs	r3, #0
 8003a04:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	015a      	lsls	r2, r3, #5
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	4413      	add	r3, r2
 8003a0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a12:	461a      	mov	r2, r3
 8003a14:	2300      	movs	r3, #0
 8003a16:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	015a      	lsls	r2, r3, #5
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	4413      	add	r3, r2
 8003a20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a24:	461a      	mov	r2, r3
 8003a26:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003a2a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	3301      	adds	r3, #1
 8003a30:	613b      	str	r3, [r7, #16]
 8003a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a34:	693a      	ldr	r2, [r7, #16]
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d3b7      	bcc.n	80039aa <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	613b      	str	r3, [r7, #16]
 8003a3e:	e043      	b.n	8003ac8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	015a      	lsls	r2, r3, #5
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	4413      	add	r3, r2
 8003a48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a56:	d118      	bne.n	8003a8a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d10a      	bne.n	8003a74 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	015a      	lsls	r2, r3, #5
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	4413      	add	r3, r2
 8003a66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003a70:	6013      	str	r3, [r2, #0]
 8003a72:	e013      	b.n	8003a9c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	015a      	lsls	r2, r3, #5
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	4413      	add	r3, r2
 8003a7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a80:	461a      	mov	r2, r3
 8003a82:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003a86:	6013      	str	r3, [r2, #0]
 8003a88:	e008      	b.n	8003a9c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	015a      	lsls	r2, r3, #5
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	4413      	add	r3, r2
 8003a92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a96:	461a      	mov	r2, r3
 8003a98:	2300      	movs	r3, #0
 8003a9a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	015a      	lsls	r2, r3, #5
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	2300      	movs	r3, #0
 8003aac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	015a      	lsls	r2, r3, #5
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	4413      	add	r3, r2
 8003ab6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aba:	461a      	mov	r2, r3
 8003abc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003ac0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	3301      	adds	r3, #1
 8003ac6:	613b      	str	r3, [r7, #16]
 8003ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aca:	693a      	ldr	r2, [r7, #16]
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d3b7      	bcc.n	8003a40 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ad6:	691b      	ldr	r3, [r3, #16]
 8003ad8:	68fa      	ldr	r2, [r7, #12]
 8003ada:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ade:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ae2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003af0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d105      	bne.n	8003b04 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	699b      	ldr	r3, [r3, #24]
 8003afc:	f043 0210 	orr.w	r2, r3, #16
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	699a      	ldr	r2, [r3, #24]
 8003b08:	4b0f      	ldr	r3, [pc, #60]	; (8003b48 <USB_DevInit+0x2c4>)
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003b10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d005      	beq.n	8003b22 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	699b      	ldr	r3, [r3, #24]
 8003b1a:	f043 0208 	orr.w	r2, r3, #8
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003b22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d107      	bne.n	8003b38 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	699b      	ldr	r3, [r3, #24]
 8003b2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003b30:	f043 0304 	orr.w	r3, r3, #4
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003b38:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3718      	adds	r7, #24
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003b44:	b004      	add	sp, #16
 8003b46:	4770      	bx	lr
 8003b48:	803c3800 	.word	0x803c3800

08003b4c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b085      	sub	sp, #20
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003b56:	2300      	movs	r3, #0
 8003b58:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	3301      	adds	r3, #1
 8003b5e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	4a13      	ldr	r2, [pc, #76]	; (8003bb0 <USB_FlushTxFifo+0x64>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d901      	bls.n	8003b6c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003b68:	2303      	movs	r3, #3
 8003b6a:	e01b      	b.n	8003ba4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	691b      	ldr	r3, [r3, #16]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	daf2      	bge.n	8003b5a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003b74:	2300      	movs	r3, #0
 8003b76:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	019b      	lsls	r3, r3, #6
 8003b7c:	f043 0220 	orr.w	r2, r3, #32
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	3301      	adds	r3, #1
 8003b88:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	4a08      	ldr	r2, [pc, #32]	; (8003bb0 <USB_FlushTxFifo+0x64>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d901      	bls.n	8003b96 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e006      	b.n	8003ba4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	f003 0320 	and.w	r3, r3, #32
 8003b9e:	2b20      	cmp	r3, #32
 8003ba0:	d0f0      	beq.n	8003b84 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003ba2:	2300      	movs	r3, #0
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3714      	adds	r7, #20
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr
 8003bb0:	00030d40 	.word	0x00030d40

08003bb4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b085      	sub	sp, #20
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	4a11      	ldr	r2, [pc, #68]	; (8003c10 <USB_FlushRxFifo+0x5c>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d901      	bls.n	8003bd2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	e018      	b.n	8003c04 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	691b      	ldr	r3, [r3, #16]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	daf2      	bge.n	8003bc0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2210      	movs	r2, #16
 8003be2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	3301      	adds	r3, #1
 8003be8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	4a08      	ldr	r2, [pc, #32]	; (8003c10 <USB_FlushRxFifo+0x5c>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d901      	bls.n	8003bf6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e006      	b.n	8003c04 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	f003 0310 	and.w	r3, r3, #16
 8003bfe:	2b10      	cmp	r3, #16
 8003c00:	d0f0      	beq.n	8003be4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003c02:	2300      	movs	r3, #0
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3714      	adds	r7, #20
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr
 8003c10:	00030d40 	.word	0x00030d40

08003c14 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b085      	sub	sp, #20
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	460b      	mov	r3, r1
 8003c1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	78fb      	ldrb	r3, [r7, #3]
 8003c2e:	68f9      	ldr	r1, [r7, #12]
 8003c30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c34:	4313      	orrs	r3, r2
 8003c36:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3714      	adds	r7, #20
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr

08003c46 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003c46:	b480      	push	{r7}
 8003c48:	b085      	sub	sp, #20
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	68fa      	ldr	r2, [r7, #12]
 8003c5c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003c60:	f023 0303 	bic.w	r3, r3, #3
 8003c64:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	68fa      	ldr	r2, [r7, #12]
 8003c70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c74:	f043 0302 	orr.w	r3, r3, #2
 8003c78:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003c7a:	2300      	movs	r3, #0
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3714      	adds	r7, #20
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr

08003c88 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	695b      	ldr	r3, [r3, #20]
 8003c94:	f003 0301 	and.w	r3, r3, #1
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	370c      	adds	r7, #12
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr

08003ca4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b085      	sub	sp, #20
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003cac:	2300      	movs	r3, #0
 8003cae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	3301      	adds	r3, #1
 8003cb4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	4a13      	ldr	r2, [pc, #76]	; (8003d08 <USB_CoreReset+0x64>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d901      	bls.n	8003cc2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e01b      	b.n	8003cfa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	691b      	ldr	r3, [r3, #16]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	daf2      	bge.n	8003cb0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	f043 0201 	orr.w	r2, r3, #1
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	3301      	adds	r3, #1
 8003cde:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	4a09      	ldr	r2, [pc, #36]	; (8003d08 <USB_CoreReset+0x64>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d901      	bls.n	8003cec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003ce8:	2303      	movs	r3, #3
 8003cea:	e006      	b.n	8003cfa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	691b      	ldr	r3, [r3, #16]
 8003cf0:	f003 0301 	and.w	r3, r3, #1
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d0f0      	beq.n	8003cda <USB_CoreReset+0x36>

  return HAL_OK;
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3714      	adds	r7, #20
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr
 8003d06:	bf00      	nop
 8003d08:	00030d40 	.word	0x00030d40

08003d0c <__libc_init_array>:
 8003d0c:	b570      	push	{r4, r5, r6, lr}
 8003d0e:	4d0d      	ldr	r5, [pc, #52]	; (8003d44 <__libc_init_array+0x38>)
 8003d10:	4c0d      	ldr	r4, [pc, #52]	; (8003d48 <__libc_init_array+0x3c>)
 8003d12:	1b64      	subs	r4, r4, r5
 8003d14:	10a4      	asrs	r4, r4, #2
 8003d16:	2600      	movs	r6, #0
 8003d18:	42a6      	cmp	r6, r4
 8003d1a:	d109      	bne.n	8003d30 <__libc_init_array+0x24>
 8003d1c:	4d0b      	ldr	r5, [pc, #44]	; (8003d4c <__libc_init_array+0x40>)
 8003d1e:	4c0c      	ldr	r4, [pc, #48]	; (8003d50 <__libc_init_array+0x44>)
 8003d20:	f000 f820 	bl	8003d64 <_init>
 8003d24:	1b64      	subs	r4, r4, r5
 8003d26:	10a4      	asrs	r4, r4, #2
 8003d28:	2600      	movs	r6, #0
 8003d2a:	42a6      	cmp	r6, r4
 8003d2c:	d105      	bne.n	8003d3a <__libc_init_array+0x2e>
 8003d2e:	bd70      	pop	{r4, r5, r6, pc}
 8003d30:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d34:	4798      	blx	r3
 8003d36:	3601      	adds	r6, #1
 8003d38:	e7ee      	b.n	8003d18 <__libc_init_array+0xc>
 8003d3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d3e:	4798      	blx	r3
 8003d40:	3601      	adds	r6, #1
 8003d42:	e7f2      	b.n	8003d2a <__libc_init_array+0x1e>
 8003d44:	08003d9c 	.word	0x08003d9c
 8003d48:	08003d9c 	.word	0x08003d9c
 8003d4c:	08003d9c 	.word	0x08003d9c
 8003d50:	08003da0 	.word	0x08003da0

08003d54 <memset>:
 8003d54:	4402      	add	r2, r0
 8003d56:	4603      	mov	r3, r0
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d100      	bne.n	8003d5e <memset+0xa>
 8003d5c:	4770      	bx	lr
 8003d5e:	f803 1b01 	strb.w	r1, [r3], #1
 8003d62:	e7f9      	b.n	8003d58 <memset+0x4>

08003d64 <_init>:
 8003d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d66:	bf00      	nop
 8003d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d6a:	bc08      	pop	{r3}
 8003d6c:	469e      	mov	lr, r3
 8003d6e:	4770      	bx	lr

08003d70 <_fini>:
 8003d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d72:	bf00      	nop
 8003d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d76:	bc08      	pop	{r3}
 8003d78:	469e      	mov	lr, r3
 8003d7a:	4770      	bx	lr
